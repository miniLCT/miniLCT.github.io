<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MiniLCT</title>
  
  <subtitle>及时当勉励</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-03-02T05:44:59.931Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>miniLCT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cpp中的类型转换</title>
    <link href="http://yoursite.com/2022/03/02/cpp_cast/"/>
    <id>http://yoursite.com/2022/03/02/cpp_cast/</id>
    <published>2022-03-02T00:20:15.000Z</published>
    <updated>2022-03-02T05:44:59.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h3 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h3><p>static_cast主要用于不同类型变量之间的转换及左值转右值等.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不同类型之间的转换</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">10.1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//左值转右值</span></span><br><span class="line"><span class="keyword">int</span> lv = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;&amp; rv = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&amp;&amp;&gt;(lv);</span><br></pre></td></tr></table></figure><p>而对于类对象来说，static_cast不能直接将一种类对象转成另一种类对象。但你可以利用static_cast将基类指针/引用转成子类指针/引用.(父子关系的类之间才可以做如上转换，否则编译失败)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line">    b = <span class="keyword">static_cast</span>&lt;B&gt;(a); <span class="comment">//不允许static_cast将一个对象转成另一个对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">有父子关系的 将基类的指针/引用 转成子类的指针/引用</span><br><span class="line">...</span><br><span class="line">A ca;</span><br><span class="line">B &amp; crb = <span class="keyword">static_cast</span>&lt;B&amp;&gt;(ca);</span><br><span class="line">...</span><br><span class="line">A * pa = <span class="keyword">new</span> A();</span><br><span class="line">B * cpb = <span class="keyword">static_cast</span>&lt;B*&gt;(pa);</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line"><span class="keyword">double</span> *pd  = <span class="keyword">new</span> <span class="keyword">double</span>();</span><br><span class="line"><span class="keyword">int</span> * pi = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>*&gt;(pd); <span class="comment">//报错</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>static_cast不允许不同类型之间指针/引用的转换(有父子关系的类对象除外)</strong></p><p>指针和引用的转换不能用static_cast，而应该用reinterpret_cast。</p><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">double</span> *pd  = <span class="keyword">new</span> <span class="keyword">double</span>();</span><br><span class="line"><span class="keyword">int</span> * pi = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>*&gt;(pd);</span><br><span class="line">...</span><br><span class="line">将<span class="keyword">double</span>* 转成 <span class="keyword">int</span>*</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">10.1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>&gt;(d);</span><br><span class="line">...这样转化时不可以的。会报错</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> ll = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">long</span>&gt;(&amp;a);</span><br><span class="line"><span class="keyword">double</span> *dd = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">double</span>*&gt;(ll);</span><br><span class="line">...可以将指针转成长整型，也可以将长整型转成指针 上述是将<span class="keyword">int</span>*转成 <span class="keyword">long</span>型，有将<span class="keyword">long</span>型转化成<span class="keyword">double</span>*型</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">对于对象指针/引用的转换与普通类型的指针/引用转换是一样的。因此不同类型的对象指针/引用可以随意转换，但转换后是否会引起问题它不关心，这要由开发人员自己保证。</span><br><span class="line">A * pa = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">B b;</span><br><span class="line">B &amp; rb = B();</span><br><span class="line"></span><br><span class="line">C * cc = <span class="keyword">reinterpret_cast</span>&lt;C*&gt;(pa);</span><br><span class="line">C &amp; rcc = <span class="keyword">reinterpret_cast</span>&lt;C&amp;&gt;(rb);</span><br></pre></td></tr></table></figure><p>reinterpret_cast是对指针/引用的转换，其中必须至少有一个是指针或引用，否则它会报错。</p><h3 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h3><p>去掉<strong>指针/引用</strong>中的const限制。这里要注意的是被转换的一定是指针/引用的const，而常数的const是不能去掉的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">... 可以</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * pca = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> * pa = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(pca);</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">... 不可以 常数的<span class="keyword">const</span>不可以去掉</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b  = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&gt;(a);</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line">是否可以将一种类型的<span class="keyword">const</span>指针转换成另一种类型的非<span class="keyword">const</span>指针呢</span><br><span class="line">... 不可以，对于<span class="keyword">const_cast</span>来说，它只能将同一类型的<span class="keyword">const</span> 指针/引用 转成非<span class="keyword">const</span>指针/引用。</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * pca = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">double</span> * pa = <span class="keyword">const_cast</span>&lt;<span class="keyword">double</span>*&gt;(pca);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>const_cast是一个专门去掉同一类型的const限制的类型转换方法</p><h3 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h3><p>一、它只能处理类对象；二、它只能处理指针；三、它只能用于将子对象转换成父对象这样的操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">A * a;</span><br><span class="line">B * b =<span class="keyword">new</span> B();</span><br><span class="line">a = <span class="keyword">dynamic_cast</span>&lt;A*&gt;(b);</span><br><span class="line">...</span><br><span class="line">只有这样能成功，其他都会失败</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了cpp的类型转换&lt;/center&gt;</summary>
    
    
    
    <category term="CPP" scheme="http://yoursite.com/categories/CPP/"/>
    
    
    <category term="CPP" scheme="http://yoursite.com/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>软件开发的201个原则</title>
    <link href="http://yoursite.com/2022/01/29/201PrinciplesOfSoftwareDevelopment/"/>
    <id>http://yoursite.com/2022/01/29/201PrinciplesOfSoftwareDevelopment/</id>
    <published>2022-01-29T14:05:20.000Z</published>
    <updated>2022-01-29T11:01:19.326Z</updated>
    
    <content type="html"><![CDATA[<p><kbd> Live long and prosper.</kbd></p><p><kbd> 生生不息，繁荣昌盛。</kbd></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Technique(技术) Language(语言) Tool(工具)</p><h1 id="一般原则"><a href="#一般原则" class="headerlink" title="一般原则"></a>一般原则</h1><h1 id="需求工程原则"><a href="#需求工程原则" class="headerlink" title="需求工程原则"></a>需求工程原则</h1><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h1 id="编码原则"><a href="#编码原则" class="headerlink" title="编码原则"></a>编码原则</h1><h1 id="测试原则"><a href="#测试原则" class="headerlink" title="测试原则"></a>测试原则</h1><h1 id="管理原则"><a href="#管理原则" class="headerlink" title="管理原则"></a>管理原则</h1><h1 id="产品保证原则"><a href="#产品保证原则" class="headerlink" title="产品保证原则"></a>产品保证原则</h1><h1 id="演变原则"><a href="#演变原则" class="headerlink" title="演变原则"></a>演变原则</h1>]]></content>
    
    
    <summary type="html">&lt;center&gt;献给每一位追求卓越的软件工程师&lt;/center&gt;</summary>
    
    
    
    <category term="software" scheme="http://yoursite.com/categories/software/"/>
    
    
    <category term="software" scheme="http://yoursite.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>gym102091 E-How Many Groups 关于dp的两种思考</title>
    <link href="http://yoursite.com/2021/03/29/GYM102091E/"/>
    <id>http://yoursite.com/2021/03/29/GYM102091E/</id>
    <published>2021-03-28T16:05:20.000Z</published>
    <updated>2021-03-29T08:16:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102091/attachments/download/8314/20182019-acmicpc-asia-nakhon-pathom-regional-contest-en.pdf" target="_blank" rel="noopener">题目传送门 E题：How many groups</a></p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这道题是在3.28日训练赛时候遇到的。当时情况是三个多小时后开了这题，队友在设计三维dp状态转移，然而wa了。当时我个人再看其他题目，等看这个题目时候，迷迷糊糊的，单单是感觉这个值域提醒的200很有文章。 队友写了蛮久也没过，可能是边界没有处理好。</p><p>其实之前也是做过这类的题目，但是确实存在不是很熟悉的情况。故思考了很久之后，记录一下这两种方法。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给定一个$n(n\le100)$个元素的数组$A(\forall A_i \in A \ \ \ 1\le A_i \le 200)$，定义了关系：有两个数字$a,b$，当且仅当$|a-b|\le2$时，$a,b$在同一组，求一个最大的分组，输出这个分组的数量。（可以对任意位置的数字进行操作+1，或者-1，一共可以操作两次）。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>显然的一个事情，我们可以把数组从小到大排序，然后有个直观的贪心想法是让下面的尽量往下靠靠，让上面的往下靠靠，然后其实很显然（根据数据范围）就能发现这应该往dp方向靠。（贪心不对！）</p><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>不放设 $dp[i][j][k]$ 表示到以第 $i$ 个数为结尾的，且第 $i$ 个数改了 $j$ 次，第 $i$ 个数改动值为 $k-1$ 的集合最大值。</p><p>考虑状态转移：</p><p>首先思考如果 $i$ 改动次数为 $0$ 次的情况：</p><script type="math/tex; mode=display">\begin{cases}dp[i][0][1]=dp[i-1][0][1] + 1& \text{a[i] - a[i-1] <=2}\\dp[i][0][1] = 1& \text{others}\end{cases}</script><p>然后考虑 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">j：1-&gt;2</span><br><span class="line">  k:0-&gt;2</span><br><span class="line">    先给定初始值的状态dp[i][j][k]=1</span><br><span class="line">    枚举i-1的所有修改状态l:0-&gt;2</span><br><span class="line">    ai是a[i]修改后的值，aj是a[i-1]修改后的值。</span><br><span class="line">    考虑状态转移：</span><br><span class="line">    第一种是第i个数不修改，dp[i][j][1]直接由dp[i-1][j][l]转移得到</span><br><span class="line">    第二种是第i个数修改，dp[i][j][0|2]有dp[i-1][j-1][l]转移得到</span><br></pre></td></tr></table></figure><p>注意在dp过程中不断更新ans</p><p>此外特别要注意要使冗余状态不会对结果产生影响：冗余状态的初始值必须为0，这样从冗余态推导到可行态才会变成1 （冗余态不要被赋初值为1即可）</p><p>所以一开始不可以将dp数组初始化为0 </p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>按照值域利用滚动数组记录+1，-1的情况。滚动的原因是，上一个数字如果是拿来减的，那么在本次更新时候是用不到减的数的。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>解法1代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], dp[maxn][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt = <span class="number">1</span>; tt &lt;= t; tt++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  <span class="comment">//到i一次也没有改的情况</span></span><br><span class="line">                    <span class="keyword">if</span> (a[i] - a[i - <span class="number">1</span>] &lt;= <span class="number">2</span>) dp[i][<span class="number">0</span>][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> dp[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//剩下的是有改动的情况</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) &#123;</span><br><span class="line">                    dp[i][j][k] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= <span class="number">2</span>; l++) &#123;</span><br><span class="line">                        <span class="keyword">int</span> ai = a[i] - k + <span class="number">1</span>, aj = a[i - <span class="number">1</span>] - l + <span class="number">1</span>;  <span class="comment">//两个数改动后的值</span></span><br><span class="line">                        <span class="comment">//不改动a[i]的情况</span></span><br><span class="line">                        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;  <span class="comment">//这里不会出现冗余态：转移必定合法</span></span><br><span class="line">                            <span class="keyword">if</span> (a[i] - aj &lt;= <span class="number">2</span>)</span><br><span class="line">                                dp[i][j][<span class="number">1</span>] = max(dp[i][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j][l] + <span class="number">1</span>);  <span class="comment">//注意：如果从不存在的状态推过来，就是0+1的形式</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//改动a[i]的情况：这里会出现冗余态，dp[i-1][0][0|2]的状态是不存在的</span></span><br><span class="line">                        <span class="keyword">if</span> (ai - aj &lt;= <span class="number">2</span>) dp[i][j][k] = max(dp[i][j][k], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][l] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) ans = max(ans, dp[i][j][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, tt, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解法2代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn], dp[<span class="number">2</span>][maxn][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    CASET &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;cur = a[i];</span><br><span class="line">            <span class="keyword">int</span> now = i &amp; <span class="number">1</span>, last = !(i &amp; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur - <span class="number">1</span>; j &lt;= cur + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++)&#123;</span><br><span class="line">                    dp[now][j][k] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur - <span class="number">1</span>; j &lt;= cur + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                dp[now][cur - <span class="number">1</span>][<span class="number">1</span>] = max(dp[now][cur - <span class="number">1</span>][<span class="number">1</span>], dp[last][j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur - <span class="number">1</span>][<span class="number">2</span>] = max(dp[now][cur - <span class="number">1</span>][<span class="number">2</span>], dp[last][j][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur; j &lt;= cur + <span class="number">2</span>; j++) &#123;</span><br><span class="line">                dp[now][cur][<span class="number">0</span>] = max(dp[now][cur][<span class="number">0</span>], dp[last][j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur][<span class="number">1</span>] = max(dp[now][cur][<span class="number">1</span>], dp[last][j][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur][<span class="number">2</span>] = max(dp[now][cur][<span class="number">2</span>], dp[last][j][<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt;= cur + <span class="number">3</span>; j++) &#123;</span><br><span class="line">                dp[now][cur + <span class="number">1</span>][<span class="number">1</span>] = max(dp[now][cur + <span class="number">1</span>][<span class="number">1</span>], dp[last][j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur + <span class="number">1</span>][<span class="number">2</span>] = max(dp[now][cur + <span class="number">1</span>][<span class="number">2</span>], dp[last][j][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur - <span class="number">1</span>; j &lt;= cur + <span class="number">1</span>; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) ans = max(ans, dp[now][j][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; __CS &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>暴力处理所有情况： if-else 大法好。 如sol1。</p><p><img src="https://i.loli.net/2021/03/29/sXTw8gxJGZjYNyu.png" alt="zby🐂🍺"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了GYM102091E题的两种dp的思考方式&lt;/center&gt;</summary>
    
    
    
    <category term="Dynamic Programming" scheme="http://yoursite.com/categories/Dynamic-Programming/"/>
    
    
    <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>约瑟夫问题简单探讨</title>
    <link href="http://yoursite.com/2021/03/07/josephus/"/>
    <id>http://yoursite.com/2021/03/07/josephus/</id>
    <published>2021-03-07T10:20:15.000Z</published>
    <updated>2021-03-07T13:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>约瑟夫问题有很多经典例题，例如猴子选王、丢手绢。在算法学习过程中，这是大部分人都会遇到的一类问题。一般地，可以简单的做到$O(n\times m)$模拟解法。</p><p>然而在一些情况下，这样的复杂度并不优秀，还可以再搞一搞~</p><h2 id="解法介绍"><a href="#解法介绍" class="headerlink" title="解法介绍"></a>解法介绍</h2><p>具体数学上有讲</p><p>此类问题中，影响到一个人在出圈顺序中的位置 $id$ 的有三个关键参量：他的编号 $i$ 、人数 $n$ 以及出圈间歇 $m$。</p><p>在某些情况下，部分参量并不起作用。如 $m|i$ 时， $i$ 对 $id$ 无影响；$m=1$  时， $n$ 对 $id$ 无影响。在部分题目中这可能成为解题的关键。</p><p>该类问题有两种问法，分别是：</p><ul><li>询问约瑟夫排列（即出圈顺序）</li><li>询问第 $k$ 出圈（第 $k$ 出圈为获胜者）<h3 id="询问约瑟夫排列"><a href="#询问约瑟夫排列" class="headerlink" title="询问约瑟夫排列"></a>询问约瑟夫排列</h3></li></ul><p>时间复杂度$O(nlog \ n)$</p><p>这样考虑问题：假定当前出圈的人编号为当前第 $k$ 小，此人出圈后圈内还有 $n$ 人，那么下一个出圈的人为圈内编号第 $(k-1+m-1)\bmod n + 1$ 小。</p><p>那么只需要一个数据结构，满足能够单点修改，并查询区间第 $k$ 小的：权值树状数组。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000001</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ValueBIT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c[N], maxn;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        maxn = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) c[i] = lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= maxn; i += lowbit(i)) c[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            s += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">if</span> (s &gt; maxn || c[s] + sum &gt;= k)</span><br><span class="line">                s -= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sum += c[s];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; vbit;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    vbit.reset(n);</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        now = (now - <span class="number">1</span> + m - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = vbit.find_kth(now);</span><br><span class="line">        vbit.add(k, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, k);</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="询问第-k-出圈"><a href="#询问第-k-出圈" class="headerlink" title="询问第$k$出圈"></a>询问第$k$出圈</h3><h4 id="时间复杂度-O-k"><a href="#时间复杂度-O-k" class="headerlink" title="时间复杂度$O(k)$"></a>时间复杂度$O(k)$</h4><p>令 $f(n,m,k)$ 表示第$k$ 出圈人。</p><p>那么有公式：</p><script type="math/tex; mode=display">f(n,m,k)=\begin{cases}(m - 1) \bmod n + 1 & , k = 1 \\(f(n - 1, m, k - 1) -1 + m) \bmod n + 1 & , k > 0\end{cases}</script><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((k == <span class="number">1</span> ? <span class="number">0</span> : f(n - <span class="number">1</span>, m, k - <span class="number">1</span>)) - <span class="number">1</span> + m) % n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非递归写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = (m - <span class="number">1</span>) % (n - k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">2</span>; i &lt;= n; i++) s = (s + m) % i;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度-O-log-frac-m-m-1-n"><a href="#时间复杂度-O-log-frac-m-m-1-n" class="headerlink" title="时间复杂度$O(log{\frac{m}{m-1}} n)$"></a>时间复杂度$O(log{\frac{m}{m-1}} n)$</h4><p>当 $n&gt;&gt;m$ 时，每次从 1 到 n 的一个循环中，有 $\lfloor \frac{n}{m} \rfloor \times m$人报数，其中 $\lfloor \frac{n}{m} \rfloor$ 人出圈。</p><p>参考前面时间复杂度 $O(k)$ 的式子，可以发现在此过程中有许多取模操作是无作用的。</p><p>于是我们可以合并一些操作，使得部分加法合并为乘法。</p><p>有公式</p><script type="math/tex; mode=display">f(n, m, k) = (f(n - c, m, k - c) - 1 + m \times c) \bmod n + 1</script><p>式中 c 表示从当前的 n 一直变化到到 c 的期间内取模都无作用的最大的 c 。</p><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">int</span> i = n - k + <span class="number">1</span>, s = (m - <span class="number">1</span>) % i;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = min(n - i, (i - s + m - <span class="number">2</span>) / (m - <span class="number">1</span>));</span><br><span class="line">        s = (s + m * c) % (i += c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="时间复杂度-O-frac-mk-n"><a href="#时间复杂度-O-frac-mk-n" class="headerlink" title="时间复杂度$O(\frac{mk}{n})$"></a>时间复杂度$O(\frac{mk}{n})$</h4><p>易知第 $k$ 出圈人为第 $k\times m$ 报数人，以此为基础进行推导。</p><p>首先明确几个概念：</p><p>位置编号：从 $1$ 开始编号到 $n$，表示在圈内的初始编号为$k$ 。</p><p>报数编号：从 $1$ 开始编号到 $n\times m$，表示第 $k$ 次报数。</p><p>报数：从 $1$ 开始编号到 $m$，表示某人所报的某个数。</p><p>首先取一个报数编号$p$ ，对应位置编号 $id$。可以用该式来表示： $p = a \times m + b(0\le a &lt;n,1\le b\le m)$。实际含义是：在第 $a$ 轮报数结束后，报数为 $b$。</p><p>那么容易推出以下信息：</p><p>此时圈内所剩人员数量为 $n-a$</p><p>若此人报数 $b=m$，则此人出局。否则圈内剩余的人将会恰好各报一次数，然后此人会再一次报数。</p><p>假设此人未出局，那么 $b&lt;m$。</p><p>设此人下一次报数编号为 $q$ ，易知 $q = p + n - a = a \times (m - 1) + b + n$。</p><p>那么可以推导: $a = \dfrac{q - n - b}{m-1} = \lfloor \dfrac{q - n - 1}{m - 1} \rfloor$。</p><p>所以有：$p = q - n + a = q - n - \lfloor \dfrac{q - n - 1}{m - 1} \rfloor = \lfloor \dfrac{(q - n - 1) \times m}{m - 1} \rfloor + 1$</p><p>这样就完成了后继公式到前驱公式的变化，如此不断迭代，直到得到他是第 $k$ 报数人为止。</p><p>有公式如下：</p><script type="math/tex; mode=display">f(n, m, k) = g(n, m, k \times m)</script><script type="math/tex; mode=display">g(n, m, x) =\begin{cases}x & , x \leq n \\g(n, m, \lfloor \dfrac{(x - 1 - n) \times m}{m - 1} \rfloor + 1) &, x > n\end{cases}</script><p>代码实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt;= n ? x : g(n, m, (x - <span class="number">1</span> - n) * m / (m - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> g(n, m, k * m); &#125;</span><br></pre></td></tr></table></figure></p><p>注意到该函数可以非递归实现，给出优化后的代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = k * m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &gt;= n) s = (s - n) * m / (m - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><a href="https://codeforces.com/gym/101955/problem/K" target="_blank" rel="noopener">2018-2019 ACM-ICPC, Asia Shenyang Regional Contest K - Let the Flames Begin</a></p><p>感谢牛逼网友！</p><p>更详细的介绍可以看具体数学。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;一文终结约瑟夫问题&lt;/center&gt;</summary>
    
    
    
    <category term="Math" scheme="http://yoursite.com/categories/Math/"/>
    
    
    <category term="Template" scheme="http://yoursite.com/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round &amp;#35; 703 (Div. 2)题解</title>
    <link href="http://yoursite.com/2021/02/19/CF-703div2/"/>
    <id>http://yoursite.com/2021/02/19/CF-703div2/</id>
    <published>2021-02-19T10:20:15.000Z</published>
    <updated>2021-02-25T12:03:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Roast"><a href="#Roast" class="headerlink" title="Roast:"></a>Roast:</h2><p>看到公告里说 <code>I tried my best to create some good problems and clear statements, so I hope you&#39;ll enjoy the round:)</code> 和 <code>story</code> 然后在做题时候感觉自己的C假了。感慨weak data。然而还好没有$FST$。</p><p>很可惜的就是F题用了<code>time</code>这个变量 $\textsf{CE}$ 了，不然绝杀了QwQ。。</p><p>我太菜了。</p><h2 id="A-Shifting-Stacks"><a href="#A-Shifting-Stacks" class="headerlink" title="A - Shifting Stacks"></a>A - Shifting Stacks</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 堆石头堆，第 $i$ 堆上面有 $h_i$ 块石头。现在可以进行多次操作，每次可以将第 $i$ 堆上面拿走一块石头放到第 $i+1$ 堆上面（别问能不能拿走最后一堆上面的），可以重复在某一堆上面拿，直到拿空。问能否在多次操作之后使得 $h_i$ 呈严格单调递增。$1\le n\le100,0\le h_i\le10^9$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>观察发现：最小的且满足要求的数列，是 $0, 1, 2, \cdots, n-1 $。前缀和维护一下。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n , a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="comment">// int sum = 0;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="comment">// sum += a[i];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vi <span class="title">sum</span><span class="params">(n+<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        sum[i] = sum[i<span class="number">-1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[i] &gt;= tt)&#123;</span><br><span class="line">            tt = tt+i;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Eastern-Exhibition"><a href="#B-Eastern-Exhibition" class="headerlink" title="B - Eastern Exhibition"></a>B - Eastern Exhibition</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 个房子的坐标，第 $i$ 个房子的坐标为 $(x_i,y_i)$ 。（所有横纵坐标的值均为整数）</p><p>现在想要建一个剧院，该剧院到第 $i$ 个房子的曼哈顿距离为 $dist(x)$ ，请求出有多少个坐标，使得剧院建在这个坐标上面时，使得 $\sum_{i=1}^{n}dist(i)$ 最小？</p><p>$1\le n\le 1000,0\le x_i,y_i\le10^9$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>每个维度不相关，<code>中位数</code>问题，甚至可以多维度。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[maxn], y[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(x+<span class="number">1</span>, x+<span class="number">1</span>+n), sort(y+<span class="number">1</span>,y+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ans=ans+<span class="built_in">abs</span>(x[n/<span class="number">2</span>+<span class="number">1</span>]-x[n/<span class="number">2</span>]+<span class="number">1</span>)*<span class="built_in">abs</span>(y[n/<span class="number">2</span>+<span class="number">1</span>]+<span class="number">1</span>-y[n/<span class="number">2</span>]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C2-Guessing-the-Greatest-hard-version"><a href="#C2-Guessing-the-Greatest-hard-version" class="headerlink" title="C2 - Guessing the Greatest (hard version)"></a>C2 - Guessing the Greatest (hard version)</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>交互题。</p><p>已知一个长度为 $n$ 的数列 ${a_n}$ ，我们在一开始只知道数列的长度。</p><p>我们每次可以向系统询问一段区间 $[l,r]$ 内第二大元素的下标，现在我们需要经过多次询问，找出该数列中最大元素的下标。</p><p>询问次数不得超过 $20$ 次。</p><p>$2^{20}\ge 10^5$</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>观察到与值域没啥关系。</p><p>就考虑最大值区间在左边还是在右边。</p><p>trick ： 第一次先询问一次中间，看最大值再左边还是右边。</p><p>接着 二分区间。</p><p>$2^{20} &gt; 10^5$ 可以通过。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">auto</span> query = [&amp;](<span class="keyword">int</span> l , <span class="keyword">int</span> r)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; l &lt;&lt; <span class="string">" "</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> fii = query(<span class="number">1</span>, n);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">if</span>(fii != <span class="number">1</span> <span class="keyword">and</span> query(<span class="number">1</span>,fii) == fii)&#123;</span><br><span class="line">        l = <span class="number">1</span>, r = fii - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(query(mid, fii) == fii) &#123;</span><br><span class="line">                ans = mid, l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        l = fii + <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(query(fii, mid) == fii) &#123;</span><br><span class="line">                ans = mid , r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Max-Median"><a href="#D-Max-Median" class="headerlink" title="D - Max Median"></a>D - Max Median</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>给定一个长度为 $n$ 的数列 ${a_n}$ ，尝试找出一组长度不短于 $k$ 的连续子数列，使得其中位数最大。</p><p>中位数的定义（和标准可能有所出入）：长度为 N 的数列，其升序排列后的第 $\lfloor\frac{N+1}{2}\rfloor$ 个元素，为该数列的中位数。</p><p>$1\le k\le n\le 2\times10^5,1\le a_i\le n$</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p><a href="https://codeforces.com/blog/entry/87849" target="_blank" rel="noopener">官方做法</a>很好：</p><ol><li><p>如果 ${a_n}$ 中只有 $0$ 和 $1$ ，咋选？<br>显然，应该选择一个长度不小于 $k$ 的区间段，使得其中 $0$ 的数量少于 $1$ ，这样才能使得中位数是 $1$ 而非 $0$ 。<br>我们也可以将 0 改为 −1 ，问题就变成了如何使区间和为正数了。<br>直接求区间和的最大值，那么我们直接枚举 $r$ ，然后找 $suml$ 最小值，然后相减一下，看看能不能使得区间值大于 0 的 。朴素复杂度 $O(n^2)$ ，数据结构优化 $O(n\ log_n)$ ，线性递推复杂度  $O(n)$。</p></li><li><p>然而，现在这数列里面的数也不只 0 和 1 ？<br>我们可以抽象一下，0 和 1 是典型的布尔值，那么对于数列里面的每个数，我们可以对其进行一个布尔表达式的运算，使得结果为 0 或者 1 即可（也就是将数分成两类）。<br>题目要求中位数最大，那我们的表达式应该也和大小有关系。不妨设定一个数 $x$ ，如果 $ai\ge x$ 就将其标记为 1，反之标记为 0 。显然 $min<em>{1\le i\le n}a_i\le x\le max</em>{1\le i\le n}a_i$</p></li><li><p>对于 $x$ 构造出来的新数列，如果我们可以找出一个中位数为 1 的子数列，说明这个子数列在原数列中的对应数列，他的中位数是不小于 $x$ 的。<br>对于这个 $x$，我们可以二分: 对中位数 $x$ 在值域上进行二分，每次线性判定，总复杂度 $O(nlogn)$</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n , k , a[maxn], sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">auto</span> chk = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>] + (a[i] &gt;= x ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mn = INF, mx = -INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n; i++)&#123;</span><br><span class="line">            umin(mn, sum[i-k]), umax(mx, sum[i] - mn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mx &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = INF;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r+<span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(chk(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="E-Paired-Payment"><a href="#E-Paired-Payment" class="headerlink" title="E - Paired Payment"></a>E - Paired Payment</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="F-Pairs-of-Paths"><a href="#F-Pairs-of-Paths" class="headerlink" title="F - Pairs of Paths"></a>F - Pairs of Paths</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>有交的点对，按lca排序，先处理lca不同的（lca相同的直接C(size,2)就行了），不同的如果有交一定是lca深度大的再lca深度小的链上</p><p>时间复杂度$O(nlog^2)$</p><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">    Node(<span class="keyword">int</span> v_, <span class="keyword">int</span> w_) &#123; v = v_, w = w_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; g[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> father[maxn], sz[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line">vi anss;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], dfn[maxn], pos[maxn], decr, timee, top[maxn], son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line">    father[u] = fa;</span><br><span class="line">    dep[u] = deep;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;  <span class="comment">//</span></span><br><span class="line"> </span><br><span class="line">        dis[v] = dis[u] + g[u][i].w;</span><br><span class="line">        dfs(v, u, deep + <span class="number">1</span>);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) &#123;</span><br><span class="line">            son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_LCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i][j] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i][<span class="number">0</span>] = father[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (p[i][j - <span class="number">1</span>] != <span class="number">-1</span>) p[i][j] = p[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;pii, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class="line">    <span class="keyword">int</span> i, lg;</span><br><span class="line">    <span class="keyword">for</span> (lg = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; lg) &lt;= dep[x]; ++lg)</span><br><span class="line">        ;</span><br><span class="line">    --lg;</span><br><span class="line">    <span class="comment">/// 使x往上走直到和y在同一水平线上；</span></span><br><span class="line">    <span class="keyword">for</span> (i = lg; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[x] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[y]) x = p[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="comment">/// 此时x，y在同一水平线上，使x，y同时以相同的速度(2^j)往上走；</span></span><br><span class="line">    <span class="keyword">for</span> (i = lg; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (p[x][i] != <span class="number">-1</span> &amp;&amp; p[x][i] != p[y][i]) x = p[x][i], y = p[y][i];</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Seg &#123;</span><br><span class="line"><span class="keyword">int</span> sum[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (o &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (o &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    sum[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    build(ls, l, mid), build(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> sum[o];</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid) ret += query(ls, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid) ret += query(rs, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(LL o, LL l, LL r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    sum[o]++;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        modify(ls, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        modify(rs, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace Seg</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Seg;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; SS[maxn];</span><br><span class="line">vi Q[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(LL u, LL f, LL tp)</span> </span>&#123;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    dfn[u] = ++timee;</span><br><span class="line">    pos[timee] = u;</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) &#123;</span><br><span class="line">        dfs2(son[u], u, tp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        LL v = g[u][i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == f || v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v, u, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(LL u, LL f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id[maxn], cnt[maxn];</span><br><span class="line">    <span class="function">LL <span class="title">tmp</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        LL v = g[u][i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        dfs3(v, u);</span><br><span class="line">        id[v] = ++tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; SS[u].size(); ++i) &#123;</span><br><span class="line">        int x(SS[u][i].first), y(SS[u][i].second);</span><br><span class="line">        <span class="keyword">if</span> (x != u) &#123;</span><br><span class="line">            decr += cnt[x];</span><br><span class="line">            cnt[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y != u) &#123;</span><br><span class="line">            decr += cnt[y];</span><br><span class="line">            cnt[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x != u &amp;&amp; y != u) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[x] &gt; id[y]) swap(x, y);</span><br><span class="line">            decr -= mp[pii(x, y)];</span><br><span class="line">            mp[pii(x, y)]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">upp</span><span class="params">(<span class="keyword">int</span> x, LL len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> ((len &gt;&gt; i) &amp; <span class="number">1</span>) x = p[x][i];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="function">LL <span class="title">ret</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) swap(x, y);</span><br><span class="line">        ret += Seg::query(<span class="number">1</span>, <span class="number">1</span>, n, dfn[top[x]], dfn[x]);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) swap(x, y);</span><br><span class="line">    ret += Seg::query(<span class="number">1</span>, <span class="number">1</span>, n, dfn[x], dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Seg::modify(<span class="number">1</span>, <span class="number">1</span>, n, dfn[x]); &#125;</span><br><span class="line"> </span><br><span class="line">tuple&lt;<span class="keyword">int</span> , <span class="keyword">int</span> , <span class="keyword">int</span> &gt; qy[<span class="number">300010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        w = <span class="number">1</span>;</span><br><span class="line">        g[x].push_back(Node(y, w));</span><br><span class="line">        g[y].push_back(Node(x, w));</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    Init_LCA();</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> kp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="function">LL <span class="title">z</span><span class="params">(LCA(x, y))</span></span>;</span><br><span class="line">        Q[dep[z]].eb(i);</span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; "z === " &lt;&lt; z &lt;&lt; "  " &lt;&lt; dep[z] &lt;&lt; "\n";</span></span><br><span class="line">        qy[i] = make_tuple(x,y,z);</span><br><span class="line">        kp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"fuck"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Seg::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"yy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ll Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (LL i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = Q[i].size();</span><br><span class="line">        <span class="keyword">if</span> (!sz) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> cnt[maxn];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "sjad" &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            LL now = (Q[i][j]);</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            Ans += cnt[z];</span><br><span class="line">            cnt[z]++;</span><br><span class="line">            Ans += qry(x, z) + qry(y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            <span class="function">LL <span class="title">now</span><span class="params">(Q[i][j])</span></span>;</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            change(z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cerr &lt;&lt; "now " &lt;&lt; endl;</span></span><br><span class="line">    Seg::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    decr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "fuckk" &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (LL i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = Q[i][j];</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            <span class="keyword">int</span> ttt = (qry(x, z) + qry(y, z));</span><br><span class="line">            decr += ttt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            LL now = Q[i][j];</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            <span class="keyword">if</span> (x != z) &#123;</span><br><span class="line">                LL len = dep[x] - dep[z];</span><br><span class="line">                len --;</span><br><span class="line">                x = upp(x, len);</span><br><span class="line">                change(x);</span><br><span class="line">                anss.eb(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (y != z) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = dep[y] - dep[z];</span><br><span class="line">                len--;</span><br><span class="line">                y = upp(y, len);</span><br><span class="line">                change(y);</span><br><span class="line">            &#125;</span><br><span class="line">            SS[z].eb(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs3(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> fk =  Ans - decr;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;fk  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// while (m--) &#123;</span></span><br><span class="line">    <span class="comment">//     int x, y;</span></span><br><span class="line">    <span class="comment">//     scanf("%d%d", &amp;x, &amp;y);</span></span><br><span class="line">    <span class="comment">//     printf("%d\n", dis[x] + dis[y] - 2 * dis[LCA(x, y)]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了Codeforces Round &amp;#35;703 (Div. 2)题解&lt;/center&gt;</summary>
    
    
    
    <category term="CodeForces" scheme="http://yoursite.com/categories/CodeForces/"/>
    
    
    <category term="cf" scheme="http://yoursite.com/tags/cf/"/>
    
  </entry>
  
  <entry>
    <title>初探dp优化</title>
    <link href="http://yoursite.com/2021/02/03/DynamicProgrammingOptimization/"/>
    <id>http://yoursite.com/2021/02/03/DynamicProgrammingOptimization/</id>
    <published>2021-02-02T16:05:20.000Z</published>
    <updated>2021-03-29T06:57:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>起因是在 <code>Huawei</code>的 <code>online camp</code> 上遇到一道题，虽然现在也不知道怎么解决的。当时想法就是是不是四边形不等式或者斜率优化之类的。好像一直以来都知道自己在这方面只是了解，没有很深入♂掌握，趁这次补一下吧qwq。</p><p>说到 <code>Dynamic Programming</code> 我就很喜欢大一时候的一句话：<code>But life ,can&#39;t satisfy with all factors of Dynamic Programming</code></p><p><code>dp</code> 也有很多形式的优化，比如是否具有决策单调性，斜率优化，数据结构优化，带权二分，单调栈单调队列优化等等。</p><h3 id="前缀和优化"><a href="#前缀和优化" class="headerlink" title="前缀和优化"></a>前缀和优化</h3><h4 id="P2513-HAOI2009-逆序对数列"><a href="#P2513-HAOI2009-逆序对数列" class="headerlink" title="P2513 [HAOI2009]逆序对数列"></a>P2513 [HAOI2009]逆序对数列</h4><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>求长度为 $n$ 的有 $k$ 对逆序对的排列数量 $n,k\le 1000$</p><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>考虑 $dp[i][j]$ 表示 $i$ 的全排列中，逆序数为 $j$ 的数量。</p><p>那么有 <script type="math/tex">dp[i][j] = \sum_{k=max(0,j-i+1)}^{j}dp[i-1][k]</script></p><p>因为状态转移连续，可以记录前缀和优化。记录$sum=\sum_{k=max(0,j-i+1)}^{j}dp[i][k]$,转移时候注意减去前缀就行。</p><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n , k, sum;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1100</span>][<span class="number">1100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// dp[i][j] 表示i的全排列中逆序数为j的个数</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            add(sum, dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            dp[i][j] = sum;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= i<span class="number">-1</span>)&#123;</span><br><span class="line">                dec(sum,dp[i<span class="number">-1</span>][j-i+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][k] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此题加强版 <a href="https://loj.ac/s/1057415" target="_blank" rel="noopener">loj6077</a></p></div></div><h4 id="洛谷P2511-HAOI2008-木棍分割"><a href="#洛谷P2511-HAOI2008-木棍分割" class="headerlink" title="洛谷P2511 [HAOI2008]木棍分割"></a>洛谷P2511 [HAOI2008]木棍分割</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n , m , a[maxn], sum[maxn], mx, dp[maxn], S[maxn],ans,rem[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(len+a[i]&gt;x)tot++,len=a[i];</span><br><span class="line"><span class="keyword">else</span> len+=a[i];</span><br><span class="line">&#125;<span class="keyword">return</span> tot&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(;k&lt;i;k++) <span class="keyword">if</span>(sum[i]-sum[k]&lt;=x)&#123;rem[i]=k;<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> res=(sum[n]&lt;=x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i]&lt;=x)dp[i]=<span class="number">1</span>;</span><br><span class="line">S[i]=(S[i<span class="number">-1</span>]+dp[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">dp[j]=S[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(rem[j]<span class="number">-1</span>&gt;=<span class="number">0</span>)dec(dp[j],S[rem[j]<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) S[j]=(S[j<span class="number">-1</span>]+dp[j])%mod;</span><br><span class="line">add(res,dp[n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">close;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;a[i],sum[i]=sum[i<span class="number">-1</span>]+a[i],umax(mx,a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L=mx, R=sum[n],mid;</span><br><span class="line"><span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(chk(mid))ans=mid, R=mid;</span><br><span class="line"><span class="keyword">else</span> L = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span> &lt;&lt; DP(ans) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h3><h3 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h3><h3 id="DP凸优化-WPS二分-带权二分"><a href="#DP凸优化-WPS二分-带权二分" class="headerlink" title="DP凸优化/WPS二分/带权二分"></a>DP凸优化/WPS二分/带权二分</h3>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了DP优化的常见例子&lt;/center&gt;</summary>
    
    
    
    <category term="Dynamic Programming" scheme="http://yoursite.com/categories/Dynamic-Programming/"/>
    
    
    <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Some Tricks</title>
    <link href="http://yoursite.com/2021/02/02/Trick/"/>
    <id>http://yoursite.com/2021/02/02/Trick/</id>
    <published>2021-02-01T16:05:20.000Z</published>
    <updated>2021-02-02T04:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CF342-E-Xenia-and-Tree"><a href="#CF342-E-Xenia-and-Tree" class="headerlink" title="CF342 E. Xenia and Tree"></a>CF342 E. Xenia and Tree</h2><p><a href="https://codeforces.com/problemset/problem/342/E" target="_blank" rel="noopener">this way</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给一棵树，一开始只有1为红，其他点为蓝。两种操作：</p><ol><li>把一个点染成红点。</li><li>询问一个点到最近红点的距离。</li></ol><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>数据范围$n\le 10^5,m\le 10^5$，我们不能每一次染色后都去跑一次最短路，所以我们当<code>修改数目达到根号n</code>时去进行一次最短路，查询是如果有点是未更新状态，我们可以通过 $lca$ 来求得两点的距离，这样就可以保证复杂度是$n\sqrt{n} \ log$。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>常数略微有点大QWQ<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLOGN 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> pa[MAXLOGN][MAXN];</span><br><span class="line"><span class="keyword">int</span> depth[MAXN], dist[MAXN];<span class="comment">//dist:到红点最近的距离 </span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    pa[<span class="number">0</span>][v] = p;</span><br><span class="line">    depth[v] = d;</span><br><span class="line">    dist[v] = depth[v]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[v].size(); i++)</span><br><span class="line">        <span class="keyword">if</span> (G[v][i] != p) dfs(G[v][i], v, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> V)</span> </span>&#123;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "V == " &lt;&lt; V &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k + <span class="number">1</span> &lt; MAXLOGN; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pa[k][v] &lt; <span class="number">0</span>)</span><br><span class="line">                pa[k + <span class="number">1</span>][v] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pa[k + <span class="number">1</span>][v] = pa[k][pa[k][v]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAXLOGN; k++)</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; k) &amp; <span class="number">1</span>) v = pa[k][v];</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth[u] &gt; depth[v]) swap(u, v);</span><br><span class="line">    v = get(v, depth[v] - depth[u]);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = MAXLOGN - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pa[k][u] != pa[k][v]) &#123;</span><br><span class="line">            u = pa[k][u];</span><br><span class="line">            v = pa[k][v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pa[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> depth[u] + depth[v] - <span class="number">2</span> * depth[lca(u, v)]; &#125;</span><br><span class="line"><span class="keyword">int</span> q[MAXN],cnt=<span class="number">0</span>, vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, u , v;i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;u &gt;&gt; v;</span><br><span class="line">        G[u].eb(v),G[v].eb(u);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="comment">// dfs(1,0,0);</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">auto</span> solve = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> u = que.front();</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "now === " &lt;&lt; u &lt;&lt; endl;</span></span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[v]&gt;dist[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                    dist[v]=dist[u]+<span class="number">1</span>;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> update=[&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "x === " &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(vis[x])<span class="keyword">return</span>;</span><br><span class="line">        vis[x]=<span class="number">1</span>, dist[x]=<span class="number">0</span>, q[++cnt]=x,que.push(x);</span><br><span class="line">        <span class="keyword">if</span>(cnt==base)&#123;</span><br><span class="line">            solve();</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> query=[&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = dist[x];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "ansss == " &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</span><br><span class="line">            ans=min(ans,dis(q[i],x));</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "ans == " &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> op, x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            update(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id><a href="#" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了做题过程中一些trick&lt;/center&gt;</summary>
    
    
    
    <category term="Miscellaneous" scheme="http://yoursite.com/categories/Miscellaneous/"/>
    
    
    <category term="cf" scheme="http://yoursite.com/tags/cf/"/>
    
    <category term="Atc" scheme="http://yoursite.com/tags/Atc/"/>
    
    <category term="Miscellaneous" scheme="http://yoursite.com/tags/Miscellaneous/"/>
    
  </entry>
  
  <entry>
    <title>今日校园自动签到</title>
    <link href="http://yoursite.com/2021/01/17/campushoy-auto-clock-in/"/>
    <id>http://yoursite.com/2021/01/17/campushoy-auto-clock-in/</id>
    <published>2021-01-17T09:08:05.000Z</published>
    <updated>2022-03-02T05:46:05.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今日校园自动签到"><a href="#今日校园自动签到" class="headerlink" title="今日校园自动签到"></a>今日校园自动签到</h1><p>参考了<a href="https://github.com/ZimoLoveShuang/auto-submit" target="_blank" rel="noopener">大佬</a></p><p>适配了长春理工大学计算机科学技术学院18级同学的签到。<a href="https://github.com/miniLCT/campushoy-auto-clock-in" target="_blank" rel="noopener">传送门</a></p><p>有任何问题可以联系我： minilct@qq.com</p><h1 id="食用姿势"><a href="#食用姿势" class="headerlink" title="食用姿势"></a>食用姿势</h1><h2 id="clone-或者-下载-此仓库到本地"><a href="#clone-或者-下载-此仓库到本地" class="headerlink" title="clone 或者 下载 此仓库到本地"></a>clone 或者 下载 此仓库到本地</h2><blockquote><p>git clone <a href="https://github.com/miniLCT/campushoy-auto-clock-in.git" target="_blank" rel="noopener">https://github.com/miniLCT/campushoy-auto-clock-in.git</a></p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>编辑cofig.yml,编辑以下内容</p><blockquote><p>1.#username 学号或者工号<br>填写今日校园学号</p><p>2.#password 密码<br>填写今日校园的密码</p><p>3.#address 地址，定位信息<br>address:  以前你签到时候的地址信息，比如 中国四川省成都市金牛区一环路北xx段-xx号-附xx号</p><p>4.#school 学校全称<br>school: 长春理工大学</p><p>5.#KEY Qmsg的KEY<br>key:  #提醒用，可以没有 </p><p>6.#lon 当前位置经度，可以访问<a href="http://zuobiao.ay800.com/s/27/index.php获取" target="_blank" rel="noopener">http://zuobiao.ay800.com/s/27/index.php获取</a><br>lon: #写经度</p><p>7.#lat 纬度<br>lat:  #写维度</p><p>8.实际上 填好表达必填项便可适配其他没被禁止的高校了？<br>defaults:</p><pre><code>#表单默认选项配置，按顺序，注意，只有标必填项的才处理- default:    #表单项类型，对应今日校园接口返回的fieldType字段，1代表文本，2代表单选，3代表多选，4代表图片    type: 2    #表单项标题    title:     #表单项默认值    value: 否</code></pre></blockquote><h2 id="上传到腾讯云云函数"><a href="#上传到腾讯云云函数" class="headerlink" title="上传到腾讯云云函数"></a>上传到腾讯云云函数</h2><ul><li><p>进入<a href="https://console.cloud.tencent.com/scf/index?rid=1" target="_blank" rel="noopener">腾讯云函数</a>，注册认证后，进入控制台，点击左边的层，然后点新建，名称随意，然后点击上传zip，选择仓库种的<code>dependency.zip</code>上传，然后选择运行环境<code>python3.6</code>，然后点击确定，等待依赖包上传。<br><img src="/fujian/campushoy/ed6044e6.png" alt="新建腾讯云函数依赖"></p></li><li><p>点左边的函数服务，新建云函数，名称随意，运行环境选择<code>python3.6</code>，创建方式选择空白函数，然后点击下一步<br><img src="/fujian/campushoy/a971478e.png" alt="新建腾讯云函数"></p></li></ul><ul><li><p>提交方法选择在线编辑，把本地修改好的<code>index.py</code>直接全文复制粘贴到云函数的<code>index.py</code>，然后点击文件-&gt;新建，文件名命名为<code>config.yml</code>，然后把本地配置好的<code>config.yml</code>文件中的内容直接全文复制粘贴到云函数的<code>config.yml</code>文件，点击下面的高级设置，设置超时时间为<code>60秒</code>，添加层为刚刚新建的函数依赖层，然后点击完成。（如果新版很慢打不开用旧版编辑上传也行）<br><img src="/fujian/campushoy/1aa80c41.png" alt="配置腾讯云函数"></p></li><li><p>进入新建好的云函数，左边点击触发管理，点击创建触发器，名称随意，触发周期选择自定义，然后配置cron表达式，由于我校是0点4分开启签到，所以编写如下cron表达式表示每天0点10分开始签到。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 10 0 * * * *</span><br></pre></td></tr></table></figure></li><li><p>然后就可以测试云函数了，绿色代表云函数执行成功，红色代表云函数执行失败（失败的原因大部分是由于依赖造成的）。返回结果是<code>success.</code>，代表自动提交成功，如遇到问题，仔细查看日志。</p></li><li><p>也可配合Windows计划任务或者使用linux定时任务，将脚本挂在自己的云服务器上。</p></li><li><p><strong>如此就不用担心忘记签到而被艾特了，就可以放心的删除今日校园这么屑的软件啦</strong></p></li></ul><h1 id="卸载今日校园"><a href="#卸载今日校园" class="headerlink" title="卸载今日校园"></a>卸载今日校园</h1><p><img src="/fujian/campushoy/aa.jpg" alt="卸载！"></p><h1 id="todolist：-Qmsg的提醒"><a href="#todolist：-Qmsg的提醒" class="headerlink" title="todolist： Qmsg的提醒"></a>todolist： Qmsg的提醒</h1><p>今天设置了，不知道明天能不能收到Qmsg提醒。<br>只要在  <code>#KEY Qmsg的KEY</code> 一栏填上<a href="https://qmsg.zendee.cn/" target="_blank" rel="noopener">Qmsg酱</a> 的key就行了.</p><p>Qmsg的api:<a href="https://qmsg.zendee.cn/api.html" target="_blank" rel="noopener">https://qmsg.zendee.cn/api.html</a><br><img src="/fujian/campushoy/ab.png" alt="通知图"></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了今日校园的自动签到脚本&lt;/center&gt;</summary>
    
    
    
    <category term="Script" scheme="http://yoursite.com/categories/Script/"/>
    
    
    <category term="Script" scheme="http://yoursite.com/tags/Script/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1473 E. Minimum Path</title>
    <link href="http://yoursite.com/2021/01/15/CF-1473E-Minimum%20Path/"/>
    <id>http://yoursite.com/2021/01/15/CF-1473E-Minimum%20Path/</id>
    <published>2021-01-15T10:20:15.000Z</published>
    <updated>2021-01-16T05:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1473/problem/E" target="_blank" rel="noopener"> Educational Codeforces Round 102 (Rated for Div. 2) E. Minimum Path</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给一个带权无向图，求从1点出发到每个点的最小$\sum<em>{i=1}^{k}w</em>{e<em>i}-max</em>{i=1}^{k}w<em>{e_i}+min</em>{i=1}^{k}w_{e_i}$，$e_i$是 $1$ 到 $x$ 上的路径。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>观察到$\sum<em>{i=1}^{k}w</em>{e_i}$是求最短路。加上后面两项相当于变形为分层图：多的两项相当于对边进行了两次操作。</p><p>将这个问题转化为:跑最短路，你可以且必须进行如下两种操作:<br>1.选择路径上的一条边，减去它的边权<br>2.选择路径上的一条边，再加一次它的边权。</p><p>那么$dis[i][0/1][0/1]$代表从 $1$ 到 $i$ 点，是否已经使用了操作$1$，是否已经使用了操作$2$的最小值。那么答案就是 $dis[i][1][1]$.</p><p>正确性：很显然，对于任意一条路径，我们肯定是减去最大边权，加上最小边权。但问题是我们在跑最短路的过程中不知道哪条边会是最终的最小边权/最大边权(有后效性)。对状态升维表达出所有状态来消除后效性。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pii&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn][<span class="number">2</span>][<span class="number">2</span>], vis[maxn][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u , dis , a1 , a2;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">int</span> <span class="keyword">operator</span> &lt; (node <span class="keyword">const</span> &amp;a , node <span class="keyword">const</span>&amp; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &gt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dis[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(&#123;<span class="number">1</span>, <span class="number">0</span> ,<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">not</span> q.empty())&#123;</span><br><span class="line">        node fr = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = fr.u, a1 = fr.a1, a2 = fr.a2;</span><br><span class="line">        <span class="keyword">if</span>(vis[u][a1][a2]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u][a1][a2] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : e[u])&#123;</span><br><span class="line">            <span class="keyword">int</span> v = x.fi, w = x.se;</span><br><span class="line">            <span class="keyword">if</span>(dis[v][a1][a2] &gt; dis[u][a1][a2] + w)&#123;</span><br><span class="line">                dis[v][a1][a2] = dis[u][a1][a2] + w;</span><br><span class="line">                q.push(&#123;v, dis[v][a1][a2], a1 , a2&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[v][<span class="number">1</span>][a2] &gt; dis[u][<span class="number">0</span>][a2])&#123;</span><br><span class="line">                    dis[v][<span class="number">1</span>][a2] = dis[u][<span class="number">0</span>][a2];</span><br><span class="line">                    q.push(&#123;v, dis[v][<span class="number">1</span>][a2], <span class="number">1</span> , a2&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[v][a1][<span class="number">1</span>] &gt; dis[u][a1][<span class="number">0</span>] +  w + w )&#123;</span><br><span class="line">                    dis[v][a1][<span class="number">1</span>] = dis[u][a1][<span class="number">0</span>] +  w + w;</span><br><span class="line">                    q.push(&#123;v,dis[v][a1][<span class="number">1</span>],a1,<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(dis , INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">while</span>(m -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> u ,v , w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="keyword">if</span>(u &gt; v)swap(u , v);</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">1</span>) dis[v][<span class="number">1</span>][<span class="number">1</span>] = w;</span><br><span class="line">        e[u].eb(v , w);</span><br><span class="line">        e[v].eb(u , w);</span><br><span class="line">    &#125;</span><br><span class="line">    dijstra();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dis[i][<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了CF1473E. Minimum Path题解&lt;/center&gt;</summary>
    
    
    
    <category term="CodeForces" scheme="http://yoursite.com/categories/CodeForces/"/>
    
    
    <category term="cf" scheme="http://yoursite.com/tags/cf/"/>
    
    <category term="shortest paths and similar" scheme="http://yoursite.com/tags/shortest-paths-and-similar/"/>
    
  </entry>
  
  <entry>
    <title>Games</title>
    <link href="http://yoursite.com/2021/01/07/Games/"/>
    <id>http://yoursite.com/2021/01/07/Games/</id>
    <published>2021-01-06T16:05:20.000Z</published>
    <updated>2021-01-07T14:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CF-260-B-A-Lot-of-Games"><a href="#CF-260-B-A-Lot-of-Games" class="headerlink" title="CF#260 B. A Lot of Games"></a>CF#260 B. A Lot of Games</h2><p><a href="https://codeforces.com/problemset/problem/455/B" target="_blank" rel="noopener">传送门</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p> 有两个人在玩游戏，一共玩 $k(1\le k \le 10^9)$轮，每一轮的一开始有一个空串，双方每一回合需要在空串后面加一个字符，但必须要满足加完这个字符之后的字符串是给定大小为 $n(1\le n\le 10^5)$ 的母串集合中任意一个串的前缀，不能操作者输，规定第一轮的先手为第一个人，接下来每一轮的先手为上一轮的输家，规定最终的赢家是第 $k$ 轮的赢家，在双方都采取最优策略的情况下，求最终的赢家是第一轮的先手还是后手.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>先单独考虑每一轮的游戏，发现本质上就是对母串建 Trie 树并在 Trie 树上每次向下移动，不能移动的输</p><p>所以可以先 dp 出对于 Trie 树上每一个节点，能获得的最终状态是怎样的.</p><p>观察发现，如果一个位置往下走既可以到必胜态又可以必败态，那么就可以通过这个位置控制下一局的先后手</p><p>进一步发现，如果某一方既可以必胜又可以必败，那么其必然能获得最终的胜利.</p><p>考虑如果子游戏中不存在这样的状态，那么如果先手必败则后手赢，如果先手必胜则胜负由 k 的奇偶性决定.</p><p>所以只需要 dp 记录维护 4 种值，分别表示 (能必胜，能必败，既能必胜又能必败，什么都不能)，枚举后继的状态转移</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> ch[maxn][<span class="number">30</span>], f[maxn], k , n, tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[p][c]) ch[p][c] = ++tot;</span><br><span class="line">        p = ch[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> win = <span class="number">1</span>, lose = <span class="number">2</span>, allcan = <span class="number">3</span>, neither = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "fuck " &lt;&lt; endl;</span></span><br><span class="line">    function&lt;<span class="keyword">void</span> (<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u)&#123;</span><br><span class="line">        f[u] = lose;</span><br><span class="line">        <span class="keyword">int</span> Win = <span class="number">0</span>, Lose = <span class="number">0</span>, All = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">26</span>; c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[u][c])&#123;</span><br><span class="line">                <span class="keyword">int</span> v = ch[u][c] ;</span><br><span class="line">                dfs(v);</span><br><span class="line">                All++;</span><br><span class="line">                <span class="keyword">if</span>(f[v] == lose) Win = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(f[v] == win) Lose = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(f[v] == neither) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f[u] = allcan, <span class="keyword">void</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Win &amp;&amp; Lose) &#123;</span><br><span class="line">            <span class="keyword">return</span> f[u] = allcan, <span class="keyword">void</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!Win &amp;&amp; !Lose &amp;&amp; All) &#123;</span><br><span class="line">            <span class="keyword">return</span> f[u] = neither, <span class="keyword">void</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Win)f[u] = win;</span><br><span class="line">        <span class="keyword">if</span>(Lose) f[u] = lose;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>] == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"First"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>] == <span class="number">2</span> || f[<span class="number">1</span>] == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Second"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ((k &amp; <span class="number">1</span>)?<span class="string">"First"</span>:<span class="string">"Second"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了一些游戏类题目的思考过程&lt;/center&gt;</summary>
    
    
    
    <category term="Miscellaneous" scheme="http://yoursite.com/categories/Miscellaneous/"/>
    
    
    <category term="博弈" scheme="http://yoursite.com/tags/博弈/"/>
    
  </entry>
  
  <entry>
    <title>Atcoder 乱做笔记 </title>
    <link href="http://yoursite.com/2021/01/01/atcoder/"/>
    <id>http://yoursite.com/2021/01/01/atcoder/</id>
    <published>2020-12-31T16:05:20.000Z</published>
    <updated>2021-01-31T08:36:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="abc190E-Magical-Ornament"><a href="#abc190E-Magical-Ornament" class="headerlink" title="abc190E - Magical Ornament"></a>abc190E - Magical Ornament</h2><p><a href="https://atcoder.jp/contests/abc190/tasks/abc190_e" target="_blank" rel="noopener">this way</a></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有 $n(n\le 10^5)$ 对数字可以两两相邻，问你能不能排列出一个包含一串数 $c\ \ \ |c|\le 17$ 的序列，且序列长度最小。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li><p>建图：相邻点对连边，把题意转化成在该图上跑出一个最短路径包含序列中的所有点（点可重复）。</p></li><li><p>走的点的先后顺序未知，所以我们只能通过bfs得到单次从s开始到各点的最短路径，下一步要考虑顺序问题。</p></li><li><p>$dp[i][j]$ 表示走完 $i$ 中二进制为 1 的点，最后一步是标号为 j 的点的最优解。如 $dp[7][2]$ ，7即二进制下111，代表在这我走完这3个点时，最后一步是第二个点。 也就是前一步是101， 最后一步完成后转移到111。 这样，我们的状态转移方程就是：$dp[nextState][last] = min(dp[nextState][last], dp[i][j] + dis[j][last])$<br>表示下一个状态集合以last为结尾的最优解，由当前状态加上j到last两点间距转移过来。</p></li><li><p>最后遍历一遍到达末状态11111…11（k个1）时最后一步的各个情况来取最小值即可。</p></li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n , m , k , x, y , vis[maxn], d[maxn], a[maxn], dp[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="comment">// dp[i][j]表示路径上有i表示的集合的数时，最后一步是j时的最优解</span></span><br><span class="line">vi g[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp , <span class="number">0x3f</span> ,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        g[x].eb(y), g[y].eb(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = linf;</span><br><span class="line">    function&lt;<span class="keyword">void</span> (<span class="keyword">int</span>)&gt; bfs = [&amp;](<span class="keyword">int</span> s)&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">        q.push(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, dist] = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            d[x] = dist;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> y : g[x])&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line">                    vis[y] = <span class="number">1</span>;</span><br><span class="line">                    q.push(&#123;y , dist+<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            vis[j] = <span class="number">0</span>, d[j] = linf;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            dis[i][j] = d[a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        dp[<span class="number">1</span>&lt;&lt;i][i+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> limit = (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; limit; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j] == linf) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> last = <span class="number">1</span>; last &lt;= k; last++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(last == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(((i &gt;&gt; (last<span class="number">-1</span>))&amp;<span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> nxtstate = i + (<span class="number">1</span>&lt;&lt;(last<span class="number">-1</span>));</span><br><span class="line">                    umin(dp[nxtstate][last], dp[i][j]+dis[j][last]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k; i++) umin(ans, dp[limit<span class="number">-1</span>][i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ans == linf ? <span class="number">-1</span> : ans) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了atc题目乱做&lt;/center&gt;</summary>
    
    
    
    <category term="Atcoder" scheme="http://yoursite.com/categories/Atcoder/"/>
    
    
    <category term="Atc" scheme="http://yoursite.com/tags/Atc/"/>
    
  </entry>
  
  <entry>
    <title>2020 CUSTACM Freshman Contest - Onsite - Editorial </title>
    <link href="http://yoursite.com/2020/11/30/2020%20CUSTACM%20Freshman%20Contest%20-%20Onsite%20-%20Editorial/"/>
    <id>http://yoursite.com/2020/11/30/2020%20CUSTACM%20Freshman%20Contest%20-%20Onsite%20-%20Editorial/</id>
    <published>2020-11-30T00:05:20.000Z</published>
    <updated>2021-01-31T07:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-PaperCube-and-Dimensionality-Reduction"><a href="#A-PaperCube-and-Dimensionality-Reduction" class="headerlink" title="A:PaperCube and Dimensionality Reduction"></a>A:PaperCube and Dimensionality Reduction</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $n^2$ 的<strong>末位</strong>数字。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76116<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll x;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x * x % <span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="B：PaperSquare’s-law"><a href="#B：PaperSquare’s-law" class="headerlink" title="B：PaperSquare’s law"></a>B：PaperSquare’s law</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $n^2$ 的<strong>首位</strong>数字。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76006<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a))&#123;</span><br><span class="line"></span><br><span class="line">b=a*a;</span><br><span class="line"><span class="keyword">while</span>(b&gt;=<span class="number">10</span>)b/=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="C：Powerful-PaperCube"><a href="#C：Powerful-PaperCube" class="headerlink" title="C：Powerful PaperCube"></a>C：Powerful PaperCube</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $2^n$ 的<strong>末位</strong>数字。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76116<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll x;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x)&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"2486"</span>[(x - <span class="number">1</span>) % <span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="D：PowerCube’s-law"><a href="#D：PowerCube’s-law" class="headerlink" title="D：PowerCube’s law"></a>D：PowerCube’s law</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $2^n$ 的<strong>首位</strong>数字。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>$ans = (2^n)/(10^{x-1}) , x= log_{10}(x)+1$ </p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76015<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> biao[]=&#123;<span class="number">0</span>,<span class="built_in">log</span>(<span class="number">1</span>),<span class="built_in">log</span>(<span class="number">2</span>),<span class="built_in">log</span>(<span class="number">3</span>),<span class="built_in">log</span>(<span class="number">4</span>),<span class="built_in">log</span>(<span class="number">5</span>),<span class="built_in">log</span>(<span class="number">6</span>),<span class="built_in">log</span>(<span class="number">7</span>),<span class="built_in">log</span>(<span class="number">8</span>),<span class="built_in">log</span>(<span class="number">9</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> lg=<span class="built_in">log</span>(<span class="number">10</span>),l2=<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">double</span> n2=l2*n;</span><br><span class="line">        <span class="keyword">double</span> ans=lg*<span class="built_in">floor</span>(n2/lg);</span><br><span class="line"><span class="comment">//        while(ans+lg&lt;n2)ans+=lg;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(upper_bound(biao,biao+<span class="number">10</span>,n2-ans)-biao<span class="number">-1</span>)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="E：PaperCube-Tree"><a href="#E：PaperCube-Tree" class="headerlink" title="E：PaperCube Tree"></a>E：PaperCube Tree</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>给定长度为 $n$ 序列 $a$, $q$ 次询问区间 $a<em>i,a</em>{i+1} \cdots a_{j-1},a_j$ 中第 $k$ 大的数。 </p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76001<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="comment">//#include "utils/haha.h"</span></span><br><span class="line"><span class="comment">//#include "utils/max_flow.h"</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; PSS;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; PSI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, PII&gt; PIP;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; PIL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; PLL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, PII&gt; PLP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read_by_char</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  T s = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri() read_by_char<span class="meta-string">&lt;int&gt;()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rl() read_by_char<span class="meta-string">&lt;ll&gt;()</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLS(x, v) (memset((x), (v), sizeof((x))))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>) &#123;</span> <span class="built_in">cerr</span> &lt;&lt; sdbg &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>, <span class="title">class</span>... <span class="title">TA</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>, <span class="title">TA</span>... <span class="title">a</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (*sdbg != <span class="string">','</span>)<span class="built_in">cerr</span> &lt;&lt; *sdbg++;</span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="string">','</span>;</span><br><span class="line">  _dbg(sdbg + <span class="number">1</span>, a...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ostream</span> &amp;<span class="title">operator</span>&lt;&lt;(ostream &amp;os, vector&lt;T&gt; V) &#123;</span></span><br><span class="line"><span class="class">  os &lt;&lt; "[";</span></span><br><span class="line"><span class="class">  for (auto vv : V) os &lt;&lt; vv &lt;&lt; ",";</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "]";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template&lt;class L, class R&gt;</span></span><br><span class="line"><span class="class">ostream &amp;operator&lt;&lt;(ostream &amp;os, pair&lt;L, R&gt; P) &#123;</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "(" &lt;&lt; P.first &lt;&lt; "," &lt;&lt; P.second &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)</span></span><br><span class="line"><span class="class">#else</span></span><br><span class="line"><span class="class">#define debug(...) (__VA_ARGS__)</span></span><br><span class="line"><span class="class">#define cerr if(0)cout</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using min_heap = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using max_heap = priority_queue&lt;T&gt;;</span></span><br><span class="line"><span class="class">//const int N = 1e6 + 1e5 + 10;</span></span><br><span class="line"><span class="class">ll gcd(ll a, ll b) &#123; return b ? gcd(b, a % b) : a; &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">struct PairHash &#123;</span></span><br><span class="line"><span class="class">  template&lt;typename T1, typename T2&gt;</span></span><br><span class="line"><span class="class">  std::size_t operator()(const pair&lt;T1, T2&gt; &amp;p) const &#123;</span></span><br><span class="line"><span class="class">    return hash&lt;T1&gt;()(p.first) ^ hash&lt;T2&gt;()(p.second);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;unsigned MOD_&gt;</span></span><br><span class="line"><span class="class">struct ModInt &#123;</span></span><br><span class="line"><span class="class">  static constexpr unsigned MOD = MOD_;</span></span><br><span class="line"><span class="class">  unsigned x;</span></span><br><span class="line"><span class="class">  void undef() &#123; x = (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  bool isnan() const &#123; return x == (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  inline int geti() const &#123; return (int) x; &#125;</span></span><br><span class="line"><span class="class">  ModInt() &#123; x = 0; &#125;</span></span><br><span class="line"><span class="class">  ModInt(const ModInt &amp;y) &#123; x = y.x; &#125;</span></span><br><span class="line"><span class="class">  ModInt(int y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || (int) MOD &lt;= y) y %= (int) MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt(long long y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || MOD &lt;= y) y %= MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned long long y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator+=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x += y.x) &gt;= MOD) x -= MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator-=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x -= y.x) &amp; (1u &lt;&lt; 31)) x += MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator*=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator/=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.inv().x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt operator-() const &#123; return (x ? MOD - x : 0); &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  ModInt inv() const &#123; return pow(MOD - 2); &#125;</span></span><br><span class="line"><span class="class">  ModInt pow(long long y) const &#123;</span></span><br><span class="line"><span class="class">    ModInt b = *this, r = 1;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) &#123;</span></span><br><span class="line"><span class="class">      b = b.inv();</span></span><br><span class="line"><span class="class">      y = -y;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    for (; y; y &gt;&gt;= 1) &#123;</span></span><br><span class="line"><span class="class">      if (y &amp; 1) r *= b;</span></span><br><span class="line"><span class="class">      b *= b;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return r;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  friend ModInt operator+(ModInt x, const ModInt y) &#123; return x += y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator-(ModInt x, const ModInt y) &#123; return x -= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator*(ModInt x, const ModInt y) &#123; return x *= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator/(ModInt x, const ModInt y) &#123; return x *= y.inv(); &#125;</span></span><br><span class="line"><span class="class">  friend bool operator&lt;(const ModInt x, const ModInt y) &#123; return x.x &lt; y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator==(const ModInt x, const ModInt y) &#123; return x.x == y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator!=(const ModInt x, const ModInt y) &#123; return x.x != y.x; &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class">const int mod = (1e9) + 7;</span></span><br><span class="line"><span class="class">typedef ModInt&lt;mod&gt; mod_int;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">const int MAX_N = 100000;</span></span><br><span class="line"><span class="class">int N, M;</span></span><br><span class="line"><span class="class">int A[MAX_N];</span></span><br><span class="line"><span class="class">int S[MAX_N];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">const int MAX_NN = (1 &lt;&lt; 17);</span></span><br><span class="line"><span class="class">int NN;</span></span><br><span class="line"><span class="class">vector&lt;int&gt; seg[2 * MAX_NN - 1];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void build(int u, int l, int r) &#123;</span></span><br><span class="line"><span class="class">  if (l + 1 == r) &#123;</span></span><br><span class="line"><span class="class">    if (l &lt; N)</span></span><br><span class="line"><span class="class">      seg[u].push_back(A[l]);</span></span><br><span class="line"><span class="class">    return;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  int m = (l + r) / 2;</span></span><br><span class="line"><span class="class">  build(u * 2 + 1, l, m);</span></span><br><span class="line"><span class="class">  build(u * 2 + 2, m, r);</span></span><br><span class="line"><span class="class">  seg[u].resize(r - l);</span></span><br><span class="line"><span class="class">  merge(seg[u * 2 + 1].begin(), seg[u * 2 + 1].end(),</span></span><br><span class="line"><span class="class">        seg[u * 2 + 2].begin(), seg[u * 2 + 2].end(),</span></span><br><span class="line"><span class="class">        seg[u].begin());</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// return the number of items in [a, b) is less than val</span></span><br><span class="line"><span class="class">int query(int a, int b, int val, int u, int l, int r) &#123;</span></span><br><span class="line"><span class="class">  if (l &gt;= b || r &lt;= a) &#123;</span></span><br><span class="line"><span class="class">    return 0;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  if (a &lt;= l &amp;&amp; r &lt;= b) &#123;</span></span><br><span class="line"><span class="class">    return upper_bound(seg[u].begin(), seg[u].end(), val) -</span></span><br><span class="line"><span class="class">        seg[u].begin();</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  int m = (l + r) / 2;</span></span><br><span class="line"><span class="class">  int cnt1 = query(a, b, val, u * 2 + 1, l, m);</span></span><br><span class="line"><span class="class">  int cnt2 = query(a, b, val, u * 2 + 2, m, r);</span></span><br><span class="line"><span class="class">  return cnt1 + cnt2;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// find the k-th smallest number in [a, b)</span></span><br><span class="line"><span class="class">int solve(int a, int b, int k) &#123;</span></span><br><span class="line"><span class="class">  // binary search on index of S</span></span><br><span class="line"><span class="class">  // C(x) = is the number which is less than S[x] &gt;= k - 1</span></span><br><span class="line"><span class="class">  // 0 0 0 1 1 1, first 1</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  int lb = 0, ub = N - 1;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  if (query(a, b, S[lb], 0, 0, NN) &gt;= k)</span></span><br><span class="line"><span class="class">    return S[lb];</span></span><br><span class="line"><span class="class">  // if (query(a, b, S[ub], 0, 0, NN) &lt; k - 1)</span></span><br><span class="line"><span class="class">  // impossible;</span></span><br><span class="line"><span class="class">  while (ub - lb &gt; 1) &#123;</span></span><br><span class="line"><span class="class">    int mid = (lb + ub) / 2;</span></span><br><span class="line"><span class="class">    if (query(a, b, S[mid], 0, 0, NN) &gt;= k) ub = mid;</span></span><br><span class="line"><span class="class">    else lb = mid;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  return S[ub];</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve(int ncase) &#123;</span></span><br><span class="line"><span class="class">  scanf("%d %d", &amp;N, &amp;M);</span></span><br><span class="line"><span class="class">  for (int i = 0; i &lt; N; i++)</span></span><br><span class="line"><span class="class">    scanf("%d", &amp;A[i]);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  copy(A, A + N, S);</span></span><br><span class="line"><span class="class">  sort(S, S + N);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  NN = 1;</span></span><br><span class="line"><span class="class">  while (NN &lt; N)</span></span><br><span class="line"><span class="class">    NN &lt;&lt;= 1;</span></span><br><span class="line"><span class="class">  build(0, 0, NN);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  while (M--) &#123;</span></span><br><span class="line"><span class="class">    int a, b, k;</span></span><br><span class="line"><span class="class">    scanf("%d %d %d", &amp;a, &amp;b, &amp;k);</span></span><br><span class="line"><span class="class">    a--;</span></span><br><span class="line"><span class="class">    b--;</span></span><br><span class="line"><span class="class">    printf("%d\n", solve(a, b + 1, k));</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve_all_cases() &#123;</span></span><br><span class="line"><span class="class">  int T = 1;</span></span><br><span class="line"><span class="class">  //scanf("%d", &amp;T);</span></span><br><span class="line"><span class="class">  //cin &gt;&gt; T;</span></span><br><span class="line"><span class="class">  int ncase = 0;</span></span><br><span class="line"><span class="class">  //pre_calc();</span></span><br><span class="line"><span class="class">  while (T--) &#123;</span></span><br><span class="line"><span class="class">    solve(++ncase);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main() &#123;</span></span><br><span class="line"><span class="class">  ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="class">  cin.tie(0);</span></span><br><span class="line"><span class="class">  cout.tie(0);</span></span><br><span class="line"><span class="class">  cout &lt;&lt; std::fixed;</span></span><br><span class="line"><span class="class">  cout &lt;&lt; setprecision(2);</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  //ios_base::sync_with_stdio(true);</span></span><br><span class="line"><span class="class">  freopen("C:\\Users\\grain\\Desktop\\in.txt", "r", stdin);</span></span><br><span class="line"><span class="class">  //auto x = freopen("C:\\Users\\grain\\Desktop\\out.txt", "w", stdout);</span></span><br><span class="line"><span class="class">  //cerr &lt;&lt; x &lt;&lt; " " &lt;&lt; errno &lt;&lt; endl;</span></span><br><span class="line"><span class="class">  auto start_time = clock();</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">  solve_all_cases();</span></span><br><span class="line"><span class="class">  //test();</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  cout &lt;&lt; (clock() - start_time) * 1.0 / CLOCKS_PER_SEC &lt;&lt; " seconds" &lt;&lt; endl;</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/* stuff you should look for</span></span><br><span class="line"><span class="class">* int overflow, array bounds</span></span><br><span class="line"><span class="class">* special cases (n=1?)</span></span><br><span class="line"><span class="class">* do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="class">* WRITE STUFF DOWN</span></span><br><span class="line"><span class="class">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="F-Panicubeeeeeeeeeeeeee"><a href="#F-Panicubeeeeeeeeeeeeee" class="headerlink" title="F:Panicubeeeeeeeeeeeeee"></a>F:Panicubeeeeeeeeeeeeee</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>,判断 $n.0/m$ 是不是循环数位为 $1$ 的的循环小数(形如Panicubeeeeeeeeeeeeee(无数个e))。</p><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><p>First Blood byteam76093<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">a=<span class="number">0</span>;</span><br><span class="line">m/=__gcd(n,m);</span><br><span class="line"><span class="keyword">while</span>(m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m/=<span class="number">3</span>;</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">0</span>)m/=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m%<span class="number">5</span>==<span class="number">0</span>)m/=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m!=<span class="number">1</span>||!a||a&gt;<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="G-Piling-up-PaperCubes"><a href="#G-Piling-up-PaperCubes" class="headerlink" title="G:Piling up PaperCubes"></a>G:Piling up PaperCubes</h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>在 $n$ 行 $m$ 列的区域里放置纸盒，给出 $q$ 组操作，每次告诉你新纸盒的位置在 $i$ 行 $j$ 列，输出最后纸盒的情况。以左上角为$(0,0)$，下数为第几行，右数为第几列。</p><h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><p>First Blood byteam76001<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="comment">//#include "utils/haha.h"</span></span><br><span class="line"><span class="comment">//#include "utils/max_flow.h"</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; PSS;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; PSI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, PII&gt; PIP;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; PIL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; PLL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, PII&gt; PLP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read_by_char</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  T s = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri() read_by_char<span class="meta-string">&lt;int&gt;()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rl() read_by_char<span class="meta-string">&lt;ll&gt;()</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLS(x, v) (memset((x), (v), sizeof((x))))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>) &#123;</span> <span class="built_in">cerr</span> &lt;&lt; sdbg &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>, <span class="title">class</span>... <span class="title">TA</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>, <span class="title">TA</span>... <span class="title">a</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (*sdbg != <span class="string">','</span>)<span class="built_in">cerr</span> &lt;&lt; *sdbg++;</span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="string">','</span>;</span><br><span class="line">  _dbg(sdbg + <span class="number">1</span>, a...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ostream</span> &amp;<span class="title">operator</span>&lt;&lt;(ostream &amp;os, vector&lt;T&gt; V) &#123;</span></span><br><span class="line"><span class="class">  os &lt;&lt; "[";</span></span><br><span class="line"><span class="class">  for (auto vv : V) os &lt;&lt; vv &lt;&lt; ",";</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "]";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template&lt;class L, class R&gt;</span></span><br><span class="line"><span class="class">ostream &amp;operator&lt;&lt;(ostream &amp;os, pair&lt;L, R&gt; P) &#123;</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "(" &lt;&lt; P.first &lt;&lt; "," &lt;&lt; P.second &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)</span></span><br><span class="line"><span class="class">#else</span></span><br><span class="line"><span class="class">#define debug(...) (__VA_ARGS__)</span></span><br><span class="line"><span class="class">#define cerr if(0)cout</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using min_heap = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using max_heap = priority_queue&lt;T&gt;;</span></span><br><span class="line"><span class="class">//const int N = 1e6 + 1e5 + 10;</span></span><br><span class="line"><span class="class">ll gcd(ll a, ll b) &#123; return b ? gcd(b, a % b) : a; &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">struct PairHash &#123;</span></span><br><span class="line"><span class="class">  template&lt;typename T1, typename T2&gt;</span></span><br><span class="line"><span class="class">  std::size_t operator()(const pair&lt;T1, T2&gt; &amp;p) const &#123;</span></span><br><span class="line"><span class="class">    return hash&lt;T1&gt;()(p.first) ^ hash&lt;T2&gt;()(p.second);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;unsigned MOD_&gt;</span></span><br><span class="line"><span class="class">struct ModInt &#123;</span></span><br><span class="line"><span class="class">  static constexpr unsigned MOD = MOD_;</span></span><br><span class="line"><span class="class">  unsigned x;</span></span><br><span class="line"><span class="class">  void undef() &#123; x = (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  bool isnan() const &#123; return x == (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  inline int geti() const &#123; return (int) x; &#125;</span></span><br><span class="line"><span class="class">  ModInt() &#123; x = 0; &#125;</span></span><br><span class="line"><span class="class">  ModInt(const ModInt &amp;y) &#123; x = y.x; &#125;</span></span><br><span class="line"><span class="class">  ModInt(int y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || (int) MOD &lt;= y) y %= (int) MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt(long long y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || MOD &lt;= y) y %= MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned long long y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator+=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x += y.x) &gt;= MOD) x -= MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator-=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x -= y.x) &amp; (1u &lt;&lt; 31)) x += MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator*=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator/=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.inv().x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt operator-() const &#123; return (x ? MOD - x : 0); &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  ModInt inv() const &#123; return pow(MOD - 2); &#125;</span></span><br><span class="line"><span class="class">  ModInt pow(long long y) const &#123;</span></span><br><span class="line"><span class="class">    ModInt b = *this, r = 1;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) &#123;</span></span><br><span class="line"><span class="class">      b = b.inv();</span></span><br><span class="line"><span class="class">      y = -y;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    for (; y; y &gt;&gt;= 1) &#123;</span></span><br><span class="line"><span class="class">      if (y &amp; 1) r *= b;</span></span><br><span class="line"><span class="class">      b *= b;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return r;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  friend ModInt operator+(ModInt x, const ModInt y) &#123; return x += y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator-(ModInt x, const ModInt y) &#123; return x -= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator*(ModInt x, const ModInt y) &#123; return x *= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator/(ModInt x, const ModInt y) &#123; return x *= y.inv(); &#125;</span></span><br><span class="line"><span class="class">  friend bool operator&lt;(const ModInt x, const ModInt y) &#123; return x.x &lt; y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator==(const ModInt x, const ModInt y) &#123; return x.x == y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator!=(const ModInt x, const ModInt y) &#123; return x.x != y.x; &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class">const int mod = (1e9) + 7;</span></span><br><span class="line"><span class="class">typedef ModInt&lt;mod&gt; mod_int;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">vector&lt;string&gt; box =</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line"><span class="class">        "..+-------+",</span></span><br><span class="line"><span class="class">        "./  7 7  /|",</span></span><br><span class="line"><span class="class">        "+-------+ |",</span></span><br><span class="line"><span class="class">        "| paper | +",</span></span><br><span class="line"><span class="class">        "| cube  |/.",</span></span><br><span class="line"><span class="class">        "+-------+.."</span></span><br><span class="line"><span class="class">    &#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void write_box(vector&lt;string&gt; &amp;ret, string &amp;empty_row, int x, int y) &#123;</span></span><br><span class="line"><span class="class">  while (ret.size() &lt;= x + 5) ret.push_back(empty_row);</span></span><br><span class="line"><span class="class">  for (int i = 5; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="class">    for (int j = 0; j &lt; box[i].size(); j++) &#123;</span></span><br><span class="line"><span class="class">      if (box[i][j] == '.') continue;</span></span><br><span class="line"><span class="class">      ret[x + (5 - i)][y + j] = box[i][j];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      //debug(x + 5 - i, y + j, i, j);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve(int ncase) &#123;</span></span><br><span class="line"><span class="class">  int n, m, d;</span></span><br><span class="line"><span class="class">  cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;</span></span><br><span class="line"><span class="class">  vector&lt;vector&lt;int&gt;&gt; cnt(n, vector&lt;int&gt;(m));</span></span><br><span class="line"><span class="class">  for (int i = 0; i &lt; d; i++) &#123;</span></span><br><span class="line"><span class="class">    int x, y;</span></span><br><span class="line"><span class="class">    cin &gt;&gt; x &gt;&gt; y;</span></span><br><span class="line"><span class="class">    cnt[x - 1][y - 1]++;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  int col = 8 * m + 3 + 2 * n - 2;</span></span><br><span class="line"><span class="class">  int row = 2 * n + 1;</span></span><br><span class="line"><span class="class">  string empty_row = string(col, '.');</span></span><br><span class="line"><span class="class">  vector&lt;string&gt; ret(row, empty_row);</span></span><br><span class="line"><span class="class">  for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="class">    for (int j = 0; j &lt; m; j++) &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      int x = (n - 1 - i) * 2;</span></span><br><span class="line"><span class="class">      int y = j * 8 + (n - 1 - i) * 2;</span></span><br><span class="line"><span class="class">      for (int k = 0; k &lt; cnt[i][j]; k++) &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        debug(x, y, i, j);</span></span><br><span class="line"><span class="class">        write_box(ret, empty_row, x, y);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        x += 3;</span></span><br><span class="line"><span class="class">      &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  for (int i = ret.size() - 1; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="class">    cout &lt;&lt; ret[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve_all_cases() &#123;</span></span><br><span class="line"><span class="class">  int T = 1;</span></span><br><span class="line"><span class="class">  //scanf("%d", &amp;T);</span></span><br><span class="line"><span class="class">  //cin &gt;&gt; T;</span></span><br><span class="line"><span class="class">  int ncase = 0;</span></span><br><span class="line"><span class="class">  //pre_calc();</span></span><br><span class="line"><span class="class">  while (T--) &#123;</span></span><br><span class="line"><span class="class">    solve(++ncase);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main() &#123;</span></span><br><span class="line"><span class="class">  ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="class">  cin.tie(0);</span></span><br><span class="line"><span class="class">  cout.tie(0);</span></span><br><span class="line"><span class="class">  cout &lt;&lt; std::fixed;</span></span><br><span class="line"><span class="class">  cout &lt;&lt; setprecision(2);</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  //ios_base::sync_with_stdio(true);</span></span><br><span class="line"><span class="class">  freopen("C:\\Users\\grain\\Desktop\\in.txt", "r", stdin);</span></span><br><span class="line"><span class="class">  //auto x = freopen("C:\\Users\\grain\\Desktop\\out.txt", "w", stdout);</span></span><br><span class="line"><span class="class">  //cerr &lt;&lt; x &lt;&lt; " " &lt;&lt; errno &lt;&lt; endl;</span></span><br><span class="line"><span class="class">  auto start_time = clock();</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">  solve_all_cases();</span></span><br><span class="line"><span class="class">  //test();</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  cout &lt;&lt; (clock() - start_time) * 1.0 / CLOCKS_PER_SEC &lt;&lt; " seconds" &lt;&lt; endl;</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/* stuff you should look for</span></span><br><span class="line"><span class="class">* int overflow, array bounds</span></span><br><span class="line"><span class="class">* special cases (n=1?)</span></span><br><span class="line"><span class="class">* do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="class">* WRITE STUFF DOWN</span></span><br><span class="line"><span class="class">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="H-PaperCube-Stacks"><a href="#H-PaperCube-Stacks" class="headerlink" title="H.PaperCube Stacks"></a>H.PaperCube Stacks</h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><p>给出两个栈：第一个栈依次压入 $1,2,3,4,…,n$；第二个栈依次压入 $n+1,n+2,n+3,…,n+m$；<br>你可以将栈 $1$ 中的栈顶元素 $pop$ 出，放到栈 $2$ 的顶部；或者将栈 $2$ 中的栈顶元素 $pop$ 出。求将所有元素最后通过栈2 $pop$ 出后，有几种出栈方式。</p><h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76001<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mo 114514199</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100010</span>];</span><br><span class="line">ll n,m,ans,c[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="function">ll <span class="title">qp</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll re=<span class="number">1</span>,ch=a;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)re=re*ch%mo;</span><br><span class="line">ch=ch*ch%mo;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="comment">//scanf("%d",&amp;T);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">c[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i][<span class="number">0</span>]=c[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2000</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">c[i][j]=c[i<span class="number">-1</span>][j+<span class="number">1</span>]+c[i][j<span class="number">-1</span>];</span><br><span class="line">c[i][j]%=mo;</span><br><span class="line"><span class="comment">//printf("%lld ",c[i][j]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//puts("");</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if(n==0)ans=1;</span></span><br><span class="line"><span class="comment">//else ans=c[2*n][n+1]*qp(n,mo-2)%mo;</span></span><br><span class="line"><span class="comment">//ans=ans*(m+1)%mo;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,c[n][m]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4   14</span></span><br><span class="line"><span class="comment">1 2 3 4  4</span></span><br><span class="line"><span class="comment">1 2 4 3  3</span></span><br><span class="line"><span class="comment">1 3 2 4  3</span></span><br><span class="line"><span class="comment">1 3 4 2  </span></span><br><span class="line"><span class="comment">1 4 3 2</span></span><br><span class="line"><span class="comment">2 1 3 4</span></span><br><span class="line"><span class="comment">2 1 4 3</span></span><br><span class="line"><span class="comment">2 3 1 4</span></span><br><span class="line"><span class="comment">2 3 4 1</span></span><br><span class="line"><span class="comment">2 4 3 1</span></span><br><span class="line"><span class="comment">3 2 1 4</span></span><br><span class="line"><span class="comment">3 2 4 1</span></span><br><span class="line"><span class="comment">3 4 2 1</span></span><br><span class="line"><span class="comment">4 3 2 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="I-PaperCubes-were-there"><a href="#I-PaperCubes-were-there" class="headerlink" title="I:PaperCubes were there"></a>I:PaperCubes were there</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>给一个 $n$ 行 $m$ 列的区域，统计区域中有多少个$O$ 组成的立方体平面展开。这些立方体平面展开不考虑相连的情况。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p><img src="\fujian\pho\zhezhi.jpg" alt="11 cases"><br>an naive idea: 暴力枚举所有可能的情况，包括镜面，旋转。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//~ while (clock()&lt;=69*CLOCKS_PER_SEC)</span></span><br><span class="line"><span class="comment">//~ #pragma comment(linker, "/stack:200000000")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-Ofast"</span>,<span class="meta-string">"-funroll-all-loops"</span>,<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="comment">//~ #pragma GCC target ("avx2")</span></span><br><span class="line"><span class="comment">//~ #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">#define endl '\12'</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int32_t(a.size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trav(a,x) for (auto&amp; a: x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG(FMT...) fprintf(stderr, FMT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close std::ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (LL i = (x), _##i = (y); i &lt; _##i; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (LL i = (x), _##i = (y); i &gt; _##i; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SORT_UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CASET int ___T; cin&gt;&gt;___T; for(int __CS=1;__CS&lt;=___T;__CS++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> Erica = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">dlsrand</span><span class="params">(random_device&#123;&#125;())</span></span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">mrand</span><span class="params">(<span class="built_in">std</span>::chrono::system_clock::now().time_since_epoch().count())</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> mrand() % x;&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123; <span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll&amp; x, ll&amp; y)</span></span>&#123;<span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;ll ret=ex_gcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="function">LL <span class="title">bin</span><span class="params">(LL x, LL n, LL MOD)</span> </span>&#123;LL ret = MOD != <span class="number">1</span>;<span class="keyword">for</span> (x %= MOD; n; n &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)<span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = ret * x % MOD;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">norm</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &gt;= mod ? (x - mod) : x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">get_inv</span><span class="params">(LL x, LL p)</span> </span>&#123; <span class="keyword">return</span> bin(x, p - <span class="number">2</span>, p); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get_inv</span><span class="params">(ll a)</span> </span>&#123; ll x, y; ex_gcd(a, mod, x, y); <span class="keyword">return</span> norm(x + mod);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">umin</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x = x &gt; y ? y : x;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">umax</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x = x &lt; y ? y : x;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">dec</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x -= y; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += mod;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x += y; <span class="keyword">if</span>(x &gt;= mod) x -= mod;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ull base=<span class="number">2333</span>, P_1=<span class="number">19260817</span>, P_2=<span class="number">999998639</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>; <span class="comment">// remember to calculate. if tle, check maxn first.</span></span><br><span class="line"><span class="keyword">int</span> n , m, color = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("6.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("out.txt","w",stdout);</span></span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; (s[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> ck = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m || vis[x][y] || s[x][y] != <span class="string">'O'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> init = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'O'</span> &amp;&amp; vis[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    vis[i][j] = ++color;</span><br><span class="line">                    <span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">                    q.push(&#123;i, j&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">                        <span class="keyword">auto</span> x = q.front().first, y = q.front().second;</span><br><span class="line">                        q.pop();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">                            <span class="keyword">int</span> xx = x + dx[k], yy = y + dy[k];</span><br><span class="line">                            <span class="keyword">if</span>(ck(xx, yy))&#123;</span><br><span class="line">                                vis[xx][yy] = color;</span><br><span class="line">                                q.push(&#123;xx, yy&#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> co = <span class="number">1</span>; co &lt;= color; co++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;pii&gt; tp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[i][j] == co)&#123;</span><br><span class="line">                        tp.eb(i,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(SZ(tp)!=<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> [a, b] : tp)&#123;</span><br><span class="line">                    s[a][b] = <span class="string">'.'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    init();</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "\n\n show == \n";</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1; j &lt;= m; j++)&#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; s[i][j] ;</span></span><br><span class="line">    <span class="comment">//     &#125;cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> chk = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "s[" &lt;&lt;i &lt;&lt; "][" &lt;&lt; j&lt;&lt;"]==="&lt;&lt;s[i][j] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; n || j &lt; <span class="number">1</span> || j &gt; m || (s[i][j] != <span class="string">'O'</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check1 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  1" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check2 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  2" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i+<span class="number">1</span>][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check3 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  3" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check4 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  4" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check5 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">3</span>)&amp;&amp;chk(i,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  5" &lt;&lt; endl;</span></span><br><span class="line">            s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=s[i+<span class="number">1</span>][j+<span class="number">3</span>]=s[i][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">2</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check6 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  6" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">            <span class="comment">// s[i+1][j]=s[i+1][j+1]=s[i+1][j+2]=s[i+1][j+3]=s[i][j+1]=s[i+2][j+1] = 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check7 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  7" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check8 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  8" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check9 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  9" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check10 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  10" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">2</span>]=s[i+<span class="number">3</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check11 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i,j+<span class="number">1</span>)&amp;&amp;chk(i,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">3</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">4</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  11" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i][j+<span class="number">1</span>]=s[i][j+<span class="number">2</span>]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=s[i+<span class="number">1</span>][j+<span class="number">3</span>]=s[i+<span class="number">1</span>][j+<span class="number">4</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> fl = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> clockwise = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">char</span> tp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1  1 2 3 ... m</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">        .</span></span><br><span class="line"><span class="comment">        .</span></span><br><span class="line"><span class="comment">        n</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                tp[i][j] = s[n+<span class="number">1</span>-j][i]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(n , m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = tp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fl)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"clockwise"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" -- begin -- "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"n === "</span> &lt;&lt; n &lt;&lt; <span class="string">" m == "</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = tp[i][j];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; s[i][j];</span><br><span class="line">            &#125;<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "-- end -- " &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// fl=0;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> mirror = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">char</span> tp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                tp[i][j] = s[i][m+<span class="number">1</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; " mirror   show  " &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = tp[i][j];</span><br><span class="line">           <span class="comment">//     cout &lt;&lt; s[i][j];</span></span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//   cout &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; " now ==== " &lt;&lt; endl; </span></span><br><span class="line">    <span class="comment">// check6(1,2);</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1; j &lt;= m; j++)&#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; s[i][j];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">auto</span> up = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                check1(i , j);</span><br><span class="line">                check2(i , j);</span><br><span class="line">                check3(i , j);</span><br><span class="line">                check4(i , j);</span><br><span class="line">                check5(i , j);</span><br><span class="line">                check6(i , j);</span><br><span class="line">                check7(i , j);</span><br><span class="line">                check8(i , j);</span><br><span class="line">                check9(i , j);</span><br><span class="line">                check10(i , j);</span><br><span class="line">                check11(i , j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> show = [&amp;]()&#123;</span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j = 1; j &lt;= m; j++)&#123;</span></span><br><span class="line">        <span class="comment">//         cout &lt;&lt; s[i][j];</span></span><br><span class="line">        <span class="comment">//     &#125;cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); show();</span><br><span class="line">    mirror();show();</span><br><span class="line">    up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="FB"><a href="#FB" class="headerlink" title="FB:"></a>FB:</h3><p>code by 广州全能王<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> tf[<span class="number">4</span>][<span class="number">6</span>]=&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; a[x][y]==<span class="string">'O'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) tmp[i]=v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) v[tf[x][i]]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">a[x][y]=<span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">int</span> re=v[<span class="number">0</span>]?<span class="number">-10000</span>:<span class="number">1</span>;</span><br><span class="line">v[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> tx=x+dx[i];</span><br><span class="line"><span class="keyword">int</span> ty=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(ok(tx,ty))&#123;</span><br><span class="line">g(i);</span><br><span class="line">re+=f(tx,ty);</span><br><span class="line">g(i^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+i);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="string">'O'</span>) &#123;</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">ans+=(f(i,j)==<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="J-PaperCubexpress"><a href="#J-PaperCubexpress" class="headerlink" title="J:PaperCubexpress"></a>J:PaperCubexpress</h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>$n$ 次查询,每组查询有两个字符串$a, b$。$a$ 表示学校的名字，$b$ 表示邮寄的物品编号组成的字符串。判断bb字符串是否是 $10$ 个 $O$，3个 $W$ ，$1$ 个$N$，$1$个 $B$，一个$K$组成的.</p><h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76093<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,ch,ch);</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(ch);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'O'</span>)a[<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'W'</span>)a[<span class="number">2</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'K'</span>)a[<span class="number">3</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)a[<span class="number">4</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'N'</span>)a[<span class="number">5</span>]++;</span><br><span class="line"><span class="keyword">else</span> a[<span class="number">6</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">10</span>&amp;&amp;a[<span class="number">2</span>]==<span class="number">3</span>&amp;&amp;a[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">4</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">5</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">6</span>]==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="K-PaperCase"><a href="#K-PaperCase" class="headerlink" title="K:PaperCase"></a>K:PaperCase</h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>，给一些用空格隔开的单词，用驼峰命名法来表示它们。骆驼式命名法就是当变量名或函数名是由一个或多个单词连结在一起时，第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。</p><h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76009<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line"><span class="keyword">int</span> n = s.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">' '</span>)<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(s[i+<span class="number">1</span>]-<span class="string">'a'</span>+<span class="string">'A'</span>),i++;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;s[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了2020CUST纳新赛的一血代码&lt;/center&gt;</summary>
    
    
    
    <category term="Editorial" scheme="http://yoursite.com/categories/Editorial/"/>
    
    
    <category term="Editorial" scheme="http://yoursite.com/tags/Editorial/"/>
    
  </entry>
  
  <entry>
    <title>CUST Monthly Nov. 部分代码</title>
    <link href="http://yoursite.com/2020/11/22/MonthlyNov/"/>
    <id>http://yoursite.com/2020/11/22/MonthlyNov/</id>
    <published>2020-11-22T15:39:03.000Z</published>
    <updated>2020-11-22T15:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/Monthly/Monthly Nov.pdf">Statements</a></p><p><a href="/Monthly/Editoral.pdf">Tutorial</a></p><p>一血代码：</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>分析有几种方法使得输出为三个数的最大数</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>语义分析（不用复制下来运行的拉~）</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>Code by Emanon<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"5\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1 3 4 8 10"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给出序列$X$和序列$Y$，求$X_i$异或$Y_j$后有少个数字在这$2n$个数里的有序对数量的奇偶性。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>异或性质: $a\oplus b = c$，那么$c \oplus a = b$ 决定总是两对两对出现。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p>Code by Emanon<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Zhuangzhuang Mei Mei Mei"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给图的初始权值和期望权值，进行操作后能后实现。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>对每个联通块判断是否权值和一样。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p>Code by UnitsPR<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">200000</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">200000</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">200000</span> + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> father[x];</span><br><span class="line">father[x] = find(father[x]);</span><br><span class="line"><span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u = find(u);v = find(v);</span><br><span class="line"><span class="keyword">if</span> (u != v)</span><br><span class="line">&#123;</span><br><span class="line">father[u] = v;</span><br><span class="line">a[v] += a[u];</span><br><span class="line">b[v] += b[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) father[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">merge(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> bl = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = find(i);</span><br><span class="line"><span class="keyword">if</span> (a[x] != b[x])</span><br><span class="line">&#123;</span><br><span class="line">bl = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"azhe\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bl) <span class="built_in">printf</span>(<span class="string">"yingyingying\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>给定一个长度为 n 字符串，交换相邻的字符，问能不能形成回文串，如果能输出最少操作次数。</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>把字符移动到最外边最优，从左往右 用 Fenwick Tree 维护。</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><p>Code by Devour_<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:10240000000000,10240000000000"</span>)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1.06e9大小</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span> ( <span class="number">-1</span> );</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> t&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(t &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);ch=getchar();&#125;</span><br><span class="line">x=x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int ,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(a) a&amp;(-a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,k) memset(a,k,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> bit[maxn] ,a[maxn];</span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//迭代单点修改</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        bit[i]+=x;</span><br><span class="line">        i+=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s+=bit[i];</span><br><span class="line">        i-=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s ;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt;loc[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;n = s.size();</span><br><span class="line">    <span class="keyword">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;++i)loc[s[i]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)cnt+=(loc[i].size()&amp;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"rkmdsxmds buKeai\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("^_^\n");</span></span><br><span class="line">ll ans =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tot =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n&amp;&amp;tot&lt;n/<span class="number">2</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> re = s[i] -<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> co = loc[re].size()<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(loc[re][co]==i)</span><br><span class="line">&#123;<span class="comment">//奇数个当然可以遇到自己啦，于是这个时候就要处理答案</span></span><br><span class="line">ans+=(n/<span class="number">2</span> - tot);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=(n <span class="number">-1</span> -loc[re][co])-( sum(n<span class="number">-1</span>)-sum(loc[re][co]) );</span><br><span class="line"><span class="comment">//printf("%d %lld %d %d\n",i,ans,sum(n-1),sum(co+1));</span></span><br><span class="line">a[ loc[re][co] ] = <span class="number">1</span>;</span><br><span class="line">add(loc[re][co],<span class="number">1</span> );</span><br><span class="line">loc[re].pop_back();</span><br><span class="line">tot++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>对于长度为$n$的字符串，计算含本质不同的回文子串数量最少的字符串个数</p><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><script type="math/tex; mode=display">ans =\begin{cases}62,  & \text{n=1} \\62*62, & \text{n=2} \\62*62*62, &\text{n=3}\\62*61*60,&\text{n>3}\end{cases}</script><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p>Code by Yukari17<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"62"</span>);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"3844"</span>);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">3</span>)<span class="built_in">puts</span>(<span class="string">"238328"</span>);</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">3</span>)<span class="built_in">puts</span>(<span class="string">"226920"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">62*61*60=226920</span></span><br><span class="line"><span class="comment">62^3</span></span><br><span class="line"><span class="comment">aba</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>求一条欧拉路</p><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><p>Nobody</p><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>模拟</p><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>模拟题意。写完就行。</p><h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><p>Code by PaperCube<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">leap</span><span class="params">(<span class="keyword">int</span> yr)</span> </span>&#123; <span class="keyword">return</span> yr % <span class="number">400</span> == <span class="number">0</span> || (yr % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; yr % <span class="number">100</span> != <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> days_of_month[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_day</span><span class="params">(<span class="keyword">int</span> yr, <span class="keyword">int</span> mo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mo != <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> days_of_month[mo];</span><br><span class="line">    <span class="keyword">return</span> leap(yr) ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compose</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123; <span class="keyword">return</span> y * <span class="number">10000</span> + m * <span class="number">100</span> + d; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;y, <span class="keyword">int</span> &amp;m, <span class="keyword">int</span> &amp;d)</span> </span>&#123;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="keyword">if</span> (d &gt; get_day(y, m)) &#123;</span><br><span class="line">        d = <span class="number">1</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">        m = <span class="number">1</span>, y++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_date</span><span class="params">(<span class="keyword">int</span> &amp;y, <span class="keyword">int</span> &amp;m, <span class="keyword">int</span> &amp;d)</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%d-%d-%d"</span>, &amp;y, &amp;m, &amp;d); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_wd</span><span class="params">(<span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = v - <span class="number">1</span>;</span><br><span class="line">    x %= <span class="number">7</span>;</span><br><span class="line">    v = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">workday</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n1 = compose(<span class="number">0</span>, <span class="number">2</span>, <span class="number">11</span>), n2 = compose(<span class="number">0</span>, <span class="number">7</span>, <span class="number">11</span>),</span><br><span class="line">               n3 = compose(<span class="number">0</span>, <span class="number">8</span>, <span class="number">23</span>), n4 = compose(<span class="number">0</span>, <span class="number">1</span>, <span class="number">29</span>);</span><br><span class="line">    <span class="keyword">int</span> v = compose(<span class="number">0</span>, m, d);</span><br><span class="line">    <span class="keyword">return</span> (v &gt;= n1 &amp;&amp; v &lt;= n2) || v &gt;= n3 || v &lt;= n4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y, m, d, w;</span><br><span class="line">    <span class="keyword">int</span> y2, m2, d2;</span><br><span class="line">    read_date(y, m, d);</span><br><span class="line">    read_date(y2, m2, d2);</span><br><span class="line">    w = read_int();</span><br><span class="line">    <span class="keyword">for</span> (; compose(y, m, d) &lt;= compose(y2, m2, d2); inc(y, m, d), w++) &#123;</span><br><span class="line">        make_wd(w);</span><br><span class="line">        <span class="keyword">if</span> (!workday(m, d))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">            r[<span class="number">3</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d == get_day(y, m))</span><br><span class="line">            r[<span class="number">4</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((m == <span class="number">2</span> &amp;&amp; d == <span class="number">14</span>) || (m == <span class="number">8</span> &amp;&amp; d == <span class="number">25</span>)) &#123;</span><br><span class="line">            r[<span class="number">1</span>]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r[w]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><p>每次能走$[1,k]$个格子，问从$1$走到$n$有几种方法</p><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>当$k = 2$时，就是每次能走$1,2$格，就是斐波那契数列,$f[i] = f[i - 1] + f[i - 2]$</p><p>对于 $k$，$f[i] = \sum_{j = 1}^k f[i - j]$， 矩阵维护一下。</p><h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><p>Code by<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops")</span></span><br><span class="line"><span class="comment">// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="literal">nullptr</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">min_queue</span> = <span class="title">priority_queue</span>&lt;T, vector&lt;T&gt;, greater&lt;T&gt; &gt;;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">max_queue</span> = <span class="title">priority_queue</span>&lt;T&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">A</span>, <span class="title">class</span> <span class="title">B</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ostream</span>&amp; <span class="title">operator</span>&lt;&lt;(ostream&amp; s, pair&lt;A, B&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return s &lt;&lt; "(" &lt;&lt; get&lt;0&gt;(a) &lt;&lt; ", " &lt;&lt; get&lt;1&gt;(a) &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;size_t n, typename... T&gt;</span></span><br><span class="line"><span class="class">typename std::enable_if&lt;(n &gt;= sizeof...(T))&gt;::type print_tuple(</span></span><br><span class="line"><span class="class">    std::ostream&amp;, const std::tuple&lt;T...&gt;&amp;) &#123;&#125;</span></span><br><span class="line"><span class="class">template &lt;size_t n, typename... T&gt;</span></span><br><span class="line"><span class="class">typename std::enable_if&lt;(n &lt; sizeof...(T))&gt;::type print_tuple(</span></span><br><span class="line"><span class="class">    std::ostream&amp; os, const std::tuple&lt;T...&gt;&amp; tup) &#123;</span></span><br><span class="line"><span class="class">  if (n != 0) os &lt;&lt; ", ";</span></span><br><span class="line"><span class="class">  os &lt;&lt; std::get&lt;n&gt;(tup);</span></span><br><span class="line"><span class="class">  print_tuple&lt;n + 1&gt;(os, tup);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;typename... T&gt;</span></span><br><span class="line"><span class="class">std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const std::tuple&lt;T...&gt;&amp; tup) &#123;</span></span><br><span class="line"><span class="class">  os &lt;&lt; "(";</span></span><br><span class="line"><span class="class">  print_tuple&lt;0&gt;(os, tup);</span></span><br><span class="line"><span class="class">  return os &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream&amp; print_collection(ostream&amp; s, T const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  s &lt;&lt; '[';</span></span><br><span class="line"><span class="class">  for (auto it = begin(a); it != end(a); ++it) &#123;</span></span><br><span class="line"><span class="class">    s &lt;&lt; *it;</span></span><br><span class="line"><span class="class">    if (it != prev(end(a))) s &lt;&lt; ", ";</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  return s &lt;&lt; ']';</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;class T, class U&gt;</span></span><br><span class="line"><span class="class">ostream&amp; operator&lt;&lt;(ostream&amp; s, map&lt;T, U&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return print_collection(s, a);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream&amp; operator&lt;&lt;(ostream&amp; s, set&lt;T&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return print_collection(s, a);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream&amp; operator&lt;&lt;(ostream&amp; s, vector&lt;T&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return print_collection(s, a);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">double __startG = clock();</span></span><br><span class="line"><span class="class">void resetG() &#123; __startG = clock(); &#125;</span></span><br><span class="line"><span class="class">double curTime() &#123; return (clock() - __startG) / CLOCKS_PER_SEC; &#125;</span></span><br><span class="line"><span class="class">bool stopNow(double ttl) &#123; return ttl &lt; curTime(); &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;typename T = int&gt;</span></span><br><span class="line"><span class="class">T get_signed_int() &#123;</span></span><br><span class="line"><span class="class">  char c = getchar();</span></span><br><span class="line"><span class="class">  T ret = 0, neg = 0;</span></span><br><span class="line"><span class="class">  while (c != '-' &amp;&amp; !isdigit(c)) c = getchar();</span></span><br><span class="line"><span class="class">  if (c == '-') neg = 1, c = getchar();</span></span><br><span class="line"><span class="class">  do &#123;</span></span><br><span class="line"><span class="class">    ret = (ret &lt;&lt; 3) + (ret &lt;&lt; 1) + c - '0';</span></span><br><span class="line"><span class="class">  &#125; while (isdigit(c = getchar()));</span></span><br><span class="line"><span class="class">  return neg ? -ret : ret;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;typename T&gt;</span></span><br><span class="line"><span class="class">void print_int(T x) &#123;</span></span><br><span class="line"><span class="class">  static char s[60], *s1;</span></span><br><span class="line"><span class="class">  s1 = s;</span></span><br><span class="line"><span class="class">  if (!x) *s1++ = '0';</span></span><br><span class="line"><span class="class">  if (x &lt; 0) putchar('-'), x = -x;</span></span><br><span class="line"><span class="class">  while (x) *s1++ = (x % 10 + '0'), x /= 10;</span></span><br><span class="line"><span class="class">  while (s1-- != s) putchar(*s1);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">const LL INF = 0x3f3f3f3f3f3f3f3fll;</span></span><br><span class="line"><span class="class">const double PI = acos(-1.0), eps = 1e-7;</span></span><br><span class="line"><span class="class">const int inf = 0x3f3f3f3f, ninf = 0xc0c0c0c0, mod = 1000000007;</span></span><br><span class="line"><span class="class">const int max3 = 1100, max4 = 11100, max5 = 200100, max6 = 2000100;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int dp[100];</span></span><br><span class="line"><span class="class">// k = 1, 1.......1</span></span><br><span class="line"><span class="class">// k = 2, 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946</span></span><br><span class="line"><span class="class">// k = 3, 1 2 4 7 13 24 44 81 149 274 504 927</span></span><br><span class="line"><span class="class">// k = 4, 1 2 4 8 15 29 56 108 208 401 773</span></span><br><span class="line"><span class="class">// k = 5, 1 2 4 8 16 31 61 120 236 464 912 1793 3525 6930 13624 26784</span></span><br><span class="line"><span class="class">// k = 6, 1 2 4 8 16 32 63 125 248 492 976 1936 3840 7617 15109 29970 59448</span></span><br><span class="line"><span class="class">// k = 7, 1 2 4 8 16 32 64 127 253 504 1004 2000 3984 7936 15808 31489 62725 124946</span></span><br><span class="line"><span class="class">// k = 8, 1 2 4 8 16 32 64 128 255 509 1016 2028 4048 8080 16128 32192 64256 128257 256005</span></span><br><span class="line"><span class="class">// k = 9, 1 2 4 8 16 32 64 128 256 511 1021 2040 4076 8144 16272 32512 64960 129792 259328</span></span><br><span class="line"><span class="class">// k = 10,1 2 4 8 16 32 64 128 256 512 1023 2045 4088 8172 16336 32656 65280 130496 260864</span></span><br><span class="line"><span class="class">/*</span></span><br><span class="line"><span class="class"> k = 2</span></span><br><span class="line"><span class="class"> [1, 1]</span></span><br><span class="line"><span class="class"> [1, 0]</span></span><br><span class="line"><span class="class"> k = 3</span></span><br><span class="line"><span class="class">[1, 1, 1;</span></span><br><span class="line"><span class="class"> 0, 0, 1;</span></span><br><span class="line"><span class="class"> 1, 0, 0]</span></span><br><span class="line"><span class="class"> k = 6</span></span><br><span class="line"><span class="class"> [0, 1, 0, 0, 0, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 1, 0, 0, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 0, 1, 0, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 0, 0, 1, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 0, 0, 0, 1;</span></span><br><span class="line"><span class="class"> 1, 1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="class"> k = 10</span></span><br><span class="line"><span class="class"> &#123;0,1,0,0,0,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,1,0,0,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,1,0,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,1,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,1,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,0,1,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,0,0,1,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0, 0,0,0,1,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,0,0,0,0,1&#125;,</span></span><br><span class="line"><span class="class"> &#123;1,1,1,1,1,1,1,1,1,1&#125;&#125;.</span></span><br><span class="line"><span class="class">*/</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int n;</span></span><br><span class="line"><span class="class">struct Matrix &#123;</span></span><br><span class="line"><span class="class">    LL val[124][124];</span></span><br><span class="line"><span class="class">    void Zero() &#123;memset(val,0,sizeof(val));&#125;</span></span><br><span class="line"><span class="class">    void Init()&#123;</span></span><br><span class="line"><span class="class">        Zero();</span></span><br><span class="line"><span class="class">        for(int i=0;i&lt;124;i++)</span></span><br><span class="line"><span class="class">            val[i][i]=1;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    Matrix operator *( const Matrix &amp;b );</span></span><br><span class="line"><span class="class">&#125; A;</span></span><br><span class="line"><span class="class">Matrix Matrix::operator *( const Matrix &amp;b ) &#123;</span></span><br><span class="line"><span class="class">    Matrix temp;</span></span><br><span class="line"><span class="class">    temp.Zero();</span></span><br><span class="line"><span class="class">    for( int i = 0 ; i &lt;  n ;  i ++ )&#123;</span></span><br><span class="line"><span class="class">        for( int k = 0 ; k &lt; n ; k ++ )&#123;</span></span><br><span class="line"><span class="class">            if( val[i][k] )&#123;</span></span><br><span class="line"><span class="class">                for( int j = 0 ; j &lt;  n;  j ++ )&#123;</span></span><br><span class="line"><span class="class">                    temp.val[i][j]+=val[i][k]*b.val[k][j];</span></span><br><span class="line"><span class="class">                    temp.val[i][j] %= mod;</span></span><br><span class="line"><span class="class">                &#125;</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return temp;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">Matrix quickpow(Matrix A,int m) &#123;</span></span><br><span class="line"><span class="class">    Matrix temp;</span></span><br><span class="line"><span class="class">    temp.Init();</span></span><br><span class="line"><span class="class">    while( m ) &#123;</span></span><br><span class="line"><span class="class">        if( m&amp;1 ) temp = temp*A;</span></span><br><span class="line"><span class="class">        A  = A*A;</span></span><br><span class="line"><span class="class">        m &gt;&gt;= 1;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return temp;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main() &#123;</span></span><br><span class="line"><span class="class">    int T, N, K;</span></span><br><span class="line"><span class="class">    cin &gt;&gt; T;</span></span><br><span class="line"><span class="class">    while (T--) &#123;</span></span><br><span class="line"><span class="class">        cin &gt;&gt; N &gt;&gt; K;</span></span><br><span class="line"><span class="class">        n = K;</span></span><br><span class="line"><span class="class">        A.Zero();</span></span><br><span class="line"><span class="class">        for (int i = 0; i &lt; n - 1; i++) &#123;</span></span><br><span class="line"><span class="class">            A.val[i][i + 1] = 1;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="class">            A.val[n - 1][i] = 1;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        A = quickpow(A, N);</span></span><br><span class="line"><span class="class">        printf("%llu\n", A.val[n - 1][0]);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return 0;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>找到一个子集，使得子集序号的异或和不为0且开心值和最大。</p><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>先按开心值进行排序，对每一样泥巴尝试插入线性基即可（线性基一个性质是线性基内任意一些数异或起来不为 $0$。</p><h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><p>Code by axp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; ii;</span><br><span class="line"><span class="built_in">set</span>&lt;ll&gt; se;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i=se.rbegin();i!=se.rend();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>((x^(*i))&lt;x)</span><br><span class="line">x^=*i;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;' ';</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl&lt;&lt;x&lt;&lt;": "&lt;&lt;tx&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">se.insert(x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ii a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)<span class="built_in">cin</span>&gt;&gt;a[i].first&gt;&gt;a[i].second;</span><br><span class="line">sort(a,a+n,[](<span class="keyword">const</span> ii&amp; a, <span class="keyword">const</span> ii&amp;b)&#123;<span class="keyword">return</span> a.second&gt;b.second;&#125;);</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(check(a[i].first))</span><br><span class="line">ans+=a[i].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>每个字符串压缩，每个字符串不同，使字符串总和最小。</p><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>对于字符串，建字典树，每个结点维护字符串长度多重集合，从下往上做启发式合并，若当前结点没有被标记，则从多重集合中选最大数值替换为当前节点字符串长度，$dsu on tree$，$O(nlog^2n)$</p><h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><p>Nobody</p><h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>ans=$233+max(max(\sum_{i = 1}^na_i), 0)$ </p><h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><p>Code by yzbsy<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000000 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> st=<span class="number">233</span>,maxx=<span class="number">233</span>,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">st+=x;</span><br><span class="line">maxx=max(maxx,st);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,maxx);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><h3 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>对每一行建 $Splay$，离线把每个 $4$ 操作连成一棵树，$dfs$ 即可</p><h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><p>Nobody</p><h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><h3 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h3><p>$f[i]=f[i-1]+2*f[i-2]\%100000$。</p><h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><p>数组模拟过程，多组输入要学会。</p><h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><p>Code by Bi08<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">100000</span>  ;</span><br><span class="line">ll a[N],n,x; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;x)&#123;</span><br><span class="line">a[<span class="number">1</span>] = x%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) a[i] = a[i<span class="number">-1</span>] % mod+ a[i<span class="number">-2</span>]*<span class="number">2</span>%mod;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[n]%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;center&gt;CUST Monthly Nov. 一血代码&lt;/center&gt;</summary>
    
    
    
    <category term="Monthly" scheme="http://yoursite.com/categories/Monthly/"/>
    
    
    <category term="Monthly" scheme="http://yoursite.com/tags/Monthly/"/>
    
  </entry>
  
  <entry>
    <title>Team Round #1: ICPC Central Russia Regional Contest</title>
    <link href="http://yoursite.com/2020/11/13/CRRC19/"/>
    <id>http://yoursite.com/2020/11/13/CRRC19/</id>
    <published>2020-11-13T09:49:15.000Z</published>
    <updated>2020-11-13T09:54:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102780" target="_blank" rel="noopener">传送门</a></p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>两杯水混合温度80，求两杯水体积。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>观察到数据很小，暴力枚举。有特判。。。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1 , t2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">    <span class="keyword">if</span>(t1 == <span class="number">80</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t2 == <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v1 = <span class="number">1</span>; v1 &lt;= <span class="number">1000</span>; v1++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v2 = <span class="number">1</span>; v2 &lt;= <span class="number">1000</span>; v2++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1 * v1 + t2 * v2 == <span class="number">80</span> * (v1 + v2))&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>电路电阻。</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>发现单调性。二分一下。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n , R, r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">chk</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        res += (r[i] * x) / (r[i] + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// close;</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; R;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="comment">// cin &gt;&gt; r[i];</span></span><br><span class="line">        read(r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> le = <span class="number">0</span>, ri = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (le + ri) / <span class="number">2.0</span>; </span><br><span class="line">        <span class="keyword">if</span>(chk(mid) &gt; R)&#123;</span><br><span class="line">            ri = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            le = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, le);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><p>没看</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>听说是模拟</p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-Ofast"</span>,<span class="meta-string">"-funroll-all-loops"</span>,<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">11000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>); <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) mp[s[i]]++;</span><br><span class="line">    <span class="comment">//[:|||:]</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'['</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'['</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"([:|||:])" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"[:|||:]"</span>);</span><br><span class="line">            mp[<span class="string">'['</span>]--; mp[<span class="string">']'</span>]--; mp[<span class="string">':'</span>] -= <span class="number">2</span>; mp[<span class="string">'|'</span>] -= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-|</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'|'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'|'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-|)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-|"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'|'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:~(</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'~'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'~'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:~()" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":~("</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'~'</span>]--; mp[<span class="string">'('</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-X</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'X'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'X'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-X)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-X"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'X'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//%0</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'%'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'%'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(%0)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"%0"</span>);</span><br><span class="line">            mp[<span class="string">'0'</span>]--; mp[<span class="string">'%'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//8-0</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'8'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'8'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(8-0)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"8-0"</span>);</span><br><span class="line">            mp[<span class="string">'0'</span>]--; mp[<span class="string">'8'</span>]--; mp[<span class="string">'-'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-E</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'E'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'E'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-E)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-E"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'E'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-0</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'0'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'0'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-0)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-0"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'0'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:C</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'C'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'C'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:C)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":C"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'C'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:D</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'D'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'D'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:D)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":D"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'D'</span>]--;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-P</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'P'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'P'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-P)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-P"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'P'</span>]--; mp[<span class="string">'-'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'\\'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'\\'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-\)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-\\"</span>);</span><br><span class="line">            mp[<span class="string">'\\'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">':'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mp[<span class="string">';'</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">'('</span>]) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(;-()" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">";-("</span>), mp[<span class="string">';'</span>]--, mp[<span class="string">'-'</span>]--, mp[<span class="string">'('</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">')'</span>]) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(;-))" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">";-)"</span>), mp[<span class="string">';'</span>]--, mp[<span class="string">'-'</span>]--, mp[<span class="string">')'</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mp[<span class="string">':'</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">')'</span>]) &#123;</span><br><span class="line">            <span class="comment">//:)</span></span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:))" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":)"</span>), mp[<span class="string">':'</span>]--, mp[<span class="string">')'</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">'('</span>]) &#123;</span><br><span class="line">            <span class="comment">//:(</span></span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:()" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":("</span>), mp[<span class="string">':'</span>]--, mp[<span class="string">'('</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; "LOL" &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"LOL"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><p>给定a,b，求$a^x==x^b$时候的x。</p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>多校Claris有个题有个思想，拿三个素数check，maxn不能开太大，会TLE。</p><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a , b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    vi pri;</span><br><span class="line">    pri.eb(P_1), pri.eb(P_2), pri.eb(Erica);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> fl = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : pri)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bin(a, i , it) != bin(i, b , it)) &#123;</span><br><span class="line">                fl = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fl) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>待补（gugu）</p><h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><p>取一个或两个或全部字符，最后一次操作的人获胜。</p><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><p>记忆化搜索。</p><h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st.size() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(mp.count(st)) <span class="keyword">return</span> mp[st];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sg, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : st) v.push_back(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x) &#123;</span><br><span class="line">            st.erase(st.find(x)); st.insert(x<span class="number">-1</span>);</span><br><span class="line">            sg.push_back(dfs()); st.erase(st.find(x<span class="number">-1</span>)); st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            st.erase(st.find(x)); st.insert(x<span class="number">-2</span>);</span><br><span class="line">            sg.push_back(dfs()); st.erase(st.find(x<span class="number">-2</span>)); st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            st.erase(st.find(x)); sg.push_back(dfs()); st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : sg)</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> mp[st] = flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp.clear();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">30</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : s) a[x-<span class="string">'A'</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) st.insert(a[i]);</span><br><span class="line">    <span class="keyword">if</span>(dfs() == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Alice"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bob"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    doit();</span><br><span class="line">    <span class="comment">//st.insert(4); st.insert(4); st.insert(4); st.insert(4);</span></span><br><span class="line">    <span class="comment">//st.insert(4); st.insert(4); st.insert(4);</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; dfs();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AAAAAAAAAAAAAAAAAAAABBBBBBBBCCCCCCCDDDDD</span></span><br></pre></td></tr></table></figure><p>别人的代码。不明白啊qwq。。得补补吧呜呜。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> sg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        sg[i] = i % <span class="number">3</span> + (i % <span class="number">3</span> == <span class="number">0</span> ? <span class="number">3</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : s)</span><br><span class="line">        c[ch - <span class="string">'A'</span>]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (c[i])</span><br><span class="line">            ans ^= sg[c[i]];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans == <span class="number">0</span> ? <span class="string">"Bob"</span> : <span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><p>待补</p><h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h4><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><h4 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h4><p>签到</p><h4 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h4><p>签到</p><h4 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (n &amp; <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><h4 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h4><p>待补</p><h4 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h4><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><h4 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h4><p>$k(k\le 5)$个数使得${a_1}^{3}+\cdots {a_k}^3=x(x\le 10^{100000})$，构造出来。</p><h4 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h4><p>观察到k很小，然后用$(x-1)^3,(x+1)^3$展开后发现和为$2x^3+6x$,那么用两个-x抵一下，然后分类对mod&emsp; 6讨论一下。</p><h4 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger Erica = BigInteger.valueOf(<span class="number">6</span>);</span><br><span class="line">        BigInteger ONE = BigInteger.ONE;</span><br><span class="line">        BigInteger FU = BigInteger.valueOf(-<span class="number">1</span>);</span><br><span class="line">        BigInteger x = cin.nextBigInteger();</span><br><span class="line">        BigInteger modd = x.mod(Erica);</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">0</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">4</span>);</span><br><span class="line">            BigInteger xx = x.divide(Erica);</span><br><span class="line">            System.out.println(xx.multiply(FU)+ <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span>+ xx.subtract(ONE));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(ONE))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.subtract(ONE)).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"1 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">2</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.subtract(BigInteger.valueOf(<span class="number">8</span>))).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"2 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">3</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.add(BigInteger.valueOf(<span class="number">27</span>))).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"-3 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">4</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.add(BigInteger.valueOf(<span class="number">8</span>))).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"-2 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">5</span>))) &#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.add(ONE)).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"-1 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><h4 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h4><p>两两交换相邻的数字，使得数字前一段下降，后一段上升。数字两两不同。</p><h4 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h4><p>发现最大数字要么最左边要么最右边，然后次大数字，模拟这个过程，Fenwick tree维护一下。</p><h4 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) <span class="meta-string">" ["</span> &lt;&lt; #__VA_ARGS__ <span class="meta-string">": "</span> &lt;&lt; (__VA_ARGS__) &lt;&lt; <span class="meta-string">"] "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT freopen(<span class="meta-string">"out.txt"</span>,<span class="meta-string">"w"</span>,stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> al[N],len,a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;N;x+=lowb(x))s[x]+=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=lowb(x))res+=s[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(al+<span class="number">1</span>,al+<span class="number">1</span>+len,x)-al;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    IN;</span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;a[i],al[++len]=a[i];</span><br><span class="line">    sort(al+<span class="number">1</span>,al+<span class="number">1</span>+len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=find(a[i]);</span><br><span class="line">        pos[a[i]]=i;</span><br><span class="line">        add(i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=pos[i];</span><br><span class="line">        ans+=min(query(p<span class="number">-1</span>),query(n)-query(p));</span><br><span class="line">        add(p,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了金陵香辣烤虾仁闷骚牛肉鸭饭的第??场训练&lt;/center&gt;</summary>
    
    
    
    <category term="Team Round（2020）" scheme="http://yoursite.com/categories/Team-Round（2020）/"/>
    
    
    <category term="GYM Training" scheme="http://yoursite.com/tags/GYM-Training/"/>
    
    <category term="Team Round（2020）" scheme="http://yoursite.com/tags/Team-Round（2020）/"/>
    
  </entry>
  
  <entry>
    <title>CUST新生爽爽爽部分一血代码</title>
    <link href="http://yoursite.com/2020/11/10/cust_newbie/"/>
    <id>http://yoursite.com/2020/11/10/cust_newbie/</id>
    <published>2020-11-10T15:20:15.000Z</published>
    <updated>2020-11-10T15:48:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="恭喜Winners"><a href="#恭喜Winners" class="headerlink" title="恭喜Winners"></a>恭喜Winners</h2><p>liangxinzhu &amp; techtbw</p><h2 id="一血代码："><a href="#一血代码：" class="headerlink" title="一血代码："></a>一血代码：</h2><h3 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>简单模拟。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>by e792a8<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">53</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>.getline(str,<span class="number">52</span>))&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(str); ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isupper</span>(str[i]))</span><br><span class="line">str[i]=<span class="built_in">tolower</span>(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="B"><a href="#B" class="headerlink" title="B:"></a>B:</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>模拟题意。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p>by liangxinzhu<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a, b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line"><span class="keyword">if</span>(a == b) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll x = a - b;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span>, x = -x;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v; <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x) &#123;</span><br><span class="line">v.push_back((x % <span class="number">10</span>) + <span class="string">'0'</span>), x /= <span class="number">10</span>, cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; x) v.push_back(<span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line">reverse(v.begin(), v.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)v.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="C"><a href="#C" class="headerlink" title="C:"></a>C:</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>模拟</p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(fgets(c,<span class="number">100</span>,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;c[i];++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=<span class="string">'D'</span>&amp;&amp;c[i]&lt;=<span class="string">'Z'</span>||c[i]&gt;=<span class="string">'d'</span>&amp;&amp;c[i]&lt;=<span class="string">'z'</span>)c[i]-=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;=<span class="string">'A'</span>&amp;&amp;c[i]&lt;=<span class="string">'C'</span>||c[i]&gt;=<span class="string">'a'</span>&amp;&amp;c[i]&lt;=<span class="string">'c'</span>)c[i]+=<span class="number">23</span>;</span><br><span class="line"><span class="built_in">putchar</span>(c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="D"><a href="#D" class="headerlink" title="D:"></a>D:</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> r[<span class="number">100011</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,n,e;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line"><span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="number">100010</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">r[a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!r[i])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="E"><a href="#E" class="headerlink" title="E:"></a>E:</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>map的简单运用</p><h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt;= <span class="string">'A'</span> &amp;&amp; a[j] &lt;= <span class="string">'Z'</span>) a[j] += <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">mp[a]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mp.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="F"><a href="#F" class="headerlink" title="F:"></a>F:</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">120</span>],ps[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(fgets(ps,<span class="number">100</span>,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">fgets(c,<span class="number">120</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;c[i];++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;=<span class="string">'A'</span>&amp;&amp;c[i]&lt;=<span class="string">'Z'</span>)c[i]=ps[c[i]-<span class="string">'A'</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;=<span class="string">'a'</span>&amp;&amp;c[i]&lt;=<span class="string">'z'</span>)c[i]=(<span class="string">'a'</span>-<span class="string">'A'</span>)+ps[c[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="built_in">putchar</span>(c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//putchar('\n');</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="G"><a href="#G" class="headerlink" title="G:"></a>G:</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h4><p>by 200511535_ZBW</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x*y*k&gt;=<span class="number">100000</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H"><a href="#H" class="headerlink" title="H:"></a>H:</h3><h4 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h4><p>map的简单运用</p><h4 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">mp[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it = mp.begin(); it != mp.end(); it++) &#123;</span><br><span class="line">ans = max(ans, it-&gt;second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(it = mp.begin(); it != mp.end(); it++) &#123;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second == ans) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, it-&gt;first, it-&gt;second);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="I"><a href="#I" class="headerlink" title="I:"></a>I:</h3><h4 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h4><p>by techtbw<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for (int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for (int i=a;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line">ll x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    z=x+y;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=z%<span class="number">10</span>;</span><br><span class="line">        z/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">5</span>) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="J"><a href="#J" class="headerlink" title="J:"></a>J:</h3><h4 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h4><p>by liangxinzhu<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)str.size(); i++) &#123;</span><br><span class="line">res = res * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt; v; <span class="built_in">string</span> temp = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'5'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.size()) v.push_back(cal(temp));</span><br><span class="line">temp = <span class="string">""</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> temp += s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.size()) v.push_back(cal(temp));</span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)v.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; (i != (<span class="keyword">int</span>)v.size()<span class="number">-1</span> ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s) doit();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="K"><a href="#K" class="headerlink" title="K:"></a>K:</h3><h4 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p><h3 id="L"><a href="#L" class="headerlink" title="L:"></a>L:</h3><h4 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h4><p>正整数唯一分解</p><h4 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h4><p>by liangxinzhu</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x; <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> sq = <span class="built_in">sqrt</span>(x); ll ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sq; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> p = i, q = x / i;</span><br><span class="line"><span class="keyword">if</span>(x % i) <span class="keyword">continue</span>;</span><br><span class="line">ans += p;</span><br><span class="line"><span class="keyword">if</span>(p != q) ans += q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> _; <span class="built_in">cin</span> &gt;&gt; _; <span class="keyword">while</span>(_--) doit();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="M"><a href="#M" class="headerlink" title="M:"></a>M:</h3><h4 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h4><p>会读入就行了</p><h4 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> ap[<span class="number">27</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(fgets(s,<span class="number">100000</span>,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(ap,<span class="number">0</span>,<span class="number">27</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s[i];++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">'a'</span>&amp;&amp;s[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">ap[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c:%d\n"</span>,i+<span class="string">'a'</span>,ap[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="N"><a href="#N" class="headerlink" title="N:"></a>N:</h3><h4 id="Description-13"><a href="#Description-13" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p><h3 id="O"><a href="#O" class="headerlink" title="O:"></a>O:</h3><h4 id="Description-14"><a href="#Description-14" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line"><span class="keyword">char</span> e[<span class="number">100</span>],f[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c))&#123;</span><br><span class="line"><span class="keyword">if</span>(a==b&amp;&amp;a==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(e,<span class="string">"%d"</span>,a);</span><br><span class="line"><span class="built_in">sprintf</span>(f,<span class="string">"%d"</span>,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">strlen</span>(e)<span class="number">-1</span>,j=<span class="built_in">strlen</span>(f)<span class="number">-1</span>;<span class="built_in">strlen</span>(e)-i&lt;=c;--i,--j)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;=<span class="number">0</span>?e[i]:<span class="string">'0'</span>)!=(j&gt;=<span class="number">0</span>?f[j]:<span class="string">'0'</span>))<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(e)-i==c)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">goto</span> endloop;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">d=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,d);</span><br><span class="line">endloop:</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="P"><a href="#P" class="headerlink" title="P:"></a>P:</h3><h4 id="Description-15"><a href="#Description-15" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-15"><a href="#Code-15" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,r+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(r[i]==v)ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><h4 id="Description-16"><a href="#Description-16" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-16"><a href="#Code-16" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr freopen(<span class="meta-string">"in.txt"</span>,<span class="meta-string">"r"</span>,stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fw freopen(<span class="meta-string">"out.txt"</span>,<span class="meta-string">"w"</span>,stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_Case</span><span class="params">(<span class="keyword">int</span> cnt,ll ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,cnt,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1000005</span>],m,prime[<span class="number">50005</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primes</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">            prime[++m]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prime[j]&gt;f[i]||prime[j]&gt;n/i)<span class="keyword">break</span>;</span><br><span class="line">            f[prime[j]*i]=prime[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>,M=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    primes(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)s.insert(prime[i]);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prime[i]&gt;n/<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(s.find(n-prime[i])!=s.end()&amp;&amp;n-prime[i]-prime[i]&lt;b-a&amp;&amp;n-prime[i]-prime[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                a=prime[i];</span><br><span class="line">                b=n-prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="R"><a href="#R" class="headerlink" title="R:"></a>R:</h3><h4 id="Description-17"><a href="#Description-17" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h4><p>简单数学</p><h4 id="Code-17"><a href="#Code-17" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> kase)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) v.push_back(n);</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) n = n * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v.size()) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, v[i], <span class="string">" \n"</span>[i == <span class="keyword">int</span>(v.size()) - <span class="number">1</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No number can be output !\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><h4 id="Description-18"><a href="#Description-18" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h4><p>映射关系</p><h4 id="Code-18"><a href="#Code-18" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3000</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> kase)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                b[++tot] = a[i] + a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b + <span class="number">1</span>, b + tot + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, b[i], <span class="string">" \n"</span>[i == m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T"><a href="#T" class="headerlink" title="T:"></a>T:</h3><h4 id="Description-19"><a href="#Description-19" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h4><p>欧拉函数</p><h4 id="Code-19"><a href="#Code-19" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> pri[N], phi[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler_table</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>; vis[<span class="number">1</span>] = vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ;i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            pri[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;<span class="comment">//i是素数时＜i的所有大于0的数都与i互质</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= tot; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i * pri[k] &gt; N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i * pri[k]] = <span class="number">1</span>;<span class="comment">//筛选掉i的倍数</span></span><br><span class="line">            <span class="keyword">if</span>(i % pri[k] == <span class="number">0</span>)&#123;<span class="comment">//如果有一个质数是i的因子</span></span><br><span class="line">                phi[i * pri[k]] = phi[i] * pri[k];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> phi[i * pri[k]] = phi[i] * phi[pri[k]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> kase)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, phi[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="U"><a href="#U" class="headerlink" title="U:"></a>U:</h3><h4 id="Description-20"><a href="#Description-20" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-20"><a href="#Solution-20" class="headerlink" title="Solution"></a>Solution</h4><p>模拟？</p><h4 id="Code-20"><a href="#Code-20" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_Case</span><span class="params">(<span class="keyword">int</span> cnt,ll ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,cnt,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)temp+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==n)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>,M=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n1,n2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n1,&amp;n2);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n1&gt;n2)swap(n1,n2);</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">6</span>&amp;&amp;<span class="number">6</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">28</span>&amp;&amp;<span class="number">28</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">496</span>&amp;&amp;<span class="number">496</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">8128</span>&amp;&amp;<span class="number">8128</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="V"><a href="#V" class="headerlink" title="V:"></a>V:</h3><h4 id="Description-21"><a href="#Description-21" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-21"><a href="#Solution-21" class="headerlink" title="Solution"></a>Solution</h4><p>枚举</p><h4 id="Code-21"><a href="#Code-21" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num)!=EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j&lt;= <span class="number">100</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= <span class="number">100</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i * i + j * j + k * k == num) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, i, j, k);</span><br><span class="line">                        f = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(f)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="W"><a href="#W" class="headerlink" title="W:"></a>W:</h3><h4 id="Description-22"><a href="#Description-22" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-22"><a href="#Solution-22" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-22"><a href="#Code-22" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p><h3 id="X"><a href="#X" class="headerlink" title="X:"></a>X:</h3><h4 id="Description-23"><a href="#Description-23" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-23"><a href="#Solution-23" class="headerlink" title="Solution"></a>Solution</h4><p>进制转换</p><h4 id="Code-23"><a href="#Code-23" class="headerlink" title="Code"></a>Code</h4><p>by cyh20021231<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> a, b;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%x%x"</span>, &amp;a, &amp;b) != EOF) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Y"><a href="#Y" class="headerlink" title="Y:"></a>Y:</h3><h4 id="Description-24"><a href="#Description-24" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-24"><a href="#Solution-24" class="headerlink" title="Solution"></a>Solution</h4><p>枚举？</p><h4 id="Code-24"><a href="#Code-24" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)temp+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==n)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>,M=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vc;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vc2[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>],&amp;a[<span class="number">3</span>],&amp;a[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">4</span>]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(f)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            vc.push_back(a[<span class="number">1</span>]*<span class="number">1000</span>+a[<span class="number">2</span>]*<span class="number">100</span>+a[<span class="number">3</span>]*<span class="number">10</span>+a[<span class="number">4</span>]);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>,a+<span class="number">5</span>));</span><br><span class="line">        sort(vc.begin(),vc.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vc.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vc[i]/<span class="number">1000</span>==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            vc2[vc[i]/<span class="number">1000</span>].push_back(vc[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> len=vc2[i].size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==len<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,vc2[i][j]);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>,vc2[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Z"><a href="#Z" class="headerlink" title="Z:"></a>Z:</h3><h4 id="Description-25"><a href="#Description-25" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-25"><a href="#Solution-25" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-25"><a href="#Code-25" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了cust新生爽爽爽的部分题解&lt;/center&gt;</summary>
    
    
    
    <category term="Miscellaneous" scheme="http://yoursite.com/categories/Miscellaneous/"/>
    
    
    <category term="Miscellaneous" scheme="http://yoursite.com/tags/Miscellaneous/"/>
    
  </entry>
  
  <entry>
    <title>爱上对方过后就哭了</title>
    <link href="http://yoursite.com/2020/09/18/asdfghjkl/"/>
    <id>http://yoursite.com/2020/09/18/asdfghjkl/</id>
    <published>2020-09-18T00:05:20.000Z</published>
    <updated>2020-09-18T00:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道这样的日子还要折磨我多久。</p><p>感觉真的好痛苦啊。</p><p>我以为我长大了。</p><p>可是不到一个礼拜我就后悔了。</p><p>那种感情太迷惑了。</p><p>我不知道我在干什么。</p><p>我不知道我要干什么。</p><p>明明已经失学失业了，为什么还会被这种神奇的事情困扰呢。</p><p>为什么身位会这么低啊。</p><p>都说goodbye了为什么忍不住啊。</p><p>为什么会有执念呢。</p><p>念念不忘就会有回响嘛？</p><p>什么时候才能真的fold啊。</p><p>真的真的太痛苦了。</p><p>每天都这样真的太糟糕了。</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;爱上对方过后就哭了&lt;/center&gt;</summary>
    
    
    
    <category term="Roast" scheme="http://yoursite.com/categories/Roast/"/>
    
    
    <category term="Roast" scheme="http://yoursite.com/tags/Roast/"/>
    
  </entry>
  
  <entry>
    <title>迷惑行为</title>
    <link href="http://yoursite.com/2020/08/16/0816/"/>
    <id>http://yoursite.com/2020/08/16/0816/</id>
    <published>2020-08-16T14:05:20.000Z</published>
    <updated>2020-08-17T03:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>失望是相互增长的不是吗？</p>]]></content>
    
    
    <summary type="html">&lt;center&gt;迷惑行为&lt;/center&gt;</summary>
    
    
    
    <category term="Roast" scheme="http://yoursite.com/categories/Roast/"/>
    
    
    <category term="roast" scheme="http://yoursite.com/tags/roast/"/>
    
  </entry>
  
  <entry>
    <title>bitset学习笔记</title>
    <link href="http://yoursite.com/2020/07/14/bitset/"/>
    <id>http://yoursite.com/2020/07/14/bitset/</id>
    <published>2020-07-13T16:05:20.000Z</published>
    <updated>2020-07-14T07:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/utility/bitset" target="_blank" rel="noopener">cppreference about bitset</a></p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><blockquote><p>C++的 bitset 在 \<bitset\> 头文件中，它是一种类似数组的结构，它的每一个元素只能是0或１，每个元素仅用１bit空间。</bitset\></p></blockquote><p>常常碰到处理的数组只有0和1的变化，此时就可以使用bitset优化。比如求两个集合的交集可以使用按位与运算，求并集可以使用按位或运算</p><h3 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h3><p>构造函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;4&gt; bitset1;<span class="comment">//无参构造，长度为４，默认每一位为0</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">bitset2</span><span class="params">(<span class="number">12</span>)</span></span>;<span class="comment">//长度为８，二进制保存，前面用0补充</span></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"100101"</span>;</span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;10&gt; <span class="title">bitset3</span><span class="params">(s)</span></span>;<span class="comment">//长度为10，前面用0补充</span></span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"10101"</span>;</span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;13&gt; <span class="title">bitset4</span><span class="params">(s2)</span></span>;<span class="comment">//长度为13，前面用0补充</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;3&gt; <span class="title">bitset5</span><span class="params">(<span class="string">"1100011"</span>)</span></span>; <span class="comment">// 当位数不够时候，只取前面的</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0000</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset2 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//00001100</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset3 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0000100101</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset4 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0000000010101</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset5 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//110</span></span><br></pre></td></tr></table></figure></p><p>修改器<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;4&gt; <span class="title">foo</span> <span class="params">(<span class="built_in">string</span>(<span class="string">"1001"</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;4&gt; <span class="title">bar</span> <span class="params">(<span class="built_in">string</span>(<span class="string">"0011"</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo^=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 1010 (foo对bar按位异或后赋值给foo)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 0010 (按位与后赋值给foo)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo|=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 0011 (按位或后赋值给foo)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&lt;&lt;=<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 1100 (左移２位，低位补0，有自身赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&gt;&gt;=<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0110 (右移１位，高位补0，有自身赋值)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (~bar) &lt;&lt; <span class="built_in">endl</span>;           <span class="comment">// 1100 (按位取反)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bar&lt;&lt;<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;         <span class="comment">// 0110 (左移，不赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bar&gt;&gt;<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;         <span class="comment">// 0001 (右移，不赋值)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo==bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// false (0110==0011为false)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo!=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// true  (0110!=0011为true)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&amp;bar) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0010 (按位与，不赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo|bar) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0111 (按位或，不赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo^bar) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0101 (按位异或，不赋值)</span></span><br></pre></td></tr></table></figure></p><p>元素访问 test顺带检查了是否合法下标<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似数组，通过[]访问，下标从0开始。也可以修改</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;4&gt; <span class="title">foo</span> <span class="params">(<span class="string">"1011"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0</span></span><br></pre></td></tr></table></figure></p><p>一些常用函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">foo</span> <span class="params">(<span class="string">"10011011"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.count() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//5　　（count函数用来求bitset中1的位数，foo中共有5个1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.size() &lt;&lt; <span class="built_in">endl</span>;　　 <span class="comment">//8　　（size函数用来求bitset的大小，一共有8位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.test(<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//true　　（test函数用来查下标处的元素是0还是1，并返回false或true，此处foo[0]为1，返回true</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.test(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//false　　（同理，foo[2]为0，返回false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.any() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//true　　（any函数检查bitset中是否有１</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.none() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//false　　（none函数检查bitset中是否没有１</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.all() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//false　　（all函数检查bitset中是全部为１</span></span><br></pre></td></tr></table></figure></p><p>常见类型转换函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">foo</span> <span class="params">(<span class="string">"10011011"</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> s = foo.to_string();　　<span class="comment">//将bitset转换成string类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> a = foo.to_ulong();　　<span class="comment">//将bitset转换成unsigned long类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> b = foo.to_ullong();　　<span class="comment">//将bitset转换成unsigned long long类型</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//10011011</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//155</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//155</span></span><br></pre></td></tr></table></figure></p><ul><li>set 将位置设置为1</li><li>reset 将位置设置为0</li><li>flip 翻转位，即更改 true 值为 false 并更改 false 值为 true 。等价于在 bitset 一部分或全体上的逻辑非。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; b.size(); i += <span class="number">2</span>) &#123;</span><br><span class="line">    b.<span class="built_in">set</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">/*10101010*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;4&gt; b;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.flip(<span class="number">0</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.flip(<span class="number">2</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.flip() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">/*0000</span></span><br><span class="line"><span class="comment">0001</span></span><br><span class="line"><span class="comment">0101</span></span><br><span class="line"><span class="comment">1010*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; <span class="title">b</span><span class="params">(<span class="number">42</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Bitset is         "</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">b.reset(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.reset(1): "</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">b.reset();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.reset():  "</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Bitset is         00101010</span></span><br><span class="line"><span class="comment">After b.reset(1): 00101000</span></span><br><span class="line"><span class="comment">After b.reset():  00000000*/</span></span><br></pre></td></tr></table></figure><p>函数汇总<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;MAXN&gt; bt; <span class="comment">//  bt 包括 MAXN 位，下标 0 ~ MAXN - 1，默认初始化为 0 </span></span><br><span class="line">bt.any()        <span class="comment">//  bt 中是否存在置为 1 的二进制位？</span></span><br><span class="line">bt.none()       <span class="comment">//  bt 中不存在置为 1 的二进制位吗？</span></span><br><span class="line">bt.count()      <span class="comment">//  bt 中置为 1 的二进制位的个数</span></span><br><span class="line">bt.size()       <span class="comment">//  bt 中二进制位的个数</span></span><br><span class="line">bt[pos]         <span class="comment">//  访问 bt 中在 pos 处的二进制位</span></span><br><span class="line">bt.test(pos)    <span class="comment">//  bt 中在 pos 处的二进制位是否为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>()        <span class="comment">//  把 bt 中所有二进制位都置为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>(pos)     <span class="comment">//  把 bt 中在 pos 处的二进制位置为 1</span></span><br><span class="line">bt.reset()      <span class="comment">//  把 bt 中所有二进制位都置为 0</span></span><br><span class="line">bt.reset(pos)   <span class="comment">//  把 bt 中在pos处的二进制位置为0</span></span><br><span class="line">bt.flip()       <span class="comment">//  把 bt 中所有二进制位逐位取反</span></span><br><span class="line">bt.flip(pos)    <span class="comment">//  把 bt 中在 pos 处的二进制位取反</span></span><br><span class="line">bt[pos].flip()  <span class="comment">//  同上</span></span><br><span class="line">bt.to_ulong()   <span class="comment">//  用 bt 中同样的二进制位返回一个 unsigned long 值</span></span><br><span class="line">os &lt;&lt; bt        <span class="comment">//  把 bt 中的位集输出到 os 流</span></span><br></pre></td></tr></table></figure></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了bitset的学习&lt;/center&gt;</summary>
    
    
    
    <category term="STL" scheme="http://yoursite.com/categories/STL/"/>
    
    
    <category term="STL" scheme="http://yoursite.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>LCS的一些应用</title>
    <link href="http://yoursite.com/2020/07/06/LCS/"/>
    <id>http://yoursite.com/2020/07/06/LCS/</id>
    <published>2020-07-06T10:20:15.000Z</published>
    <updated>2020-07-06T07:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="喜闻乐见的-n-2-算法"><a href="#喜闻乐见的-n-2-算法" class="headerlink" title="喜闻乐见的 $n^2$ 算法:"></a>喜闻乐见的 $n^2$ 算法:</h3><p>不妨设 $dp[i][j]$ 表示第一个串 $s$ 的前 $i$ 位，第二个串 $t$ 的前 $j$ 位的 $LCS$ 的长度，那么状态转移方程是：</p><script type="math/tex; mode=display">dp[i][j]\begin{cases}dp[i-1][j-1]+1  & \text{if s[i]=t[j]} \\max(dp[i-1][j],dp[i][j-1]) & \text{else}\end{cases}</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"> dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(s[i]==t[j])</span><br><span class="line">     dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n][m];</span><br></pre></td></tr></table></figure><h3 id="n-logn-的算法"><a href="#n-logn-的算法" class="headerlink" title="$n \ logn$的算法"></a>$n \ logn$的算法</h3><p>因为可以转化为最长递增子序列问题，所以这样复杂度是可行的。</p><p><a href="https://www.luogu.com.cn/problem/P1439" target="_blank" rel="noopener">洛谷全排列LCS模板</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i] , pos[a[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos[b[i]] &gt; f[mx]) f[++mx] = pos[b[i]];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = mx, mid;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(f[mid] &gt; pos[b[i]]) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[l] = min(f[l], pos[b[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><p>算法可行性的证明：<br>样例：<br>s : 3 2 1 4 5 =&gt; a b c d e<br>t : 1 2 3 4 5 =&gt; c b a d e<br>如此，只要求出 $t$ 中的 $LIS$ 即可。</p><p><a href="https://vjudge.net/problem/UVA-10635" target="_blank" rel="noopener">nlogn求LCS问题</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =<span class="number">250</span>*<span class="number">250</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> s[maxn],g[maxn],d[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];<span class="comment">//num[x]为整数x的新编号，num[x]=0表示x没有在A中出现过、</span></span><br><span class="line"><span class="keyword">int</span> N,p,q,x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;p,&amp;q);</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            num[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            <span class="keyword">if</span>(num[x])</span><br><span class="line">                s[n++]=num[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求解s[0]...s[n-1]的LIS</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">           g[i]=inf;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=lower_bound(g+<span class="number">1</span>,g+n+<span class="number">1</span>,s[i])-g;<span class="comment">//在g[1]~g[n]中查找</span></span><br><span class="line">            d[i]=k;</span><br><span class="line">            g[k]=s[i];</span><br><span class="line">            ans=max(ans,d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++tt,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果给的序列不是全排列也问题不大。</p><p>对于序列A{},B{},我们可以记录下来B中的每个元素在A中出现的位置，按顺序保存在一个新序列当中，<br>如果有多个位置按倒序写，没有就不用写，然后对这个新序列求一个LIS就是两个序列的LCS长度。<br>证明算法可行性：<br>考虑，对于A序列，下标编号记为1—-n1，B和A的最长公共子序列在A中对应的编号肯定是递增的，</p><p>所以B中的这些元素对应的A的编号也是递增的，为了重复计算当有多个编号时倒序存入，表示只能选一个，尽管有多个编号但在B中这只是一个元素。</p><p>例子：<br>A={3,9,7,10,3}   B={5,3,7,3}<br>列出B对应的A中的编号(1—5)<br>5:无<br>3:1,5<br>7:3<br>3:1,5</p><p><a href="https://www.cnblogs.com/KYSpring/p/9021909.html" target="_blank" rel="noopener">参考博客</a><br><img src="/images/LCS_1.png" alt="nlogn求可重复最长公共子序列"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000+10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],dp[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;location[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> s1[maxn],s2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxn;++i)</span><br><span class="line">        a[i]=dp[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> i,j,k,w,ans,l,r,mid;</span><br><span class="line">    <span class="keyword">int</span> lena=<span class="built_in">strlen</span>(s1),lenb=<span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)location[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(i=lenb<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)location[s2[i]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,k=<span class="number">0</span>;s1[i];i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;location[w=s1[i]-<span class="string">'a'</span>].size();++j,++k)</span><br><span class="line">            a[k]=location[w][j];</span><br><span class="line">    dp[<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=ans=<span class="number">1</span>;i&lt;k;++i)&#123;</span><br><span class="line">        l=<span class="number">0</span>;r=ans;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dp[mid]&gt;=a[i])r=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r==ans)</span><br><span class="line">            ans++,dp[r+<span class="number">1</span>]=a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dp[r+<span class="number">1</span>]&gt;a[i])dp[r+<span class="number">1</span>]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2)!=EOF)LCS();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基于位运算的最长公共子序列"><a href="#基于位运算的最长公共子序列" class="headerlink" title="基于位运算的最长公共子序列"></a>基于位运算的最长公共子序列</h3><p>这个是零几年时候ioi集训队的题目。</p><p><a href="https://wenku.baidu.com/view/ed99e4f77c1cfad6195fa776.html" target="_blank" rel="noopener">研究报告</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from claris</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BIT = <span class="number">808</span>, E = <span class="number">62</span>;</span><br><span class="line"><span class="keyword">int</span> n1, n2, m, h, i, j, p, ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50000</span>], t[<span class="number">50000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Num</span> &#123;</span></span><br><span class="line">    ll x[BIT];</span><br><span class="line">    Num() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BIT; i++) x[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; x[p / E] |= <span class="number">1L</span>L &lt;&lt; (p % E); &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>&amp;(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] &amp; b.x[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>|(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] | b.x[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>^(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] ^ b.x[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>-(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] - b.x[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">if</span> (c.x[i] &lt; <span class="number">0</span>) c.x[i] += (<span class="number">1L</span>L &lt;&lt; E), c.x[i + <span class="number">1</span>]--;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll o = <span class="number">1</span>, p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; o = p, i++) &#123;</span><br><span class="line">            p = x[i] &amp; (<span class="number">1L</span>L &lt;&lt; h), (x[i] &lt;&lt;= <span class="number">1</span>) &amp;= ~(<span class="number">1L</span>L &lt;&lt; (h + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (o) x[i] |= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ap[<span class="number">4</span>], x, row[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'A'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'C'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %s %s"</span>, &amp;n1, &amp;n2, s, t);</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (m = (n1 - <span class="number">1</span>) / E, h = (m ? E : n1) - <span class="number">1</span>; i &lt; n1; i++)</span><br><span class="line">        ap[hash(s[i])].<span class="built_in">set</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">        p ^= <span class="number">1</span>;</span><br><span class="line">        x = ap[hash(t[i])] | row[p ^ <span class="number">1</span>];</span><br><span class="line">        row[p ^ <span class="number">1</span>].shl();</span><br><span class="line">        row[p] = x &amp; ((x - row[p ^ <span class="number">1</span>]) ^ x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = m; ~i; i--)</span><br><span class="line">        <span class="keyword">for</span> (j = h; ~j; j--)</span><br><span class="line">            <span class="keyword">if</span> (row[p].x[i] &amp; (<span class="number">1L</span>L &lt;&lt; j)) ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h3>]]></content>
    
    
    <summary type="html">&lt;center&gt;本文记录了LCS(最长公共子序列)的一些应用&lt;/center&gt;</summary>
    
    
    
    <category term="Dynamic Programming" scheme="http://yoursite.com/categories/Dynamic-Programming/"/>
    
    
    <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>dp计划1</title>
    <link href="http://yoursite.com/2020/03/30/dp1/"/>
    <id>http://yoursite.com/2020/03/30/dp1/</id>
    <published>2020-03-29T16:05:20.000Z</published>
    <updated>2021-02-18T04:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你能优化来我的人生吗？</p></blockquote> <font color="black" size="5" face="source code pro">已完成</font><font color="RED" size="5" face="source code pro">？/50</font><h2 id="CF446A-DZY-Loves-Sequences"><a href="#CF446A-DZY-Loves-Sequences" class="headerlink" title="CF446A - DZY Loves Sequences"></a>CF446A - DZY Loves Sequences</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给一个长度为 $n$ 的序列，最多可以修改一个位置的数，求最长连续上升子序列。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>当 $a<em>{i+1} &gt; a</em>{i-1}+2$ 时， 改变 $a_i$ 的值来使前后两段合并，反之，分别考虑$a_i$左边那段最长的和右边那段最长的。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], dp[N], l[N], r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i<span class="number">-1</span>]) dp[i] = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r[n] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i+<span class="number">1</span>]) r[i] = r[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> r[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tp = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= a[i<span class="number">-1</span>] + <span class="number">2</span>)&#123;</span><br><span class="line">            ans = max(ans , tp + r[i+<span class="number">1</span>] - i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ans = max(&#123;ans, tp, r[i+<span class="number">1</span>] - i + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CF4D-Mysterious-Present"><a href="#CF4D-Mysterious-Present" class="headerlink" title="CF4D - Mysterious Present"></a>CF4D - Mysterious Present</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给出n个信封，这n个信封有长和宽，给出卡片的尺寸，求取能够装入卡片的最长的序列，序列满足后一个的长和宽一定<code>大于</code>前一个（套娃），求最长的这个序列的长度。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>$dp[i] = \max_{j=0}^{j-1} { dp[j]+1 } , { a[j].w &lt; a[i].w \  \&amp;\&amp; \ a[j].h &lt; a[i].h }$</p><p>记个pre倒序输出答案。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w , h , id;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">int</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a , <span class="keyword">const</span> node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.w == b.w) <span class="keyword">return</span> a.h &lt; b.h;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n , h , w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; w &gt;&gt; h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].w &gt;&gt; a[i].h;</span><br><span class="line">        a[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">    vector&lt;int&gt; dp(n+10), pre(n+10);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].h &lt;= h || a[i].w &lt;= w) <span class="keyword">continue</span>;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].w &gt; a[j].w <span class="keyword">and</span> a[i].h &gt; a[j].h) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i] &lt; dp[j] + <span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i] = dp[j]+<span class="number">1</span>;</span><br><span class="line">                    pre[i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; dp[i]) &#123;</span><br><span class="line">            mx = dp[i];</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function&lt;<span class="keyword">void</span> (<span class="keyword">int</span> )&gt; dfs = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;</span><br><span class="line">        dfs(pre[x]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[x].id &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    dfs(pos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10<br>10 11 12 1 2 3 14 7 15 16</p><h2 id="串"><a href="#串" class="headerlink" title="串"></a><a href="https://ac.nowcoder.com/acm/contest/9981/A" target="_blank" rel="noopener">串</a></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>长度不超过n，且包含子序列“us”的、只由小写字母构成的字符串有多少个？ 答案对10^9+7 取模。<br>所谓子序列，指一个字符串删除部分字符（也可以不删）得到的字符串。<br>例如，”unoacscc”包含子序列”us”，但”scscucu”则不包含子序列”us”</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p> dp[i][0]无u</p><p> dp[i][1]有u无s</p><p> dp[i][2]有us</p><p>考虑状态转移。<br>$dp[i][0] = 25*dp[i-1][0]$ 最后有25种选择</p><p>$dp[i][1] = 25<em>dp[i-1][1]</em>25+dp[i][0]$前面有u的随意加，无u的加u</p><p>$dp[i][2] = dp[i-1][1]+dp[i-1][2]*26$ 有u的串最后一位加上s，加上之前us的串随意加</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="comment">// dp[i][0]无u</span></span><br><span class="line"><span class="comment">// dp[i][1]有u无s</span></span><br><span class="line"><span class="comment">// dp[i][2]有us</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ans = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">25</span>,dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,dp[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        add(dp[i][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">0</span>] * <span class="number">25</span> % mod);</span><br><span class="line">        add(dp[i][<span class="number">1</span>], (dp[i<span class="number">-1</span>][<span class="number">1</span>]*<span class="number">25</span>+dp[i<span class="number">-1</span>][<span class="number">0</span>])%mod);</span><br><span class="line">        add(dp[i][<span class="number">2</span>],(dp[i<span class="number">-1</span>][<span class="number">1</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>]*<span class="number">26</span>)%mod);</span><br><span class="line">        add(ans , dp[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cf-544-div-3-E-K-Balanced-Teams"><a href="#cf-544-div-3-E-K-Balanced-Teams" class="headerlink" title="cf#544 div.3-E. K Balanced Teams"></a><a href="https://codeforces.com/problemset/problem/1133/E" target="_blank" rel="noopener">cf#544 div.3-E. K Balanced Teams</a></h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, a[N], dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> zz = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[zz] &gt; a[i] + <span class="number">5</span>) zz--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[zz + <span class="number">1</span>][j - <span class="number">1</span>] + (zz + <span class="number">1</span> - i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="美团2017年CodeM大赛-初赛A轮-合并回文子串"><a href="#美团2017年CodeM大赛-初赛A轮-合并回文子串" class="headerlink" title="美团2017年CodeM大赛-初赛A轮-合并回文子串"></a><a href="https://ac.nowcoder.com/acm/problem/13230" target="_blank" rel="noopener">美团2017年CodeM大赛-初赛A轮-合并回文子串</a></h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>$a,b$ 两个串保持字符顺序不变组合成字符串$c$ ,求字符串 $c$ 可能形成的最长回文子串的长度。</p><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>区间dp。<br><a href="https://ac.nowcoder.com/discuss/391086" target="_blank" rel="noopener">官方题解</a><br>设 $f[l1][r1][l2][r2]$ 表示$A[l1] \sim A[r1]$ 和 $B[l2] \sim B[r2]$ 是否能合并成一个回文串。<br><img src="https://i.loli.net/2020/04/06/zcMgSkNnt9Dl53Q.png" alt="from：牛客 https://blog.nowcoder.net/n/51d6684184b64b1399859ad5a22cbb5f"><br>所以dp转移如图所示，</p><ul><li>$dp[l1][r1][l2][r2] |= dp[l1+1][r1-1][l2][r2];$</li><li>$dp[l1][r1][l2][r2] |= dp[l1+1][r1][l2][r2-1];$</li><li>$dp[l1][r1][l2][r2] |= dp[l1][r1][l2+1][r2-1];$</li><li>$dp[l1][r1][l2][r2] |= dp[l1][r1-1][l2+1][r2];$<br>需要注意的是，当两个串选出的字符只有一个时候，认为是可以构成回文串的。（边界条件）</li></ul><p>Complexity: $O(T\times n^4)$</p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn][maxn][maxn];</span><br><span class="line"><span class="comment">//区间dp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CASET &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp , <span class="number">0</span> , <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lena; i++) &#123;      <span class="comment">// a的长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= lenb; j++) &#123;  <span class="comment">// b的长度</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l1 = <span class="number">1</span>, r1 = l1 + i - <span class="number">1</span>; r1 &lt;= lena; l1++, r1++) &#123; <span class="comment">//枚举a的起点终点部分</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l2 = <span class="number">1</span>, r2 = l2 + j - <span class="number">1</span>; r2 &lt;= lenb; l2++, r2++) &#123; <span class="comment">//枚举b的起点终点部分</span></span><br><span class="line">                        <span class="keyword">if</span> (i + j &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                            dp[l1][r1][l2][r2] = <span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span>(a[l1]==a[r1]&amp;&amp;r1&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1+<span class="number">1</span>][r1<span class="number">-1</span>][l2][r2];</span><br><span class="line">                            <span class="keyword">if</span>(a[l1]==b[r2]&amp;&amp;r2&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1+<span class="number">1</span>][r1][l2][r2<span class="number">-1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(b[l2]==b[r2]&amp;&amp;r2&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1][r1][l2+<span class="number">1</span>][r2<span class="number">-1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(b[l2]==a[r1]&amp;&amp;r1&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1][r1<span class="number">-1</span>][l2+<span class="number">1</span>][r2];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (dp[l1][r1][l2][r2])</span><br><span class="line">                            ans = max(ans, r1 - l1 + r2 - l2 + <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2018年长沙理工大学程序设计竞赛-数学考试"><a href="#2018年长沙理工大学程序设计竞赛-数学考试" class="headerlink" title="2018年长沙理工大学程序设计竞赛-数学考试"></a><a href="https://ac.nowcoder.com/acm/problem/15553" target="_blank" rel="noopener">2018年长沙理工大学程序设计竞赛-数学考试</a></h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p>给定一个序列，选取两个不相交的长度为 k 的区间求和， MAX 这个和。</p><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p><a href="https://ac.nowcoder.com/discuss/392146" target="_blank" rel="noopener">nowcoder官方题解</a><br>前缀和+暴力dp<br>对序列求前缀和得到 $sum$ 。设 $dp1_i$表示位置$i$ 之前最大的区间和，$dp2_i$表示位置$i$之后最大区间和。线性更新一下就OK了。</p><p>Complexity: $O(T\times n)$</p><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn], dp1[maxn], dp2[maxn], sum[maxn], n, k, ans;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    CASET &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="built_in">memset</span>(dp1, <span class="number">0xcf</span>, <span class="keyword">sizeof</span> dp1);</span><br><span class="line">        <span class="built_in">memset</span>(dp2, <span class="number">0xcf</span>, <span class="keyword">sizeof</span> dp1);</span><br><span class="line">        ans = -linf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp1 之前一段的max  dp2 之后的一段</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k; i++) &#123;</span><br><span class="line">            dp1[i] = max(sum[i] - sum[i - k], dp1[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &gt;= k + <span class="number">1</span>; i--) &#123;</span><br><span class="line">            dp2[i] = max(sum[i + k - <span class="number">1</span>] - sum[i - <span class="number">1</span>], dp2[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k; i++) &#123;</span><br><span class="line">            ans = max(ans, dp1[i] + dp2[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>others 线段树：<a href="https://blog.nowcoder.net/n/7c67622afee94322af471bf99ff6ed6b" target="_blank" rel="noopener">博客</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll sum[<span class="number">422222</span>],a[<span class="number">422222</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p,l,r;</span><br><span class="line">    ll ma;</span><br><span class="line">&#125;;</span><br><span class="line">stree t[<span class="number">800020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;        <span class="comment">//递归建立线段树</span></span><br><span class="line">    t[p].l=l,t[p].r=r;                <span class="comment">//线段树的区间左端点和右端点赋值。</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;t[p].ma=a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);                <span class="comment">//递归左儿子</span></span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);            <span class="comment">//递归右儿子</span></span><br><span class="line">    t[p].ma=max(t[<span class="number">2</span>*p].ma,t[<span class="number">2</span>*p+<span class="number">1</span>].ma);    <span class="comment">//区间最大值赋值。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;    <span class="comment">//在节点p对应区间找原数组里l到r的最大值</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;=l&amp;&amp;t[p].r&lt;=r)<span class="keyword">return</span> t[p].ma;    <span class="comment">//若p对应区间被包含在[l,r]区间里，则直接返回。</span></span><br><span class="line">    <span class="keyword">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ma=<span class="number">-1e18</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)ma=max(ma,ask(p*<span class="number">2</span>,l,r));    <span class="comment">//递归找左节点</span></span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)ma=max(ma,ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r));    <span class="comment">//递归找右节点</span></span><br><span class="line">    <span class="keyword">return</span> ma;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,k,i,x;</span><br><span class="line">        ll s=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            s+=x;</span><br><span class="line">            sum[i]=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n-k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            a[i]=sum[i+k<span class="number">-1</span>]-sum[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n-k+<span class="number">1</span>);</span><br><span class="line">        ll ma=<span class="number">-1e18</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>*k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            ma=max(ma,a[i]+ask(<span class="number">1</span>,i+k,n-k+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ma&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="expansion"><a href="#expansion" class="headerlink" title="expansion"></a>expansion</h3><ol><li>不限制长度—在一个数列里找两个不相交区间使得他们权值和最大</li><li>区间数目变多—找 $m$ 个长度为 $k$ 的不相交区间使得他们的权值和最大 $(1\leq n \leq 5000)$</li><li>区间数目变多且不限制长度—找 $m$ 个不相交长度不限的区间使他们的权值和最大 $(1\leq n \leq 5000)$</li></ol><p><a href="https://ac.nowcoder.com/discuss/392146" target="_blank" rel="noopener">官方</a></p><p>some ideas:<br>bonus1: 设 $f<em>i$表示前 $[1,i]$ 的最大子段和， $g_i$表示 $[i,n]$ 的最大子段和。那么有$ans = \mathbb {MAX}{ f_i+g</em>{i+1}}$<br>bonus2: 设 $f<em>{i,j}$ 表示前 $i$ 个数， 分成$j$ 段长度为 $k$ 的连续子段的最大值，那么有转移方程: $f</em>{i,j} = \mathbb{MAX} (f<em>{i-1,j} \ , f</em>{i-k,j-1}+s<em>i-s</em>{i-k})$<br>bonus3: 设$f_{i,j,0/1}$ 表示前 $i$ 个数，分成 $j$ 段，第 $i$个不选/选的最大值，考虑第 $i$ 个是不是新开一段。于是有以下的转移方程。</p><script type="math/tex; mode=display">\begin{cases}f_{i,j,0}=max(f_{i-1,j,0},f_{i-1,j,1})\\f_{i,j,1}=max(f_{i-1,j,1},f_{i-1,j-1,1},f_{i-1,j-1,0})+a_i\\\end{cases}</script><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><h2 id="Codeforces-Round-635-Div-2-E-Kaavi-and-Magic-Spell"><a href="#Codeforces-Round-635-Div-2-E-Kaavi-and-Magic-Spell" class="headerlink" title="Codeforces Round #635 (Div. 2)-E. Kaavi and Magic Spell"></a><a href="https://codeforces.com/contest/1337/problem/E" target="_blank" rel="noopener">Codeforces Round #635 (Div. 2)-E. Kaavi and Magic Spell</a></h2><h3 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h3><p>给定一个长度为 $n$ 的字符串 $S$ 和一个长度为 $m$ 的字符串$T$, 有 $1\le m \le n$,开始有一个空串 $A$, 接下来对 $S$ 串进行 n 次操作：</p><ol><li>把 S 的首字符加到 A 的开头</li><li>把 S 的首字符加到 A 的结尾<br>问在操作过程中使得 A 的前 m 个字符为 字符串 T 的方案数。认为长度不同或者是操作序列中有某个地方不同是不同情况。</li></ol><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution:"></a>Solution:</h3><p>区间 $DP$。<br>不妨假设 $T$ 串为 “asd”<br>$A$ 串为”asd<strong><em>*</em></strong>(补到与S串等长)”<br>定义 $dp[l][r]$ 为满足 $\forall \ l \le i \le r, S_i=T_i$能构造出来的操作序列。<br>假设删除$S_i$往 $A$ 里添加（此时$A$有$i-1$个元素），考虑状态转移方程。<br>考虑两个东西： $dp[l][r]$和$r-l+1=i$ </p><ul><li>如果有$S_i=T_l$ 那么就把 $S_i$放到$[l+1,r]$区间的前面，构成$[l,r]$ 即有$dp[l][r]+=dp[l+1][r]$</li><li>如果有$S_i=T_r$ 那么就把 $S_i$放到$[l,r-1]$区间的后面，构成$[l,r]$ 即有$dp[l][r]+=dp[l][r-1]$</li></ul><p>初始化状态：区间长度为 1 时如果有字符相等那么就会存在$dp[i][i] += dp[i][i-1]$的情况，对于这种情况其实就是单个字符$S_i$在空串基础上前插或后插后成为了符合条件的串之一，实际上应该是$dp[i][i] += 1$，所以我们就预处理一下使$ dp[i][i-1] = 1 $即可。</p><p>统计答案：即 统计 A 的前缀部分 $ans=\sum_{i=m}^ndp[1][i]$</p><h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line">ll dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    a += b;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= mod) a -= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s + <span class="number">1</span> &gt;&gt; t + <span class="number">1</span>;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">10</span>; i++) &#123;</span><br><span class="line">        dp[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = <span class="number">1</span>; i &lt;= n; i++, len++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>;; l++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(r &gt; n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; m || s[i] == t[l]) &#123;</span><br><span class="line">                add(dp[l][r], dp[l + <span class="number">1</span>][r]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; m || s[i] == t[r]) &#123;</span><br><span class="line">                add(dp[l][r], dp[l][r - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= m; i--) &#123;</span><br><span class="line">        add(ans, dp[<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><h2 id="EDU59-E-Vasya-and-Binary-String"><a href="#EDU59-E-Vasya-and-Binary-String" class="headerlink" title="EDU59-E. Vasya and Binary String"></a><a href="https://codeforces.com/contest/1107/problem/E" target="_blank" rel="noopener">EDU59-E. Vasya and Binary String</a></h2><h3 id="Description：-1"><a href="#Description：-1" class="headerlink" title="Description："></a>Description：</h3><p>给个长度为 $n (n\le100)$ 的 $01$ 串 $s$ ,以及长度为 $n$ 数组 $a$.每次可以选择任意长度 $L$ 的连续子串（要求子串每个字符相同）从原串中去掉，并获得 $a[L]$ 的值。问可能获得的最大值</p><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution:"></a>Solution:</h3><p>观察数据范围，考虑到用区间 $dp$。<br>令$dp[ l ][ r ][ k ] $代表的是 $[l, r]$这段区间内，前面有 $k-1$ 个连续的和 $s[l]$ 相同且连续的字符传进来的最大值。<br>$solve( l, r, k)$ 代表的是处理区间$[L, R]$, 正在处理 $[L, R]$这个区间， 前面有$k-1$个连续的和$s[l]$相同且连续的字符。<br>考虑转移状态方程：<br>$dp[l][r][k] = a[k] + solve(l+1,r,1)$。 在 $l$ 这个位置切断连续字符。<br>$dp[l][r][k] = solve( l+1, i-1, 1) + solve(i, r, k+1)$  其中 $s[l] == s[i]$  加入新的连续字符。</p><h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">201</span> + <span class="number">10</span>;</span><br><span class="line">ll n, a[N], dp[N][N][N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> a[k];</span><br><span class="line">    ll &amp;ret = dp[l][r][k];</span><br><span class="line">    <span class="keyword">if</span> (ret) <span class="keyword">return</span> ret;</span><br><span class="line">    ret = a[k] + solve(l + <span class="number">1</span>, r, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[l]) &#123;</span><br><span class="line">            ret = max(ret, solve(i, r, k + <span class="number">1</span>) + solve(l + <span class="number">1</span>, i - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solve(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Beautiful-Mirrors"><a href="#Beautiful-Mirrors" class="headerlink" title="Beautiful Mirrors"></a>Beautiful Mirrors</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>魔镜魔镜我美嘛easy版本，一个人问魔镜他美嘛，魔镜会有$p_i$ %d 概率说他美，他美就会开心，否则不开心，回到第一天，求开心的期望天数。</p><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>概率求期望题目<br>不妨设 dp[i] 表示第i到 n+1 天期望步数。那么有 dp[n+1] = 0<br>则有：</p><script type="math/tex; mode=display">\begin{cases}dp_1=1+p_1\cdot dp_2+ (1-p_1)\cdot dp_1 \\ dp_2=1+p_2\cdot dp_3+ (1-p_2)\cdot dp_1 \\\cdots\\dp_n=1+p_n\cdot dp_{n+1}+(1-p_n)dp_1\end{cases}</script><p>求解得到：</p><script type="math/tex; mode=display">\begin{cases}dp_1=dp_2+\frac{1}{p_1} \\ dp_1=dp_3+\frac{1}{p_2}+\frac{1}{p2\cdot p1} \\\cdots\\dp_1=dp_{n+1}+\frac{1}{p_n}+\frac{1}{p_n\cdot p_{n-1}}+\cdots +\frac{1}{p_n\cdot p_{n-1}\cdots p_1}\end{cases}</script><p>推得：<br>$dp<em>1=\frac{1+p_1+p_1p_2+\cdots p_1p_2\cdots p</em>{n-1}}{p_1p_2\cdots p_n}$</p><h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ll dp[maxn], a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>, n, x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ll inv = get_inv(<span class="number">100</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        a[i] = x * inv % mod;</span><br><span class="line">        b[i] = get_inv(a[i], mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>] + <span class="number">1</span>) * b[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Beautiful-Mirrors-with-queries"><a href="#Beautiful-Mirrors-with-queries" class="headerlink" title="Beautiful Mirrors with queries"></a><a href="https://codeforces.com/contest/1264/problem/C" target="_blank" rel="noopener">Beautiful Mirrors with queries</a></h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>在上题的基础上，要求的是回到 $u$ 。</p><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>考虑$[L , R], ans = \frac{1+p<em>l+p_lp</em>{l+1}\cdots +(p<em>l\cdots p_r)}{p_lp</em>{l+1}\cdots p_r}$<br>对于求这个，考虑:<br>定义 $s_i=p_ip_2\cdots p_i,t_i=p_1+p_1\cdot p_2+\cdots + p_1 p_2\cdots p_i$</p><p>维护前缀积和累和<br>$ans=\frac{A}{B}, A=\frac{t<em>{r-1}-r</em>{l-2}}{s<em>{l-2}}, B=\frac{s_r}{r</em>{l-1}}$</p><h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;ll&gt; S;</span><br><span class="line"><span class="keyword">int</span> n, q, v[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn], inv[maxn], s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">1</span>) &#123;</span><br><span class="line">        ll A = (t[r - <span class="number">1</span>] + <span class="number">1</span>) % mod;</span><br><span class="line">        ll B = s[r] % mod;</span><br><span class="line">        <span class="keyword">return</span> A * get_inv(B, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ll A = (t[r - <span class="number">1</span>] - t[l - <span class="number">2</span>] + mod) % mod * get_inv(s[l - <span class="number">1</span>], mod) % mod;</span><br><span class="line">    ll B = s[r] * get_inv(s[l - <span class="number">1</span>], mod) % mod;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "A == " &lt;&lt; A &lt;&lt; "  B === " &lt;&lt; B &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> A * get_inv(B, mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    S.insert(<span class="number">1</span>);</span><br><span class="line">    S.insert(n + <span class="number">1</span>);</span><br><span class="line">    v[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> inv100 = get_inv(<span class="number">100</span>, mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        p[i] = p[i] * inv100 % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">1</span>, t[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] * p[i] % mod;</span><br><span class="line">        t[i] = (t[i - <span class="number">1</span>] + s[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = query(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (v[x]) &#123;</span><br><span class="line">            v[x] = <span class="number">0</span>;</span><br><span class="line">            S.erase(x);</span><br><span class="line">            <span class="keyword">auto</span> L = S.lower_bound(x);</span><br><span class="line">            <span class="comment">// auto L = lower_bound(ALL(S),x);</span></span><br><span class="line">            <span class="keyword">auto</span> R = L;</span><br><span class="line">            L--;</span><br><span class="line">            <span class="comment">// ans = (ans + query(*L, *R - 1)) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans - query(*L, x - 1) + mod) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans - query(x, *R - 1) + mod) % mod;</span></span><br><span class="line">            add(ans, query(*L, *R - <span class="number">1</span>));</span><br><span class="line">            dec(ans, query(*L, x - <span class="number">1</span>));</span><br><span class="line">            dec(ans, query(x, *R - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// auto L = lower_bound(ALL(S),x);</span></span><br><span class="line">            <span class="keyword">auto</span> L = S.lower_bound(x);</span><br><span class="line">            <span class="keyword">auto</span> R = L;</span><br><span class="line">            L--;</span><br><span class="line">            <span class="comment">// ans = (ans - query(*L, *R - 1) + mod) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans + query(*L, x - 1)) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans + query(x, *R - 1)) % mod;</span></span><br><span class="line">            dec(ans, query(*L, *R - <span class="number">1</span>));</span><br><span class="line">            add(ans, query(*L, x - <span class="number">1</span>));</span><br><span class="line">            add(ans, query(x, *R - <span class="number">1</span>));</span><br><span class="line">            S.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><h3 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h3><h2 id="-4"><a href="#-4" class="headerlink" title=" "></a> </h2><h3 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h3><h2 id="-5"><a href="#-5" class="headerlink" title=" "></a> </h2><h3 id="Description-13"><a href="#Description-13" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-15"><a href="#Code-15" class="headerlink" title="Code"></a>Code</h3><h2 id="-6"><a href="#-6" class="headerlink" title=" "></a> </h2><h3 id="Description-14"><a href="#Description-14" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-16"><a href="#Code-16" class="headerlink" title="Code"></a>Code</h3><h2 id="-7"><a href="#-7" class="headerlink" title=" "></a> </h2><h3 id="Description-15"><a href="#Description-15" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-17"><a href="#Code-17" class="headerlink" title="Code"></a>Code</h3><h2 id="-8"><a href="#-8" class="headerlink" title=" "></a> </h2><h3 id="Description-16"><a href="#Description-16" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-18"><a href="#Code-18" class="headerlink" title="Code"></a>Code</h3><h2 id="-9"><a href="#-9" class="headerlink" title=" "></a> </h2><h3 id="Description-17"><a href="#Description-17" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-19"><a href="#Code-19" class="headerlink" title="Code"></a>Code</h3><h2 id="-10"><a href="#-10" class="headerlink" title=" "></a> </h2><h3 id="Description-18"><a href="#Description-18" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-20"><a href="#Solution-20" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-20"><a href="#Code-20" class="headerlink" title="Code"></a>Code</h3><h2 id="-11"><a href="#-11" class="headerlink" title=" "></a> </h2><h3 id="Description-19"><a href="#Description-19" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-21"><a href="#Solution-21" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-21"><a href="#Code-21" class="headerlink" title="Code"></a>Code</h3><h2 id="-12"><a href="#-12" class="headerlink" title=" "></a> </h2><h3 id="Description-20"><a href="#Description-20" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-22"><a href="#Solution-22" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-22"><a href="#Code-22" class="headerlink" title="Code"></a>Code</h3><h2 id="-13"><a href="#-13" class="headerlink" title=" "></a> </h2><h3 id="Description-21"><a href="#Description-21" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-23"><a href="#Solution-23" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-23"><a href="#Code-23" class="headerlink" title="Code"></a>Code</h3><h2 id="-14"><a href="#-14" class="headerlink" title=" "></a> </h2><h3 id="Description-22"><a href="#Description-22" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-24"><a href="#Solution-24" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-24"><a href="#Code-24" class="headerlink" title="Code"></a>Code</h3><h2 id="-15"><a href="#-15" class="headerlink" title=" "></a> </h2><h3 id="Description-23"><a href="#Description-23" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-25"><a href="#Solution-25" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-25"><a href="#Code-25" class="headerlink" title="Code"></a>Code</h3><h2 id="-16"><a href="#-16" class="headerlink" title=" "></a> </h2><h3 id="Description-24"><a href="#Description-24" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-26"><a href="#Solution-26" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-26"><a href="#Code-26" class="headerlink" title="Code"></a>Code</h3><h2 id="-17"><a href="#-17" class="headerlink" title=" "></a> </h2><h3 id="Description-25"><a href="#Description-25" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-27"><a href="#Solution-27" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-27"><a href="#Code-27" class="headerlink" title="Code"></a>Code</h3><h2 id="-18"><a href="#-18" class="headerlink" title=" "></a> </h2><h3 id="Description-26"><a href="#Description-26" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-28"><a href="#Solution-28" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-28"><a href="#Code-28" class="headerlink" title="Code"></a>Code</h3><h2 id="-19"><a href="#-19" class="headerlink" title=" "></a> </h2><h3 id="Description-27"><a href="#Description-27" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-29"><a href="#Solution-29" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-29"><a href="#Code-29" class="headerlink" title="Code"></a>Code</h3><h2 id="-20"><a href="#-20" class="headerlink" title=" "></a> </h2><h3 id="Description-28"><a href="#Description-28" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-30"><a href="#Solution-30" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-30"><a href="#Code-30" class="headerlink" title="Code"></a>Code</h3><h2 id="-21"><a href="#-21" class="headerlink" title=" "></a> </h2><h3 id="Description-29"><a href="#Description-29" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-31"><a href="#Solution-31" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-31"><a href="#Code-31" class="headerlink" title="Code"></a>Code</h3><h2 id="-22"><a href="#-22" class="headerlink" title=" "></a> </h2><h3 id="Description-30"><a href="#Description-30" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-32"><a href="#Solution-32" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-32"><a href="#Code-32" class="headerlink" title="Code"></a>Code</h3><h2 id="-23"><a href="#-23" class="headerlink" title=" "></a> </h2><h3 id="Description-31"><a href="#Description-31" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-33"><a href="#Solution-33" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-33"><a href="#Code-33" class="headerlink" title="Code"></a>Code</h3><h2 id="-24"><a href="#-24" class="headerlink" title=" "></a> </h2><h3 id="Description-32"><a href="#Description-32" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-34"><a href="#Solution-34" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-34"><a href="#Code-34" class="headerlink" title="Code"></a>Code</h3><h2 id="-25"><a href="#-25" class="headerlink" title=" "></a> </h2><h3 id="Description-33"><a href="#Description-33" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-35"><a href="#Solution-35" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-35"><a href="#Code-35" class="headerlink" title="Code"></a>Code</h3><h2 id="-26"><a href="#-26" class="headerlink" title=" "></a> </h2><h3 id="Description-34"><a href="#Description-34" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-36"><a href="#Solution-36" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-36"><a href="#Code-36" class="headerlink" title="Code"></a>Code</h3><h2 id="-27"><a href="#-27" class="headerlink" title=" "></a> </h2><h3 id="Description-35"><a href="#Description-35" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-37"><a href="#Solution-37" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-37"><a href="#Code-37" class="headerlink" title="Code"></a>Code</h3><h2 id="-28"><a href="#-28" class="headerlink" title=" "></a> </h2><h3 id="Description-36"><a href="#Description-36" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-38"><a href="#Solution-38" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-38"><a href="#Code-38" class="headerlink" title="Code"></a>Code</h3><h2 id="-29"><a href="#-29" class="headerlink" title=" "></a> </h2><h3 id="Description-37"><a href="#Description-37" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-39"><a href="#Solution-39" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-39"><a href="#Code-39" class="headerlink" title="Code"></a>Code</h3><h2 id="-30"><a href="#-30" class="headerlink" title=" "></a> </h2><h3 id="Description-38"><a href="#Description-38" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-40"><a href="#Solution-40" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-40"><a href="#Code-40" class="headerlink" title="Code"></a>Code</h3><h2 id="-31"><a href="#-31" class="headerlink" title=" "></a> </h2><h3 id="Description-39"><a href="#Description-39" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-41"><a href="#Solution-41" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-41"><a href="#Code-41" class="headerlink" title="Code"></a>Code</h3><h2 id="-32"><a href="#-32" class="headerlink" title=" "></a> </h2><h3 id="Description-40"><a href="#Description-40" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-42"><a href="#Solution-42" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-42"><a href="#Code-42" class="headerlink" title="Code"></a>Code</h3><h2 id="-33"><a href="#-33" class="headerlink" title=" "></a> </h2><h3 id="Description-41"><a href="#Description-41" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-43"><a href="#Solution-43" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-43"><a href="#Code-43" class="headerlink" title="Code"></a>Code</h3><h2 id="-34"><a href="#-34" class="headerlink" title=" "></a> </h2><h3 id="Description-42"><a href="#Description-42" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-44"><a href="#Solution-44" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-44"><a href="#Code-44" class="headerlink" title="Code"></a>Code</h3><h2 id="-35"><a href="#-35" class="headerlink" title=" "></a> </h2><h3 id="Description-43"><a href="#Description-43" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-45"><a href="#Solution-45" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-45"><a href="#Code-45" class="headerlink" title="Code"></a>Code</h3><h2 id="-36"><a href="#-36" class="headerlink" title=" "></a> </h2><h3 id="Description-44"><a href="#Description-44" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-46"><a href="#Solution-46" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-46"><a href="#Code-46" class="headerlink" title="Code"></a>Code</h3><h2 id="-37"><a href="#-37" class="headerlink" title=" "></a> </h2><h3 id="Description-45"><a href="#Description-45" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-47"><a href="#Solution-47" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-47"><a href="#Code-47" class="headerlink" title="Code"></a>Code</h3><h2 id="-38"><a href="#-38" class="headerlink" title=" "></a> </h2><h3 id="Description-46"><a href="#Description-46" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-48"><a href="#Solution-48" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-48"><a href="#Code-48" class="headerlink" title="Code"></a>Code</h3><h2 id="-39"><a href="#-39" class="headerlink" title=" "></a> </h2><h3 id="Description-47"><a href="#Description-47" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-49"><a href="#Solution-49" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-49"><a href="#Code-49" class="headerlink" title="Code"></a>Code</h3><h2 id="-40"><a href="#-40" class="headerlink" title=" "></a> </h2><h3 id="Description-48"><a href="#Description-48" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-50"><a href="#Solution-50" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-50"><a href="#Code-50" class="headerlink" title="Code"></a>Code</h3><h2 id="-41"><a href="#-41" class="headerlink" title=" "></a> </h2><h3 id="Description-49"><a href="#Description-49" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-51"><a href="#Solution-51" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-51"><a href="#Code-51" class="headerlink" title="Code"></a>Code</h3>]]></content>
    
    
    <summary type="html">&lt;center&gt;DP 50 刷! farm!!&lt;/center&gt;</summary>
    
    
    
    <category term="farm plz!" scheme="http://yoursite.com/categories/farm-plz/"/>
    
    
    <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
</feed>
