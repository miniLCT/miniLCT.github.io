<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>今日校园自动签到</title>
    <url>/2021/01/17/campushoy-auto-clock-in/</url>
    <content><![CDATA[<h1 id="今日校园自动签到"><a href="#今日校园自动签到" class="headerlink" title="今日校园自动签到"></a>今日校园自动签到</h1><p>参考了<a href="https://github.com/ZimoLoveShuang/auto-submit" target="_blank" rel="noopener">大佬</a></p>
<p>适配了长春理工大学计算机科学技术学院18级同学的签到。<a href="https://github.com/miniLCT/campushoy-auto-clock-in" target="_blank" rel="noopener">传送门</a></p>
<p>有任何问题可以联系我： minilct@qq.com</p>
<h1 id="食用姿势"><a href="#食用姿势" class="headerlink" title="食用姿势"></a>食用姿势</h1><h2 id="clone-或者-下载-此仓库到本地"><a href="#clone-或者-下载-此仓库到本地" class="headerlink" title="clone 或者 下载 此仓库到本地"></a>clone 或者 下载 此仓库到本地</h2><blockquote>
<p>git clone <a href="https://github.com/miniLCT/campushoy-auto-clock-in.git" target="_blank" rel="noopener">https://github.com/miniLCT/campushoy-auto-clock-in.git</a></p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>编辑cofig.yml,编辑以下内容</p>
<blockquote>
<p>1.#username 学号或者工号<br>填写今日校园学号</p>
<p>2.#password 密码<br>填写今日校园的密码</p>
<p>3.#address 地址，定位信息<br>address:  以前你签到时候的地址信息，比如 中国四川省成都市金牛区一环路北xx段-xx号-附xx号</p>
<p>4.#school 学校全称<br>school: 长春理工大学</p>
<p>5.#KEY Qmsg的KEY<br>key:  #提醒用，可以没有 </p>
<p>6.#lon 当前位置经度，可以访问<a href="http://zuobiao.ay800.com/s/27/index.php获取" target="_blank" rel="noopener">http://zuobiao.ay800.com/s/27/index.php获取</a><br>lon: #写经度</p>
<p>7.#lat 纬度<br>lat:  #写维度</p>
<p>8.实际上 填好表达必填项便可适配其他没被禁止的高校了？<br>defaults:</p>
<pre><code>#表单默认选项配置，按顺序，注意，只有标必填项的才处理
- default:
    #表单项类型，对应今日校园接口返回的fieldType字段，1代表文本，2代表单选，3代表多选，4代表图片
    type: 2
    #表单项标题
    title: 
    #表单项默认值
    value: 否
</code></pre></blockquote>
<h2 id="上传到腾讯云云函数"><a href="#上传到腾讯云云函数" class="headerlink" title="上传到腾讯云云函数"></a>上传到腾讯云云函数</h2><ul>
<li><p>进入<a href="https://console.cloud.tencent.com/scf/index?rid=1" target="_blank" rel="noopener">腾讯云函数</a>，注册认证后，进入控制台，点击左边的层，然后点新建，名称随意，然后点击上传zip，选择仓库种的<code>dependency.zip</code>上传，然后选择运行环境<code>python3.6</code>，然后点击确定，等待依赖包上传。<br><img src="/fujian/campushoy/ed6044e6.png" alt="新建腾讯云函数依赖"></p>
</li>
<li><p>点左边的函数服务，新建云函数，名称随意，运行环境选择<code>python3.6</code>，创建方式选择空白函数，然后点击下一步<br><img src="/fujian/campushoy/a971478e.png" alt="新建腾讯云函数"></p>
</li>
</ul>
<ul>
<li><p>提交方法选择在线编辑，把本地修改好的<code>index.py</code>直接全文复制粘贴到云函数的<code>index.py</code>，然后点击文件-&gt;新建，文件名命名为<code>config.yml</code>，然后把本地配置好的<code>config.yml</code>文件中的内容直接全文复制粘贴到云函数的<code>config.yml</code>文件，点击下面的高级设置，设置超时时间为<code>60秒</code>，添加层为刚刚新建的函数依赖层，然后点击完成。（如果新版很慢打不开用旧版编辑上传也行）<br><img src="/fujian/campushoy/1aa80c41.png" alt="配置腾讯云函数"></p>
</li>
<li><p>进入新建好的云函数，左边点击触发管理，点击创建触发器，名称随意，触发周期选择自定义，然后配置cron表达式，由于我校是0点4分开启签到，所以编写如下cron表达式表示每天0点10分开始签到。</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 10 0 * * * *</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后就可以测试云函数了，绿色代表云函数执行成功，红色代表云函数执行失败（失败的原因大部分是由于依赖造成的）。返回结果是<code>success.</code>，代表自动提交成功，如遇到问题，仔细查看日志。</p>
</li>
<li><p>也可配合Windows计划任务或者使用linux定时任务，将脚本挂在自己的云服务器上。</p>
</li>
<li><p><strong>如此就不用担心忘记签到而被艾特了，就可以放心的删除今日校园这么屑的软件啦</strong></p>
</li>
</ul>
<h1 id="卸载今日校园"><a href="#卸载今日校园" class="headerlink" title="卸载今日校园"></a>卸载今日校园</h1><p><img src="/fujian/campushoy/aa.jpg" alt="卸载！"></p>
<h1 id="todolist：-Qmsg的提醒"><a href="#todolist：-Qmsg的提醒" class="headerlink" title="todolist： Qmsg的提醒"></a>todolist： Qmsg的提醒</h1><p>今天设置了，不知道明天能不能收到Qmsg提醒。<br>只要在  <code>#KEY Qmsg的KEY</code> 一栏填上<a href="https://qmsg.zendee.cn/" target="_blank" rel="noopener">Qmsg酱</a> 的key就行了.</p>
<p>Qmsg的api:<a href="https://qmsg.zendee.cn/api.html" target="_blank" rel="noopener">https://qmsg.zendee.cn/api.html</a><br><img src="/fujian/campushoy/ab.png" alt="通知图"></p>
]]></content>
      <categories>
        <category>Script</category>
      </categories>
      <tags>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>gym102091 E-How Many Groups 关于dp的两种思考</title>
    <url>/2021/03/29/GYM102091E/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/102091/attachments/download/8314/20182019-acmicpc-asia-nakhon-pathom-regional-contest-en.pdf" target="_blank" rel="noopener">题目传送门 E题：How many groups</a></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这道题是在3.28日训练赛时候遇到的。当时情况是三个多小时后开了这题，队友在设计三维dp状态转移，然而wa了。当时我个人再看其他题目，等看这个题目时候，迷迷糊糊的，单单是感觉这个值域提醒的200很有文章。 队友写了蛮久也没过，可能是边界没有处理好。</p>
<p>其实之前也是做过这类的题目，但是确实存在不是很熟悉的情况。故思考了很久之后，记录一下这两种方法。</p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给定一个$n(n\le100)$个元素的数组$A(\forall A_i \in A \ \ \ 1\le A_i \le 200)$，定义了关系：有两个数字$a,b$，当且仅当$|a-b|\le2$时，$a,b$在同一组，求一个最大的分组，输出这个分组的数量。（可以对任意位置的数字进行操作+1，或者-1，一共可以操作两次）。</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>显然的一个事情，我们可以把数组从小到大排序，然后有个直观的贪心想法是让下面的尽量往下靠靠，让上面的往下靠靠，然后其实很显然（根据数据范围）就能发现这应该往dp方向靠。（贪心不对！）</p>
<h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>不放设 $dp[i][j][k]$ 表示到以第 $i$ 个数为结尾的，且第 $i$ 个数改了 $j$ 次，第 $i$ 个数改动值为 $k-1$ 的集合最大值。</p>
<p>考虑状态转移：</p>
<p>首先思考如果 $i$ 改动次数为 $0$ 次的情况：</p>
<script type="math/tex; mode=display">
\begin{cases}
dp[i][0][1]=dp[i-1][0][1] + 1& \text{a[i] - a[i-1] <=2}\\
dp[i][0][1] = 1& \text{others}
\end{cases}</script><p>然后考虑 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">j：1-&gt;2</span><br><span class="line">  k:0-&gt;2</span><br><span class="line">    先给定初始值的状态dp[i][j][k]=1</span><br><span class="line">    枚举i-1的所有修改状态l:0-&gt;2</span><br><span class="line">    ai是a[i]修改后的值，aj是a[i-1]修改后的值。</span><br><span class="line">    考虑状态转移：</span><br><span class="line">    第一种是第i个数不修改，dp[i][j][1]直接由dp[i-1][j][l]转移得到</span><br><span class="line">    第二种是第i个数修改，dp[i][j][0|2]有dp[i-1][j-1][l]转移得到</span><br></pre></td></tr></table></figure>
<p>注意在dp过程中不断更新ans</p>
<p>此外特别要注意要使冗余状态不会对结果产生影响：冗余状态的初始值必须为0，这样从冗余态推导到可行态才会变成1 （冗余态不要被赋初值为1即可）</p>
<p>所以一开始不可以将dp数组初始化为0 </p>
<h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>按照值域利用滚动数组记录+1，-1的情况。滚动的原因是，上一个数字如果是拿来减的，那么在本次更新时候是用不到减的数的。</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>解法1代码如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], dp[maxn][<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> tt = <span class="number">1</span>; tt &lt;= t; tt++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  <span class="comment">//到i一次也没有改的情况</span></span><br><span class="line">                    <span class="keyword">if</span> (a[i] - a[i - <span class="number">1</span>] &lt;= <span class="number">2</span>) dp[i][<span class="number">0</span>][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> dp[i][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//剩下的是有改动的情况</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) &#123;</span><br><span class="line">                    dp[i][j][k] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= <span class="number">2</span>; l++) &#123;</span><br><span class="line">                        <span class="keyword">int</span> ai = a[i] - k + <span class="number">1</span>, aj = a[i - <span class="number">1</span>] - l + <span class="number">1</span>;  <span class="comment">//两个数改动后的值</span></span><br><span class="line">                        <span class="comment">//不改动a[i]的情况</span></span><br><span class="line">                        <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;  <span class="comment">//这里不会出现冗余态：转移必定合法</span></span><br><span class="line">                            <span class="keyword">if</span> (a[i] - aj &lt;= <span class="number">2</span>)</span><br><span class="line">                                dp[i][j][<span class="number">1</span>] = max(dp[i][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j][l] + <span class="number">1</span>);  <span class="comment">//注意：如果从不存在的状态推过来，就是0+1的形式</span></span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//改动a[i]的情况：这里会出现冗余态，dp[i-1][0][0|2]的状态是不存在的</span></span><br><span class="line">                        <span class="keyword">if</span> (ai - aj &lt;= <span class="number">2</span>) dp[i][j][k] = max(dp[i][j][k], dp[i - <span class="number">1</span>][j - <span class="number">1</span>][l] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span>; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) ans = max(ans, dp[i][j][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, tt, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解法2代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn], dp[<span class="number">2</span>][maxn][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    CASET &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;cur = a[i];</span><br><span class="line">            <span class="keyword">int</span> now = i &amp; <span class="number">1</span>, last = !(i &amp; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur - <span class="number">1</span>; j &lt;= cur + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++)&#123;</span><br><span class="line">                    dp[now][j][k] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur - <span class="number">1</span>; j &lt;= cur + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                dp[now][cur - <span class="number">1</span>][<span class="number">1</span>] = max(dp[now][cur - <span class="number">1</span>][<span class="number">1</span>], dp[last][j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur - <span class="number">1</span>][<span class="number">2</span>] = max(dp[now][cur - <span class="number">1</span>][<span class="number">2</span>], dp[last][j][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur; j &lt;= cur + <span class="number">2</span>; j++) &#123;</span><br><span class="line">                dp[now][cur][<span class="number">0</span>] = max(dp[now][cur][<span class="number">0</span>], dp[last][j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur][<span class="number">1</span>] = max(dp[now][cur][<span class="number">1</span>], dp[last][j][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur][<span class="number">2</span>] = max(dp[now][cur][<span class="number">2</span>], dp[last][j][<span class="number">2</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt;= cur + <span class="number">3</span>; j++) &#123;</span><br><span class="line">                dp[now][cur + <span class="number">1</span>][<span class="number">1</span>] = max(dp[now][cur + <span class="number">1</span>][<span class="number">1</span>], dp[last][j][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">                dp[now][cur + <span class="number">1</span>][<span class="number">2</span>] = max(dp[now][cur + <span class="number">1</span>][<span class="number">2</span>], dp[last][j][<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cur - <span class="number">1</span>; j &lt;= cur + <span class="number">1</span>; j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) ans = max(ans, dp[now][j][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; __CS &lt;&lt; <span class="string">": "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>暴力处理所有情况： if-else 大法好。 如sol1。</p>
<p><img src="https://i.loli.net/2021/03/29/sXTw8gxJGZjYNyu.png" alt="zby🐂🍺"></p>
]]></content>
      <categories>
        <category>Dynamic Programming</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫问题简单探讨</title>
    <url>/2021/03/07/josephus/</url>
    <content><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>约瑟夫问题有很多经典例题，例如猴子选王、丢手绢。在算法学习过程中，这是大部分人都会遇到的一类问题。一般地，可以简单的做到$O(n\times m)$模拟解法。</p>
<p>然而在一些情况下，这样的复杂度并不优秀，还可以再搞一搞~</p>
<h2 id="解法介绍"><a href="#解法介绍" class="headerlink" title="解法介绍"></a>解法介绍</h2><p>具体数学上有讲</p>
<p>此类问题中，影响到一个人在出圈顺序中的位置 $id$ 的有三个关键参量：他的编号 $i$ 、人数 $n$ 以及出圈间歇 $m$。</p>
<p>在某些情况下，部分参量并不起作用。如 $m|i$ 时， $i$ 对 $id$ 无影响；$m=1$  时， $n$ 对 $id$ 无影响。在部分题目中这可能成为解题的关键。</p>
<p>该类问题有两种问法，分别是：</p>
<ul>
<li>询问约瑟夫排列（即出圈顺序）</li>
<li>询问第 $k$ 出圈（第 $k$ 出圈为获胜者）<h3 id="询问约瑟夫排列"><a href="#询问约瑟夫排列" class="headerlink" title="询问约瑟夫排列"></a>询问约瑟夫排列</h3></li>
</ul>
<p>时间复杂度$O(nlog \ n)$</p>
<p>这样考虑问题：假定当前出圈的人编号为当前第 $k$ 小，此人出圈后圈内还有 $n$ 人，那么下一个出圈的人为圈内编号第 $(k-1+m-1)\bmod n + 1$ 小。</p>
<p>那么只需要一个数据结构，满足能够单点修改，并查询区间第 $k$ 小的：权值树状数组。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000001</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ValueBIT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c[N], maxn;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        maxn = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) c[i] = lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt;= maxn; i += lowbit(i)) c[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            s += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">if</span> (s &gt; maxn || c[s] + sum &gt;= k)</span><br><span class="line">                s -= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sum += c[s];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; vbit;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    vbit.reset(n);</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        now = (now - <span class="number">1</span> + m - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = vbit.find_kth(now);</span><br><span class="line">        vbit.add(k, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, k);</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="询问第-k-出圈"><a href="#询问第-k-出圈" class="headerlink" title="询问第$k$出圈"></a>询问第$k$出圈</h3><h4 id="时间复杂度-O-k"><a href="#时间复杂度-O-k" class="headerlink" title="时间复杂度$O(k)$"></a>时间复杂度$O(k)$</h4><p>令 $f(n,m,k)$ 表示第$k$ 出圈人。</p>
<p>那么有公式：</p>
<script type="math/tex; mode=display">f(n,m,k)=
\begin{cases}
(m - 1) \bmod n + 1 & , k = 1 \\
(f(n - 1, m, k - 1) -1 + m) \bmod n + 1 & , k > 0
\end{cases}</script><p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((k == <span class="number">1</span> ? <span class="number">0</span> : f(n - <span class="number">1</span>, m, k - <span class="number">1</span>)) - <span class="number">1</span> + m) % n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>非递归写法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = (m - <span class="number">1</span>) % (n - k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">2</span>; i &lt;= n; i++) s = (s + m) % i;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="时间复杂度-O-log-frac-m-m-1-n"><a href="#时间复杂度-O-log-frac-m-m-1-n" class="headerlink" title="时间复杂度$O(log{\frac{m}{m-1}} n)$"></a>时间复杂度$O(log{\frac{m}{m-1}} n)$</h4><p>当 $n&gt;&gt;m$ 时，每次从 1 到 n 的一个循环中，有 $\lfloor \frac{n}{m} \rfloor \times m$人报数，其中 $\lfloor \frac{n}{m} \rfloor$ 人出圈。</p>
<p>参考前面时间复杂度 $O(k)$ 的式子，可以发现在此过程中有许多取模操作是无作用的。</p>
<p>于是我们可以合并一些操作，使得部分加法合并为乘法。</p>
<p>有公式</p>
<script type="math/tex; mode=display">
f(n, m, k) = (f(n - c, m, k - c) - 1 + m \times c) \bmod n + 1</script><p>式中 c 表示从当前的 n 一直变化到到 c 的期间内取模都无作用的最大的 c 。</p>
<p>代码实现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> k;</span><br><span class="line">    <span class="keyword">int</span> i = n - k + <span class="number">1</span>, s = (m - <span class="number">1</span>) % i;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = min(n - i, (i - s + m - <span class="number">2</span>) / (m - <span class="number">1</span>));</span><br><span class="line">        s = (s + m * c) % (i += c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="时间复杂度-O-frac-mk-n"><a href="#时间复杂度-O-frac-mk-n" class="headerlink" title="时间复杂度$O(\frac{mk}{n})$"></a>时间复杂度$O(\frac{mk}{n})$</h4><p>易知第 $k$ 出圈人为第 $k\times m$ 报数人，以此为基础进行推导。</p>
<p>首先明确几个概念：</p>
<p>位置编号：从 $1$ 开始编号到 $n$，表示在圈内的初始编号为$k$ 。</p>
<p>报数编号：从 $1$ 开始编号到 $n\times m$，表示第 $k$ 次报数。</p>
<p>报数：从 $1$ 开始编号到 $m$，表示某人所报的某个数。</p>
<p>首先取一个报数编号$p$ ，对应位置编号 $id$。可以用该式来表示： $p = a \times m + b(0\le a &lt;n,1\le b\le m)$。实际含义是：在第 $a$ 轮报数结束后，报数为 $b$。</p>
<p>那么容易推出以下信息：</p>
<p>此时圈内所剩人员数量为 $n-a$</p>
<p>若此人报数 $b=m$，则此人出局。否则圈内剩余的人将会恰好各报一次数，然后此人会再一次报数。</p>
<p>假设此人未出局，那么 $b&lt;m$。</p>
<p>设此人下一次报数编号为 $q$ ，易知 $q = p + n - a = a \times (m - 1) + b + n$。</p>
<p>那么可以推导: $a = \dfrac{q - n - b}{m-1} = \lfloor \dfrac{q - n - 1}{m - 1} \rfloor$。</p>
<p>所以有：$p = q - n + a = q - n - \lfloor \dfrac{q - n - 1}{m - 1} \rfloor = \lfloor \dfrac{(q - n - 1) \times m}{m - 1} \rfloor + 1$</p>
<p>这样就完成了后继公式到前驱公式的变化，如此不断迭代，直到得到他是第 $k$ 报数人为止。</p>
<p>有公式如下：</p>
<script type="math/tex; mode=display">f(n, m, k) = g(n, m, k \times m)</script><script type="math/tex; mode=display">g(n, m, x) =
\begin{cases}
x & , x \leq n \\
g(n, m, \lfloor \dfrac{(x - 1 - n) \times m}{m - 1} \rfloor + 1) &, x > n
\end{cases}</script><p>代码实现如下：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt;= n ? x : g(n, m, (x - <span class="number">1</span> - n) * m / (m - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> g(n, m, k * m); &#125;</span><br></pre></td></tr></table></figure></p>
<p>注意到该函数可以非递归实现，给出优化后的代码:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = k * m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (s &gt;= n) s = (s - n) * m / (m - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><a href="https://codeforces.com/gym/101955/problem/K" target="_blank" rel="noopener">2018-2019 ACM-ICPC, Asia Shenyang Regional Contest K - Let the Flames Begin</a></p>
<p>感谢牛逼网友！</p>
<p>更详细的介绍可以看具体数学。</p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round &amp;#35; 703 (Div. 2)题解</title>
    <url>/2021/02/19/CF-703div2/</url>
    <content><![CDATA[<h2 id="Roast"><a href="#Roast" class="headerlink" title="Roast:"></a>Roast:</h2><p>看到公告里说 <code>I tried my best to create some good problems and clear statements, so I hope you&#39;ll enjoy the round:)</code> 和 <code>story</code> 然后在做题时候感觉自己的C假了。感慨weak data。然而还好没有$FST$。</p>
<p>很可惜的就是F题用了<code>time</code>这个变量 $\textsf{CE}$ 了，不然绝杀了QwQ。。</p>
<p>我太菜了。</p>
<h2 id="A-Shifting-Stacks"><a href="#A-Shifting-Stacks" class="headerlink" title="A - Shifting Stacks"></a>A - Shifting Stacks</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 堆石头堆，第 $i$ 堆上面有 $h_i$ 块石头。现在可以进行多次操作，每次可以将第 $i$ 堆上面拿走一块石头放到第 $i+1$ 堆上面（别问能不能拿走最后一堆上面的），可以重复在某一堆上面拿，直到拿空。问能否在多次操作之后使得 $h_i$ 呈严格单调递增。$1\le n\le100,0\le h_i\le10^9$</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>观察发现：最小的且满足要求的数列，是 $0, 1, 2, \cdots, n-1 $。前缀和维护一下。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="comment">// int sum = 0;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="comment">// sum += a[i];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vi <span class="title">sum</span><span class="params">(n+<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        sum[i] = sum[i<span class="number">-1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum[i] &gt;= tt)&#123;</span><br><span class="line">            tt = tt+i;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Eastern-Exhibition"><a href="#B-Eastern-Exhibition" class="headerlink" title="B - Eastern Exhibition"></a>B - Eastern Exhibition</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 个房子的坐标，第 $i$ 个房子的坐标为 $(x_i,y_i)$ 。（所有横纵坐标的值均为整数）</p>
<p>现在想要建一个剧院，该剧院到第 $i$ 个房子的曼哈顿距离为 $dist(x)$ ，请求出有多少个坐标，使得剧院建在这个坐标上面时，使得 $\sum_{i=1}^{n}dist(i)$ 最小？</p>
<p>$1\le n\le 1000,0\le x_i,y_i\le10^9$</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>每个维度不相关，<code>中位数</code>问题，甚至可以多维度。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x[maxn], y[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(x+<span class="number">1</span>, x+<span class="number">1</span>+n), sort(y+<span class="number">1</span>,y+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ans=ans+<span class="built_in">abs</span>(x[n/<span class="number">2</span>+<span class="number">1</span>]-x[n/<span class="number">2</span>]+<span class="number">1</span>)*<span class="built_in">abs</span>(y[n/<span class="number">2</span>+<span class="number">1</span>]+<span class="number">1</span>-y[n/<span class="number">2</span>]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C2-Guessing-the-Greatest-hard-version"><a href="#C2-Guessing-the-Greatest-hard-version" class="headerlink" title="C2 - Guessing the Greatest (hard version)"></a>C2 - Guessing the Greatest (hard version)</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>交互题。</p>
<p>已知一个长度为 $n$ 的数列 ${a_n}$ ，我们在一开始只知道数列的长度。</p>
<p>我们每次可以向系统询问一段区间 $[l,r]$ 内第二大元素的下标，现在我们需要经过多次询问，找出该数列中最大元素的下标。</p>
<p>询问次数不得超过 $20$ 次。</p>
<p>$2^{20}\ge 10^5$</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>观察到与值域没啥关系。</p>
<p>就考虑最大值区间在左边还是在右边。</p>
<p>trick ： 第一次先询问一次中间，看最大值再左边还是右边。</p>
<p>接着 二分区间。</p>
<p>$2^{20} &gt; 10^5$ 可以通过。</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">auto</span> query = [&amp;](<span class="keyword">int</span> l , <span class="keyword">int</span> r)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; l &lt;&lt; <span class="string">" "</span> &lt;&lt; r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> fii = query(<span class="number">1</span>, n);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line">    <span class="keyword">if</span>(fii != <span class="number">1</span> <span class="keyword">and</span> query(<span class="number">1</span>,fii) == fii)&#123;</span><br><span class="line">        l = <span class="number">1</span>, r = fii - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(query(mid, fii) == fii) &#123;</span><br><span class="line">                ans = mid, l = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        l = fii + <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(query(fii, mid) == fii) &#123;</span><br><span class="line">                ans = mid , r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Max-Median"><a href="#D-Max-Median" class="headerlink" title="D - Max Median"></a>D - Max Median</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>给定一个长度为 $n$ 的数列 ${a_n}$ ，尝试找出一组长度不短于 $k$ 的连续子数列，使得其中位数最大。</p>
<p>中位数的定义（和标准可能有所出入）：长度为 N 的数列，其升序排列后的第 $\lfloor\frac{N+1}{2}\rfloor$ 个元素，为该数列的中位数。</p>
<p>$1\le k\le n\le 2\times10^5,1\le a_i\le n$</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p><a href="https://codeforces.com/blog/entry/87849" target="_blank" rel="noopener">官方做法</a>很好：</p>
<ol>
<li><p>如果 ${a_n}$ 中只有 $0$ 和 $1$ ，咋选？<br>显然，应该选择一个长度不小于 $k$ 的区间段，使得其中 $0$ 的数量少于 $1$ ，这样才能使得中位数是 $1$ 而非 $0$ 。<br>我们也可以将 0 改为 −1 ，问题就变成了如何使区间和为正数了。<br>直接求区间和的最大值，那么我们直接枚举 $r$ ，然后找 $suml$ 最小值，然后相减一下，看看能不能使得区间值大于 0 的 。朴素复杂度 $O(n^2)$ ，数据结构优化 $O(n\ log_n)$ ，线性递推复杂度  $O(n)$。</p>
</li>
<li><p>然而，现在这数列里面的数也不只 0 和 1 ？<br>我们可以抽象一下，0 和 1 是典型的布尔值，那么对于数列里面的每个数，我们可以对其进行一个布尔表达式的运算，使得结果为 0 或者 1 即可（也就是将数分成两类）。<br>题目要求中位数最大，那我们的表达式应该也和大小有关系。不妨设定一个数 $x$ ，如果 $ai\ge x$ 就将其标记为 1，反之标记为 0 。显然 $min<em>{1\le i\le n}a_i\le x\le max</em>{1\le i\le n}a_i$</p>
</li>
<li><p>对于 $x$ 构造出来的新数列，如果我们可以找出一个中位数为 1 的子数列，说明这个子数列在原数列中的对应数列，他的中位数是不小于 $x$ 的。<br>对于这个 $x$，我们可以二分: 对中位数 $x$ 在值域上进行二分，每次线性判定，总复杂度 $O(nlogn)$</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , k , a[maxn], sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">auto</span> chk = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>] + (a[i] &gt;= x ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mn = INF, mx = -INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n; i++)&#123;</span><br><span class="line">            umin(mn, sum[i-k]), umax(mx, sum[i] - mn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mx &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = INF;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r+<span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(chk(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="E-Paired-Payment"><a href="#E-Paired-Payment" class="headerlink" title="E - Paired Payment"></a>E - Paired Payment</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="F-Pairs-of-Paths"><a href="#F-Pairs-of-Paths" class="headerlink" title="F - Pairs of Paths"></a>F - Pairs of Paths</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>有交的点对，按lca排序，先处理lca不同的（lca相同的直接C(size,2)就行了），不同的如果有交一定是lca深度大的再lca深度小的链上</p>
<p>时间复杂度$O(nlog^2)$</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">    Node(<span class="keyword">int</span> v_, <span class="keyword">int</span> w_) &#123; v = v_, w = w_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; g[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> father[maxn], sz[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line">vi anss;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], dfn[maxn], pos[maxn], decr, timee, top[maxn], son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> deep)</span> </span>&#123;</span><br><span class="line">    father[u] = fa;</span><br><span class="line">    dep[u] = deep;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = g[u][i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;  <span class="comment">//</span></span><br><span class="line"> </span><br><span class="line">        dis[v] = dis[u] + g[u][i].w;</span><br><span class="line">        dfs(v, u, deep + <span class="number">1</span>);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        <span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) &#123;</span><br><span class="line">            son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> p[maxn][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_LCA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i][j] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i][<span class="number">0</span>] = father[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">if</span> (p[i][j - <span class="number">1</span>] != <span class="number">-1</span>) p[i][j] = p[p[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;pii, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class="line">    <span class="keyword">int</span> i, lg;</span><br><span class="line">    <span class="keyword">for</span> (lg = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; lg) &lt;= dep[x]; ++lg)</span><br><span class="line">        ;</span><br><span class="line">    --lg;</span><br><span class="line">    <span class="comment">/// 使x往上走直到和y在同一水平线上；</span></span><br><span class="line">    <span class="keyword">for</span> (i = lg; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (dep[x] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[y]) x = p[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="comment">/// 此时x，y在同一水平线上，使x，y同时以相同的速度(2^j)往上走；</span></span><br><span class="line">    <span class="keyword">for</span> (i = lg; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> (p[x][i] != <span class="number">-1</span> &amp;&amp; p[x][i] != p[y][i]) x = p[x][i], y = p[y][i];</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> Seg &#123;</span><br><span class="line"><span class="keyword">int</span> sum[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (o &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (o &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    sum[o] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    build(ls, l, mid), build(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> sum[o];</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= mid) ret += query(ls, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span> (R &gt; mid) ret += query(rs, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(LL o, LL l, LL r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    sum[o]++;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        modify(ls, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        modify(rs, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace Seg</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Seg;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; SS[maxn];</span><br><span class="line">vi Q[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(LL u, LL f, LL tp)</span> </span>&#123;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    dfn[u] = ++timee;</span><br><span class="line">    pos[timee] = u;</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) &#123;</span><br><span class="line">        dfs2(son[u], u, tp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        LL v = g[u][i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == f || v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs2(v, u, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(LL u, LL f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id[maxn], cnt[maxn];</span><br><span class="line">    <span class="function">LL <span class="title">tmp</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; g[u].size(); ++i) &#123;</span><br><span class="line">        LL v = g[u][i].v;</span><br><span class="line">        <span class="keyword">if</span> (v == f) <span class="keyword">continue</span>;</span><br><span class="line">        dfs3(v, u);</span><br><span class="line">        id[v] = ++tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; SS[u].size(); ++i) &#123;</span><br><span class="line">        int x(SS[u][i].first), y(SS[u][i].second);</span><br><span class="line">        <span class="keyword">if</span> (x != u) &#123;</span><br><span class="line">            decr += cnt[x];</span><br><span class="line">            cnt[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y != u) &#123;</span><br><span class="line">            decr += cnt[y];</span><br><span class="line">            cnt[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x != u &amp;&amp; y != u) &#123;</span><br><span class="line">            <span class="keyword">if</span> (id[x] &gt; id[y]) swap(x, y);</span><br><span class="line">            decr -= mp[pii(x, y)];</span><br><span class="line">            mp[pii(x, y)]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">upp</span><span class="params">(<span class="keyword">int</span> x, LL len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (LL i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span> ((len &gt;&gt; i) &amp; <span class="number">1</span>) x = p[x][i];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qry</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="function">LL <span class="title">ret</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]]) swap(x, y);</span><br><span class="line">        ret += Seg::query(<span class="number">1</span>, <span class="number">1</span>, n, dfn[top[x]], dfn[x]);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) swap(x, y);</span><br><span class="line">    ret += Seg::query(<span class="number">1</span>, <span class="number">1</span>, n, dfn[x], dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Seg::modify(<span class="number">1</span>, <span class="number">1</span>, n, dfn[x]); &#125;</span><br><span class="line"> </span><br><span class="line">tuple&lt;<span class="keyword">int</span> , <span class="keyword">int</span> , <span class="keyword">int</span> &gt; qy[<span class="number">300010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        w = <span class="number">1</span>;</span><br><span class="line">        g[x].push_back(Node(y, w));</span><br><span class="line">        g[y].push_back(Node(x, w));</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    Init_LCA();</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> kp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="function">LL <span class="title">z</span><span class="params">(LCA(x, y))</span></span>;</span><br><span class="line">        Q[dep[z]].eb(i);</span><br><span class="line">        <span class="comment">// std::cout &lt;&lt; "z === " &lt;&lt; z &lt;&lt; "  " &lt;&lt; dep[z] &lt;&lt; "\n";</span></span><br><span class="line">        qy[i] = make_tuple(x,y,z);</span><br><span class="line">        kp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"fuck"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Seg::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"yy"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ll Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (LL i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = Q[i].size();</span><br><span class="line">        <span class="keyword">if</span> (!sz) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> cnt[maxn];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "sjad" &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            LL now = (Q[i][j]);</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            Ans += cnt[z];</span><br><span class="line">            cnt[z]++;</span><br><span class="line">            Ans += qry(x, z) + qry(y, z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            <span class="function">LL <span class="title">now</span><span class="params">(Q[i][j])</span></span>;</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            change(z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cerr &lt;&lt; "now " &lt;&lt; endl;</span></span><br><span class="line">    Seg::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    decr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "fuckk" &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (LL i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> now = Q[i][j];</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            <span class="keyword">int</span> ttt = (qry(x, z) + qry(y, z));</span><br><span class="line">            decr += ttt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; Q[i].size(); ++j) &#123;</span><br><span class="line">            LL now = Q[i][j];</span><br><span class="line">            <span class="keyword">auto</span> [x, y , z] = qy[now];</span><br><span class="line">            <span class="keyword">if</span> (x != z) &#123;</span><br><span class="line">                LL len = dep[x] - dep[z];</span><br><span class="line">                len --;</span><br><span class="line">                x = upp(x, len);</span><br><span class="line">                change(x);</span><br><span class="line">                anss.eb(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (y != z) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = dep[y] - dep[z];</span><br><span class="line">                len--;</span><br><span class="line">                y = upp(y, len);</span><br><span class="line">                change(y);</span><br><span class="line">            &#125;</span><br><span class="line">            SS[z].eb(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs3(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> fk =  Ans - decr;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;fk  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// while (m--) &#123;</span></span><br><span class="line">    <span class="comment">//     int x, y;</span></span><br><span class="line">    <span class="comment">//     scanf("%d%d", &amp;x, &amp;y);</span></span><br><span class="line">    <span class="comment">//     printf("%d\n", dis[x] + dis[y] - 2 * dis[LCA(x, y)]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title>初探dp优化</title>
    <url>/2021/02/03/DynamicProgrammingOptimization/</url>
    <content><![CDATA[<p>起因是在 <code>Huawei</code>的 <code>online camp</code> 上遇到一道题，虽然现在也不知道怎么解决的。当时想法就是是不是四边形不等式或者斜率优化之类的。好像一直以来都知道自己在这方面只是了解，没有很深入♂掌握，趁这次补一下吧qwq。</p>
<p>说到 <code>Dynamic Programming</code> 我就很喜欢大一时候的一句话：<code>But life ,can&#39;t satisfy with all factors of Dynamic Programming</code></p>
<p><code>dp</code> 也有很多形式的优化，比如是否具有决策单调性，斜率优化，数据结构优化，带权二分，单调栈单调队列优化等等。</p>
<h3 id="前缀和优化"><a href="#前缀和优化" class="headerlink" title="前缀和优化"></a>前缀和优化</h3><h4 id="P2513-HAOI2009-逆序对数列"><a href="#P2513-HAOI2009-逆序对数列" class="headerlink" title="P2513 [HAOI2009]逆序对数列"></a>P2513 [HAOI2009]逆序对数列</h4><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>求长度为 $n$ 的有 $k$ 对逆序对的排列数量 $n,k\le 1000$</p>
<h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>考虑 $dp[i][j]$ 表示 $i$ 的全排列中，逆序数为 $j$ 的数量。</p>
<p>那么有 <script type="math/tex">dp[i][j] = \sum_{k=max(0,j-i+1)}^{j}dp[i-1][k]</script></p>
<p>因为状态转移连续，可以记录前缀和优化。记录$sum=\sum_{k=max(0,j-i+1)}^{j}dp[i][k]$,转移时候注意减去前缀就行。</p>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , k, sum;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1100</span>][<span class="number">1100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// dp[i][j] 表示i的全排列中逆序数为j的个数</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            add(sum, dp[i<span class="number">-1</span>][j]);</span><br><span class="line">            dp[i][j] = sum;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= i<span class="number">-1</span>)&#123;</span><br><span class="line">                dec(sum,dp[i<span class="number">-1</span>][j-i+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][k] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此题加强版 <a href="https://loj.ac/s/1057415" target="_blank" rel="noopener">loj6077</a></p>

</div></div>
<h4 id="洛谷P2511-HAOI2008-木棍分割"><a href="#洛谷P2511-HAOI2008-木棍分割" class="headerlink" title="洛谷P2511 [HAOI2008]木棍分割"></a>洛谷P2511 [HAOI2008]木棍分割</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐内容</div></div><div class="fold">
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , m , a[maxn], sum[maxn], mx, dp[maxn], S[maxn],ans,rem[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tot=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(len+a[i]&gt;x)tot++,len=a[i];</span><br><span class="line">		<span class="keyword">else</span> len+=a[i];</span><br><span class="line">	&#125;<span class="keyword">return</span> tot&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">for</span>(;k&lt;i;k++) <span class="keyword">if</span>(sum[i]-sum[k]&lt;=x)&#123;rem[i]=k;<span class="keyword">break</span>;&#125;</span><br><span class="line">	<span class="keyword">int</span> res=(sum[n]&lt;=x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum[i]&lt;=x)dp[i]=<span class="number">1</span>;</span><br><span class="line">		S[i]=(S[i<span class="number">-1</span>]+dp[i])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			dp[j]=S[j<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span>(rem[j]<span class="number">-1</span>&gt;=<span class="number">0</span>)dec(dp[j],S[rem[j]<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) S[j]=(S[j<span class="number">-1</span>]+dp[j])%mod;</span><br><span class="line">		add(res,dp[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	close;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;a[i],sum[i]=sum[i<span class="number">-1</span>]+a[i],umax(mx,a[i]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> L=mx, R=sum[n],mid;</span><br><span class="line">	<span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">		mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(chk(mid))ans=mid, R=mid;</span><br><span class="line">		<span class="keyword">else</span> L = mid+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span> &lt;&lt; DP(ans) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>
<h3 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h3><h3 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h3><h3 id="DP凸优化-WPS二分-带权二分"><a href="#DP凸优化-WPS二分-带权二分" class="headerlink" title="DP凸优化/WPS二分/带权二分"></a>DP凸优化/WPS二分/带权二分</h3>]]></content>
      <categories>
        <category>Dynamic Programming</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Tricks</title>
    <url>/2021/02/02/Trick/</url>
    <content><![CDATA[<h2 id="CF342-E-Xenia-and-Tree"><a href="#CF342-E-Xenia-and-Tree" class="headerlink" title="CF342 E. Xenia and Tree"></a>CF342 E. Xenia and Tree</h2><p><a href="https://codeforces.com/problemset/problem/342/E" target="_blank" rel="noopener">this way</a></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给一棵树，一开始只有1为红，其他点为蓝。两种操作：</p>
<ol>
<li>把一个点染成红点。</li>
<li>询问一个点到最近红点的距离。</li>
</ol>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>数据范围$n\le 10^5,m\le 10^5$，我们不能每一次染色后都去跑一次最短路，所以我们当<code>修改数目达到根号n</code>时去进行一次最短路，查询是如果有点是未更新状态，我们可以通过 $lca$ 来求得两点的距离，这样就可以保证复杂度是$n\sqrt{n} \ log$。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>常数略微有点大QWQ<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLOGN 20</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">int</span> pa[MAXLOGN][MAXN];</span><br><span class="line"><span class="keyword">int</span> depth[MAXN], dist[MAXN];<span class="comment">//dist:到红点最近的距离 </span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    pa[<span class="number">0</span>][v] = p;</span><br><span class="line">    depth[v] = d;</span><br><span class="line">    dist[v] = depth[v]<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[v].size(); i++)</span><br><span class="line">        <span class="keyword">if</span> (G[v][i] != p) dfs(G[v][i], v, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> V)</span> </span>&#123;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "V == " &lt;&lt; V &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k + <span class="number">1</span> &lt; MAXLOGN; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pa[k][v] &lt; <span class="number">0</span>)</span><br><span class="line">                pa[k + <span class="number">1</span>][v] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pa[k + <span class="number">1</span>][v] = pa[k][pa[k][v]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAXLOGN; k++)</span><br><span class="line">        <span class="keyword">if</span> ((x &gt;&gt; k) &amp; <span class="number">1</span>) v = pa[k][v];</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (depth[u] &gt; depth[v]) swap(u, v);</span><br><span class="line">    v = get(v, depth[v] - depth[u]);</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = MAXLOGN - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pa[k][u] != pa[k][v]) &#123;</span><br><span class="line">            u = pa[k][u];</span><br><span class="line">            v = pa[k][v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pa[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> depth[u] + depth[v] - <span class="number">2</span> * depth[lca(u, v)]; &#125;</span><br><span class="line"><span class="keyword">int</span> q[MAXN],cnt=<span class="number">0</span>, vis[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, u , v;i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;u &gt;&gt; v;</span><br><span class="line">        G[u].eb(v),G[v].eb(u);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="comment">// dfs(1,0,0);</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">auto</span> solve = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> u = que.front();</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "now === " &lt;&lt; u &lt;&lt; endl;</span></span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[v]&gt;dist[u]+<span class="number">1</span>)&#123;</span><br><span class="line">                    dist[v]=dist[u]+<span class="number">1</span>;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> update=[&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "x === " &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(vis[x])<span class="keyword">return</span>;</span><br><span class="line">        vis[x]=<span class="number">1</span>, dist[x]=<span class="number">0</span>, q[++cnt]=x,que.push(x);</span><br><span class="line">        <span class="keyword">if</span>(cnt==base)&#123;</span><br><span class="line">            solve();</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> query=[&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = dist[x];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "ansss == " &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</span><br><span class="line">            ans=min(ans,dis(q[i],x));</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "ans == " &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> op, x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            update(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id><a href="#" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p>
<h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p>
<h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p>
<h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><p><a href>this way</a></p>
<h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>cf</tag>
        <tag>Atc</tag>
        <tag>Miscellaneous</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 1473 E. Minimum Path</title>
    <url>/2021/01/15/CF-1473E-Minimum%20Path/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/1473/problem/E" target="_blank" rel="noopener"> Educational Codeforces Round 102 (Rated for Div. 2) E. Minimum Path</a></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给一个带权无向图，求从1点出发到每个点的最小$\sum<em>{i=1}^{k}w</em>{e<em>i}-max</em>{i=1}^{k}w<em>{e_i}+min</em>{i=1}^{k}w_{e_i}$，$e_i$是 $1$ 到 $x$ 上的路径。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>观察到$\sum<em>{i=1}^{k}w</em>{e_i}$是求最短路。加上后面两项相当于变形为分层图：多的两项相当于对边进行了两次操作。</p>
<p>将这个问题转化为:跑最短路，你可以且必须进行如下两种操作:<br>1.选择路径上的一条边，减去它的边权<br>2.选择路径上的一条边，再加一次它的边权。</p>
<p>那么$dis[i][0/1][0/1]$代表从 $1$ 到 $i$ 点，是否已经使用了操作$1$，是否已经使用了操作$2$的最小值。那么答案就是 $dis[i][1][1]$.</p>
<p>正确性：很显然，对于任意一条路径，我们肯定是减去最大边权，加上最小边权。但问题是我们在跑最短路的过程中不知道哪条边会是最终的最小边权/最大边权(有后效性)。对状态升维表达出所有状态来消除后效性。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pii&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn][<span class="number">2</span>][<span class="number">2</span>], vis[maxn][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u , dis , a1 , a2;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">int</span> <span class="keyword">operator</span> &lt; (node <span class="keyword">const</span> &amp;a , node <span class="keyword">const</span>&amp; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.dis &gt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dis[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;node&gt;q;</span><br><span class="line">    q.push(&#123;<span class="number">1</span>, <span class="number">0</span> ,<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">not</span> q.empty())&#123;</span><br><span class="line">        node fr = q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = fr.u, a1 = fr.a1, a2 = fr.a2;</span><br><span class="line">        <span class="keyword">if</span>(vis[u][a1][a2]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u][a1][a2] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : e[u])&#123;</span><br><span class="line">            <span class="keyword">int</span> v = x.fi, w = x.se;</span><br><span class="line">            <span class="keyword">if</span>(dis[v][a1][a2] &gt; dis[u][a1][a2] + w)&#123;</span><br><span class="line">                dis[v][a1][a2] = dis[u][a1][a2] + w;</span><br><span class="line">                q.push(&#123;v, dis[v][a1][a2], a1 , a2&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[v][<span class="number">1</span>][a2] &gt; dis[u][<span class="number">0</span>][a2])&#123;</span><br><span class="line">                    dis[v][<span class="number">1</span>][a2] = dis[u][<span class="number">0</span>][a2];</span><br><span class="line">                    q.push(&#123;v, dis[v][<span class="number">1</span>][a2], <span class="number">1</span> , a2&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!a2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[v][a1][<span class="number">1</span>] &gt; dis[u][a1][<span class="number">0</span>] +  w + w )&#123;</span><br><span class="line">                    dis[v][a1][<span class="number">1</span>] = dis[u][a1][<span class="number">0</span>] +  w + w;</span><br><span class="line">                    q.push(&#123;v,dis[v][a1][<span class="number">1</span>],a1,<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(dis , INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">while</span>(m -- )&#123;</span><br><span class="line">        <span class="keyword">int</span> u ,v , w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="keyword">if</span>(u &gt; v)swap(u , v);</span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">1</span>) dis[v][<span class="number">1</span>][<span class="number">1</span>] = w;</span><br><span class="line">        e[u].eb(v , w);</span><br><span class="line">        e[v].eb(u , w);</span><br><span class="line">    &#125;</span><br><span class="line">    dijstra();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dis[i][<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>cf</tag>
        <tag>shortest paths and similar</tag>
      </tags>
  </entry>
  <entry>
    <title>Games</title>
    <url>/2021/01/07/Games/</url>
    <content><![CDATA[<h2 id="CF-260-B-A-Lot-of-Games"><a href="#CF-260-B-A-Lot-of-Games" class="headerlink" title="CF#260 B. A Lot of Games"></a>CF#260 B. A Lot of Games</h2><p><a href="https://codeforces.com/problemset/problem/455/B" target="_blank" rel="noopener">传送门</a></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p> 有两个人在玩游戏，一共玩 $k(1\le k \le 10^9)$轮，每一轮的一开始有一个空串，双方每一回合需要在空串后面加一个字符，但必须要满足加完这个字符之后的字符串是给定大小为 $n(1\le n\le 10^5)$ 的母串集合中任意一个串的前缀，不能操作者输，规定第一轮的先手为第一个人，接下来每一轮的先手为上一轮的输家，规定最终的赢家是第 $k$ 轮的赢家，在双方都采取最优策略的情况下，求最终的赢家是第一轮的先手还是后手.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>先单独考虑每一轮的游戏，发现本质上就是对母串建 Trie 树并在 Trie 树上每次向下移动，不能移动的输</p>
<p>所以可以先 dp 出对于 Trie 树上每一个节点，能获得的最终状态是怎样的.</p>
<p>观察发现，如果一个位置往下走既可以到必胜态又可以必败态，那么就可以通过这个位置控制下一局的先后手</p>
<p>进一步发现，如果某一方既可以必胜又可以必败，那么其必然能获得最终的胜利.</p>
<p>考虑如果子游戏中不存在这样的状态，那么如果先手必败则后手赢，如果先手必胜则胜负由 k 的奇偶性决定.</p>
<p>所以只需要 dp 记录维护 4 种值，分别表示 (能必胜，能必败，既能必胜又能必败，什么都不能)，枚举后继的状态转移</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> ch[maxn][<span class="number">30</span>], f[maxn], k , n, tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[p][c]) ch[p][c] = ++tot;</span><br><span class="line">        p = ch[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> win = <span class="number">1</span>, lose = <span class="number">2</span>, allcan = <span class="number">3</span>, neither = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "fuck " &lt;&lt; endl;</span></span><br><span class="line">    function&lt;<span class="keyword">void</span> (<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u)&#123;</span><br><span class="line">        f[u] = lose;</span><br><span class="line">        <span class="keyword">int</span> Win = <span class="number">0</span>, Lose = <span class="number">0</span>, All = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">26</span>; c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[u][c])&#123;</span><br><span class="line">                <span class="keyword">int</span> v = ch[u][c] ;</span><br><span class="line">                dfs(v);</span><br><span class="line">                All++;</span><br><span class="line">                <span class="keyword">if</span>(f[v] == lose) Win = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(f[v] == win) Lose = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(f[v] == neither) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f[u] = allcan, <span class="keyword">void</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Win &amp;&amp; Lose) &#123;</span><br><span class="line">            <span class="keyword">return</span> f[u] = allcan, <span class="keyword">void</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!Win &amp;&amp; !Lose &amp;&amp; All) &#123;</span><br><span class="line">            <span class="keyword">return</span> f[u] = neither, <span class="keyword">void</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Win)f[u] = win;</span><br><span class="line">        <span class="keyword">if</span>(Lose) f[u] = lose;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>] == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"First"</span> &lt;&lt; <span class="built_in">endl</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>] == <span class="number">2</span> || f[<span class="number">1</span>] == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Second"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ((k &amp; <span class="number">1</span>)?<span class="string">"First"</span>:<span class="string">"Second"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder 乱做笔记 </title>
    <url>/2021/01/01/atcoder/</url>
    <content><![CDATA[<h2 id="abc190E-Magical-Ornament"><a href="#abc190E-Magical-Ornament" class="headerlink" title="abc190E - Magical Ornament"></a>abc190E - Magical Ornament</h2><p><a href="https://atcoder.jp/contests/abc190/tasks/abc190_e" target="_blank" rel="noopener">this way</a></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有 $n(n\le 10^5)$ 对数字可以两两相邻，问你能不能排列出一个包含一串数 $c\ \ \ |c|\le 17$ 的序列，且序列长度最小。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol>
<li><p>建图：相邻点对连边，把题意转化成在该图上跑出一个最短路径包含序列中的所有点（点可重复）。</p>
</li>
<li><p>走的点的先后顺序未知，所以我们只能通过bfs得到单次从s开始到各点的最短路径，下一步要考虑顺序问题。</p>
</li>
<li><p>$dp[i][j]$ 表示走完 $i$ 中二进制为 1 的点，最后一步是标号为 j 的点的最优解。如 $dp[7][2]$ ，7即二进制下111，代表在这我走完这3个点时，最后一步是第二个点。 也就是前一步是101， 最后一步完成后转移到111。 这样，我们的状态转移方程就是：$dp[nextState][last] = min(dp[nextState][last], dp[i][j] + dis[j][last])$<br>表示下一个状态集合以last为结尾的最优解，由当前状态加上j到last两点间距转移过来。</p>
</li>
<li><p>最后遍历一遍到达末状态11111…11（k个1）时最后一步的各个情况来取最小值即可。</p>
</li>
</ol>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , m , k , x, y , vis[maxn], d[maxn], a[maxn], dp[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="comment">// dp[i][j]表示路径上有i表示的集合的数时，最后一步是j时的最优解</span></span><br><span class="line">vi g[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp , <span class="number">0x3f</span> ,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        g[x].eb(y), g[y].eb(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = linf;</span><br><span class="line">    function&lt;<span class="keyword">void</span> (<span class="keyword">int</span>)&gt; bfs = [&amp;](<span class="keyword">int</span> s)&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">        q.push(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">            <span class="keyword">auto</span> [x, dist] = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            d[x] = dist;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> y : g[x])&#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[y])&#123;</span><br><span class="line">                    vis[y] = <span class="number">1</span>;</span><br><span class="line">                    q.push(&#123;y , dist+<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            vis[j] = <span class="number">0</span>, d[j] = linf;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            dis[i][j] = d[a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        dp[<span class="number">1</span>&lt;&lt;i][i+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> limit = (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; limit; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j] == linf) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> last = <span class="number">1</span>; last &lt;= k; last++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(last == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(((i &gt;&gt; (last<span class="number">-1</span>))&amp;<span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> nxtstate = i + (<span class="number">1</span>&lt;&lt;(last<span class="number">-1</span>));</span><br><span class="line">                    umin(dp[nxtstate][last], dp[i][j]+dis[j][last]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= k; i++) umin(ans, dp[limit<span class="number">-1</span>][i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ans == linf ? <span class="number">-1</span> : ans) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>Atc</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CUSTACM Freshman Contest - Onsite - Editorial </title>
    <url>/2020/11/30/2020%20CUSTACM%20Freshman%20Contest%20-%20Onsite%20-%20Editorial/</url>
    <content><![CDATA[<h2 id="A-PaperCube-and-Dimensionality-Reduction"><a href="#A-PaperCube-and-Dimensionality-Reduction" class="headerlink" title="A:PaperCube and Dimensionality Reduction"></a>A:PaperCube and Dimensionality Reduction</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $n^2$ 的<strong>末位</strong>数字。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76116<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">	ll x;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; (x * x % <span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="B：PaperSquare’s-law"><a href="#B：PaperSquare’s-law" class="headerlink" title="B：PaperSquare’s law"></a>B：PaperSquare’s law</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $n^2$ 的<strong>首位</strong>数字。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76006<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> a,b;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a))&#123;</span><br><span class="line">		</span><br><span class="line">	b=a*a;</span><br><span class="line">	<span class="keyword">while</span>(b&gt;=<span class="number">10</span>)b/=<span class="number">10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,b);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="C：Powerful-PaperCube"><a href="#C：Powerful-PaperCube" class="headerlink" title="C：Powerful PaperCube"></a>C：Powerful PaperCube</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $2^n$ 的<strong>末位</strong>数字。</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76116<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">	ll x;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"2486"</span>[(x - <span class="number">1</span>) % <span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="D：PowerCube’s-law"><a href="#D：PowerCube’s-law" class="headerlink" title="D：PowerCube’s law"></a>D：PowerCube’s law</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>求 $2^n$ 的<strong>首位</strong>数字。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>$ans = (2^n)/(10^{x-1}) , x= log_{10}(x)+1$ </p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76015<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> biao[]=&#123;<span class="number">0</span>,<span class="built_in">log</span>(<span class="number">1</span>),<span class="built_in">log</span>(<span class="number">2</span>),<span class="built_in">log</span>(<span class="number">3</span>),<span class="built_in">log</span>(<span class="number">4</span>),<span class="built_in">log</span>(<span class="number">5</span>),<span class="built_in">log</span>(<span class="number">6</span>),<span class="built_in">log</span>(<span class="number">7</span>),<span class="built_in">log</span>(<span class="number">8</span>),<span class="built_in">log</span>(<span class="number">9</span>)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">double</span> lg=<span class="built_in">log</span>(<span class="number">10</span>),l2=<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">double</span> n2=l2*n;</span><br><span class="line">        <span class="keyword">double</span> ans=lg*<span class="built_in">floor</span>(n2/lg);</span><br><span class="line"><span class="comment">//        while(ans+lg&lt;n2)ans+=lg;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(upper_bound(biao,biao+<span class="number">10</span>,n2-ans)-biao<span class="number">-1</span>)&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="E：PaperCube-Tree"><a href="#E：PaperCube-Tree" class="headerlink" title="E：PaperCube Tree"></a>E：PaperCube Tree</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>给定长度为 $n$ 序列 $a$, $q$ 次询问区间 $a<em>i,a</em>{i+1} \cdots a_{j-1},a_j$ 中第 $k$ 大的数。 </p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76001<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="comment">//#include "utils/haha.h"</span></span><br><span class="line"><span class="comment">//#include "utils/max_flow.h"</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; PSS;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; PSI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, PII&gt; PIP;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; PIL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; PLL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, PII&gt; PLP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read_by_char</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  T s = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri() read_by_char<span class="meta-string">&lt;int&gt;()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rl() read_by_char<span class="meta-string">&lt;ll&gt;()</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLS(x, v) (memset((x), (v), sizeof((x))))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>) &#123;</span> <span class="built_in">cerr</span> &lt;&lt; sdbg &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>, <span class="title">class</span>... <span class="title">TA</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>, <span class="title">TA</span>... <span class="title">a</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (*sdbg != <span class="string">','</span>)<span class="built_in">cerr</span> &lt;&lt; *sdbg++;</span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="string">','</span>;</span><br><span class="line">  _dbg(sdbg + <span class="number">1</span>, a...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ostream</span> &amp;<span class="title">operator</span>&lt;&lt;(ostream &amp;os, vector&lt;T&gt; V) &#123;</span></span><br><span class="line"><span class="class">  os &lt;&lt; "[";</span></span><br><span class="line"><span class="class">  for (auto vv : V) os &lt;&lt; vv &lt;&lt; ",";</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "]";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template&lt;class L, class R&gt;</span></span><br><span class="line"><span class="class">ostream &amp;operator&lt;&lt;(ostream &amp;os, pair&lt;L, R&gt; P) &#123;</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "(" &lt;&lt; P.first &lt;&lt; "," &lt;&lt; P.second &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)</span></span><br><span class="line"><span class="class">#else</span></span><br><span class="line"><span class="class">#define debug(...) (__VA_ARGS__)</span></span><br><span class="line"><span class="class">#define cerr if(0)cout</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using min_heap = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using max_heap = priority_queue&lt;T&gt;;</span></span><br><span class="line"><span class="class">//const int N = 1e6 + 1e5 + 10;</span></span><br><span class="line"><span class="class">ll gcd(ll a, ll b) &#123; return b ? gcd(b, a % b) : a; &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">struct PairHash &#123;</span></span><br><span class="line"><span class="class">  template&lt;typename T1, typename T2&gt;</span></span><br><span class="line"><span class="class">  std::size_t operator()(const pair&lt;T1, T2&gt; &amp;p) const &#123;</span></span><br><span class="line"><span class="class">    return hash&lt;T1&gt;()(p.first) ^ hash&lt;T2&gt;()(p.second);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;unsigned MOD_&gt;</span></span><br><span class="line"><span class="class">struct ModInt &#123;</span></span><br><span class="line"><span class="class">  static constexpr unsigned MOD = MOD_;</span></span><br><span class="line"><span class="class">  unsigned x;</span></span><br><span class="line"><span class="class">  void undef() &#123; x = (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  bool isnan() const &#123; return x == (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  inline int geti() const &#123; return (int) x; &#125;</span></span><br><span class="line"><span class="class">  ModInt() &#123; x = 0; &#125;</span></span><br><span class="line"><span class="class">  ModInt(const ModInt &amp;y) &#123; x = y.x; &#125;</span></span><br><span class="line"><span class="class">  ModInt(int y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || (int) MOD &lt;= y) y %= (int) MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt(long long y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || MOD &lt;= y) y %= MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned long long y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator+=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x += y.x) &gt;= MOD) x -= MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator-=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x -= y.x) &amp; (1u &lt;&lt; 31)) x += MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator*=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator/=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.inv().x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt operator-() const &#123; return (x ? MOD - x : 0); &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  ModInt inv() const &#123; return pow(MOD - 2); &#125;</span></span><br><span class="line"><span class="class">  ModInt pow(long long y) const &#123;</span></span><br><span class="line"><span class="class">    ModInt b = *this, r = 1;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) &#123;</span></span><br><span class="line"><span class="class">      b = b.inv();</span></span><br><span class="line"><span class="class">      y = -y;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    for (; y; y &gt;&gt;= 1) &#123;</span></span><br><span class="line"><span class="class">      if (y &amp; 1) r *= b;</span></span><br><span class="line"><span class="class">      b *= b;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return r;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  friend ModInt operator+(ModInt x, const ModInt y) &#123; return x += y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator-(ModInt x, const ModInt y) &#123; return x -= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator*(ModInt x, const ModInt y) &#123; return x *= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator/(ModInt x, const ModInt y) &#123; return x *= y.inv(); &#125;</span></span><br><span class="line"><span class="class">  friend bool operator&lt;(const ModInt x, const ModInt y) &#123; return x.x &lt; y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator==(const ModInt x, const ModInt y) &#123; return x.x == y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator!=(const ModInt x, const ModInt y) &#123; return x.x != y.x; &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class">const int mod = (1e9) + 7;</span></span><br><span class="line"><span class="class">typedef ModInt&lt;mod&gt; mod_int;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">const int MAX_N = 100000;</span></span><br><span class="line"><span class="class">int N, M;</span></span><br><span class="line"><span class="class">int A[MAX_N];</span></span><br><span class="line"><span class="class">int S[MAX_N];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">const int MAX_NN = (1 &lt;&lt; 17);</span></span><br><span class="line"><span class="class">int NN;</span></span><br><span class="line"><span class="class">vector&lt;int&gt; seg[2 * MAX_NN - 1];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void build(int u, int l, int r) &#123;</span></span><br><span class="line"><span class="class">  if (l + 1 == r) &#123;</span></span><br><span class="line"><span class="class">    if (l &lt; N)</span></span><br><span class="line"><span class="class">      seg[u].push_back(A[l]);</span></span><br><span class="line"><span class="class">    return;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  int m = (l + r) / 2;</span></span><br><span class="line"><span class="class">  build(u * 2 + 1, l, m);</span></span><br><span class="line"><span class="class">  build(u * 2 + 2, m, r);</span></span><br><span class="line"><span class="class">  seg[u].resize(r - l);</span></span><br><span class="line"><span class="class">  merge(seg[u * 2 + 1].begin(), seg[u * 2 + 1].end(),</span></span><br><span class="line"><span class="class">        seg[u * 2 + 2].begin(), seg[u * 2 + 2].end(),</span></span><br><span class="line"><span class="class">        seg[u].begin());</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// return the number of items in [a, b) is less than val</span></span><br><span class="line"><span class="class">int query(int a, int b, int val, int u, int l, int r) &#123;</span></span><br><span class="line"><span class="class">  if (l &gt;= b || r &lt;= a) &#123;</span></span><br><span class="line"><span class="class">    return 0;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  if (a &lt;= l &amp;&amp; r &lt;= b) &#123;</span></span><br><span class="line"><span class="class">    return upper_bound(seg[u].begin(), seg[u].end(), val) -</span></span><br><span class="line"><span class="class">        seg[u].begin();</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  int m = (l + r) / 2;</span></span><br><span class="line"><span class="class">  int cnt1 = query(a, b, val, u * 2 + 1, l, m);</span></span><br><span class="line"><span class="class">  int cnt2 = query(a, b, val, u * 2 + 2, m, r);</span></span><br><span class="line"><span class="class">  return cnt1 + cnt2;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// find the k-th smallest number in [a, b)</span></span><br><span class="line"><span class="class">int solve(int a, int b, int k) &#123;</span></span><br><span class="line"><span class="class">  // binary search on index of S</span></span><br><span class="line"><span class="class">  // C(x) = is the number which is less than S[x] &gt;= k - 1</span></span><br><span class="line"><span class="class">  // 0 0 0 1 1 1, first 1</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  int lb = 0, ub = N - 1;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  if (query(a, b, S[lb], 0, 0, NN) &gt;= k)</span></span><br><span class="line"><span class="class">    return S[lb];</span></span><br><span class="line"><span class="class">  // if (query(a, b, S[ub], 0, 0, NN) &lt; k - 1)</span></span><br><span class="line"><span class="class">  // impossible;</span></span><br><span class="line"><span class="class">  while (ub - lb &gt; 1) &#123;</span></span><br><span class="line"><span class="class">    int mid = (lb + ub) / 2;</span></span><br><span class="line"><span class="class">    if (query(a, b, S[mid], 0, 0, NN) &gt;= k) ub = mid;</span></span><br><span class="line"><span class="class">    else lb = mid;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  return S[ub];</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve(int ncase) &#123;</span></span><br><span class="line"><span class="class">  scanf("%d %d", &amp;N, &amp;M);</span></span><br><span class="line"><span class="class">  for (int i = 0; i &lt; N; i++)</span></span><br><span class="line"><span class="class">    scanf("%d", &amp;A[i]);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  copy(A, A + N, S);</span></span><br><span class="line"><span class="class">  sort(S, S + N);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  NN = 1;</span></span><br><span class="line"><span class="class">  while (NN &lt; N)</span></span><br><span class="line"><span class="class">    NN &lt;&lt;= 1;</span></span><br><span class="line"><span class="class">  build(0, 0, NN);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  while (M--) &#123;</span></span><br><span class="line"><span class="class">    int a, b, k;</span></span><br><span class="line"><span class="class">    scanf("%d %d %d", &amp;a, &amp;b, &amp;k);</span></span><br><span class="line"><span class="class">    a--;</span></span><br><span class="line"><span class="class">    b--;</span></span><br><span class="line"><span class="class">    printf("%d\n", solve(a, b + 1, k));</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve_all_cases() &#123;</span></span><br><span class="line"><span class="class">  int T = 1;</span></span><br><span class="line"><span class="class">  //scanf("%d", &amp;T);</span></span><br><span class="line"><span class="class">  //cin &gt;&gt; T;</span></span><br><span class="line"><span class="class">  int ncase = 0;</span></span><br><span class="line"><span class="class">  //pre_calc();</span></span><br><span class="line"><span class="class">  while (T--) &#123;</span></span><br><span class="line"><span class="class">    solve(++ncase);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main() &#123;</span></span><br><span class="line"><span class="class">  ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="class">  cin.tie(0);</span></span><br><span class="line"><span class="class">  cout.tie(0);</span></span><br><span class="line"><span class="class">  cout &lt;&lt; std::fixed;</span></span><br><span class="line"><span class="class">  cout &lt;&lt; setprecision(2);</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  //ios_base::sync_with_stdio(true);</span></span><br><span class="line"><span class="class">  freopen("C:\\Users\\grain\\Desktop\\in.txt", "r", stdin);</span></span><br><span class="line"><span class="class">  //auto x = freopen("C:\\Users\\grain\\Desktop\\out.txt", "w", stdout);</span></span><br><span class="line"><span class="class">  //cerr &lt;&lt; x &lt;&lt; " " &lt;&lt; errno &lt;&lt; endl;</span></span><br><span class="line"><span class="class">  auto start_time = clock();</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">  solve_all_cases();</span></span><br><span class="line"><span class="class">  //test();</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  cout &lt;&lt; (clock() - start_time) * 1.0 / CLOCKS_PER_SEC &lt;&lt; " seconds" &lt;&lt; endl;</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/* stuff you should look for</span></span><br><span class="line"><span class="class">	* int overflow, array bounds</span></span><br><span class="line"><span class="class">	* special cases (n=1?)</span></span><br><span class="line"><span class="class">	* do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="class">	* WRITE STUFF DOWN</span></span><br><span class="line"><span class="class">*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="F-Panicubeeeeeeeeeeeeee"><a href="#F-Panicubeeeeeeeeeeeeee" class="headerlink" title="F:Panicubeeeeeeeeeeeeee"></a>F:Panicubeeeeeeeeeeeeee</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>,判断 $n.0/m$ 是不是循环数位为 $1$ 的的循环小数(形如Panicubeeeeeeeeeeeeee(无数个e))。</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><p>First Blood byteam76093<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line">	<span class="keyword">int</span> a;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		a=<span class="number">0</span>;</span><br><span class="line">		m/=__gcd(n,m);</span><br><span class="line">		<span class="keyword">while</span>(m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(m%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				m/=<span class="number">3</span>;</span><br><span class="line">				a++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(m%<span class="number">2</span>==<span class="number">0</span>)m/=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(m%<span class="number">5</span>==<span class="number">0</span>)m/=<span class="number">5</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(m!=<span class="number">1</span>||!a||a&gt;<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="G-Piling-up-PaperCubes"><a href="#G-Piling-up-PaperCubes" class="headerlink" title="G:Piling up PaperCubes"></a>G:Piling up PaperCubes</h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>在 $n$ 行 $m$ 列的区域里放置纸盒，给出 $q$ 组操作，每次告诉你新纸盒的位置在 $i$ 行 $j$ 列，输出最后纸盒的情况。以左上角为$(0,0)$，下数为第几行，右数为第几列。</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><p>First Blood byteam76001<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="comment">//#include "utils/haha.h"</span></span><br><span class="line"><span class="comment">//#include "utils/max_flow.h"</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; PSS;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; PSI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, PII&gt; PIP;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; PIL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; PLL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; PDD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, PII&gt; PLP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read_by_char</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  T s = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">char</span> ch = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">    s = (s &lt;&lt; <span class="number">3</span>) + (s &lt;&lt; <span class="number">1</span>) + ch - <span class="number">48</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ri() read_by_char<span class="meta-string">&lt;int&gt;()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rl() read_by_char<span class="meta-string">&lt;ll&gt;()</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLS(x, v) (memset((x), (v), sizeof((x))))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>) &#123;</span> <span class="built_in">cerr</span> &lt;&lt; sdbg &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TH</span>, <span class="title">class</span>... <span class="title">TA</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> _<span class="title">dbg</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">sdbg</span>, <span class="title">TH</span> <span class="title">h</span>, <span class="title">TA</span>... <span class="title">a</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (*sdbg != <span class="string">','</span>)<span class="built_in">cerr</span> &lt;&lt; *sdbg++;</span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; <span class="string">'='</span> &lt;&lt; h &lt;&lt; <span class="string">','</span>;</span><br><span class="line">  _dbg(sdbg + <span class="number">1</span>, a...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ostream</span> &amp;<span class="title">operator</span>&lt;&lt;(ostream &amp;os, vector&lt;T&gt; V) &#123;</span></span><br><span class="line"><span class="class">  os &lt;&lt; "[";</span></span><br><span class="line"><span class="class">  for (auto vv : V) os &lt;&lt; vv &lt;&lt; ",";</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "]";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template&lt;class L, class R&gt;</span></span><br><span class="line"><span class="class">ostream &amp;operator&lt;&lt;(ostream &amp;os, pair&lt;L, R&gt; P) &#123;</span></span><br><span class="line"><span class="class">  return os &lt;&lt; "(" &lt;&lt; P.first &lt;&lt; "," &lt;&lt; P.second &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">#define debug(...) _dbg(#__VA_ARGS__, __VA_ARGS__)</span></span><br><span class="line"><span class="class">#else</span></span><br><span class="line"><span class="class">#define debug(...) (__VA_ARGS__)</span></span><br><span class="line"><span class="class">#define cerr if(0)cout</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using min_heap = priority_queue&lt;T, vector&lt;T&gt;, greater&lt;T&gt;&gt;;</span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">using max_heap = priority_queue&lt;T&gt;;</span></span><br><span class="line"><span class="class">//const int N = 1e6 + 1e5 + 10;</span></span><br><span class="line"><span class="class">ll gcd(ll a, ll b) &#123; return b ? gcd(b, a % b) : a; &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">struct PairHash &#123;</span></span><br><span class="line"><span class="class">  template&lt;typename T1, typename T2&gt;</span></span><br><span class="line"><span class="class">  std::size_t operator()(const pair&lt;T1, T2&gt; &amp;p) const &#123;</span></span><br><span class="line"><span class="class">    return hash&lt;T1&gt;()(p.first) ^ hash&lt;T2&gt;()(p.second);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;unsigned MOD_&gt;</span></span><br><span class="line"><span class="class">struct ModInt &#123;</span></span><br><span class="line"><span class="class">  static constexpr unsigned MOD = MOD_;</span></span><br><span class="line"><span class="class">  unsigned x;</span></span><br><span class="line"><span class="class">  void undef() &#123; x = (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  bool isnan() const &#123; return x == (unsigned) -1; &#125;</span></span><br><span class="line"><span class="class">  inline int geti() const &#123; return (int) x; &#125;</span></span><br><span class="line"><span class="class">  ModInt() &#123; x = 0; &#125;</span></span><br><span class="line"><span class="class">  ModInt(const ModInt &amp;y) &#123; x = y.x; &#125;</span></span><br><span class="line"><span class="class">  ModInt(int y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || (int) MOD &lt;= y) y %= (int) MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt(long long y) &#123;</span></span><br><span class="line"><span class="class">    if (y &lt; 0 || MOD &lt;= y) y %= MOD;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) y += MOD;</span></span><br><span class="line"><span class="class">    x = y;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt(unsigned long long y) &#123; if (MOD &lt;= y) x = y % MOD; else x = y; &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator+=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x += y.x) &gt;= MOD) x -= MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator-=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    if ((x -= y.x) &amp; (1u &lt;&lt; 31)) x += MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator*=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt &amp;operator/=(const ModInt y) &#123;</span></span><br><span class="line"><span class="class">    x = (unsigned long long) x * y.inv().x % MOD;</span></span><br><span class="line"><span class="class">    return *this;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  ModInt operator-() const &#123; return (x ? MOD - x : 0); &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  ModInt inv() const &#123; return pow(MOD - 2); &#125;</span></span><br><span class="line"><span class="class">  ModInt pow(long long y) const &#123;</span></span><br><span class="line"><span class="class">    ModInt b = *this, r = 1;</span></span><br><span class="line"><span class="class">    if (y &lt; 0) &#123;</span></span><br><span class="line"><span class="class">      b = b.inv();</span></span><br><span class="line"><span class="class">      y = -y;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    for (; y; y &gt;&gt;= 1) &#123;</span></span><br><span class="line"><span class="class">      if (y &amp; 1) r *= b;</span></span><br><span class="line"><span class="class">      b *= b;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return r;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  friend ModInt operator+(ModInt x, const ModInt y) &#123; return x += y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator-(ModInt x, const ModInt y) &#123; return x -= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator*(ModInt x, const ModInt y) &#123; return x *= y; &#125;</span></span><br><span class="line"><span class="class">  friend ModInt operator/(ModInt x, const ModInt y) &#123; return x *= y.inv(); &#125;</span></span><br><span class="line"><span class="class">  friend bool operator&lt;(const ModInt x, const ModInt y) &#123; return x.x &lt; y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator==(const ModInt x, const ModInt y) &#123; return x.x == y.x; &#125;</span></span><br><span class="line"><span class="class">  friend bool operator!=(const ModInt x, const ModInt y) &#123; return x.x != y.x; &#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class">const int mod = (1e9) + 7;</span></span><br><span class="line"><span class="class">typedef ModInt&lt;mod&gt; mod_int;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">vector&lt;string&gt; box =</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line"><span class="class">        "..+-------+",</span></span><br><span class="line"><span class="class">        "./  7 7  /|",</span></span><br><span class="line"><span class="class">        "+-------+ |",</span></span><br><span class="line"><span class="class">        "| paper | +",</span></span><br><span class="line"><span class="class">        "| cube  |/.",</span></span><br><span class="line"><span class="class">        "+-------+.."</span></span><br><span class="line"><span class="class">    &#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void write_box(vector&lt;string&gt; &amp;ret, string &amp;empty_row, int x, int y) &#123;</span></span><br><span class="line"><span class="class">  while (ret.size() &lt;= x + 5) ret.push_back(empty_row);</span></span><br><span class="line"><span class="class">  for (int i = 5; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="class">    for (int j = 0; j &lt; box[i].size(); j++) &#123;</span></span><br><span class="line"><span class="class">      if (box[i][j] == '.') continue;</span></span><br><span class="line"><span class="class">      ret[x + (5 - i)][y + j] = box[i][j];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      //debug(x + 5 - i, y + j, i, j);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve(int ncase) &#123;</span></span><br><span class="line"><span class="class">  int n, m, d;</span></span><br><span class="line"><span class="class">  cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;</span></span><br><span class="line"><span class="class">  vector&lt;vector&lt;int&gt;&gt; cnt(n, vector&lt;int&gt;(m));</span></span><br><span class="line"><span class="class">  for (int i = 0; i &lt; d; i++) &#123;</span></span><br><span class="line"><span class="class">    int x, y;</span></span><br><span class="line"><span class="class">    cin &gt;&gt; x &gt;&gt; y;</span></span><br><span class="line"><span class="class">    cnt[x - 1][y - 1]++;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  int col = 8 * m + 3 + 2 * n - 2;</span></span><br><span class="line"><span class="class">  int row = 2 * n + 1;</span></span><br><span class="line"><span class="class">  string empty_row = string(col, '.');</span></span><br><span class="line"><span class="class">  vector&lt;string&gt; ret(row, empty_row);</span></span><br><span class="line"><span class="class">  for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="class">    for (int j = 0; j &lt; m; j++) &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      int x = (n - 1 - i) * 2;</span></span><br><span class="line"><span class="class">      int y = j * 8 + (n - 1 - i) * 2;</span></span><br><span class="line"><span class="class">      for (int k = 0; k &lt; cnt[i][j]; k++) &#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        debug(x, y, i, j);</span></span><br><span class="line"><span class="class">        write_box(ret, empty_row, x, y);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        x += 3;</span></span><br><span class="line"><span class="class">      &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  for (int i = ret.size() - 1; i &gt;= 0; i--) &#123;</span></span><br><span class="line"><span class="class">    cout &lt;&lt; ret[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void solve_all_cases() &#123;</span></span><br><span class="line"><span class="class">  int T = 1;</span></span><br><span class="line"><span class="class">  //scanf("%d", &amp;T);</span></span><br><span class="line"><span class="class">  //cin &gt;&gt; T;</span></span><br><span class="line"><span class="class">  int ncase = 0;</span></span><br><span class="line"><span class="class">  //pre_calc();</span></span><br><span class="line"><span class="class">  while (T--) &#123;</span></span><br><span class="line"><span class="class">    solve(++ncase);</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main() &#123;</span></span><br><span class="line"><span class="class">  ios_base::sync_with_stdio(0);</span></span><br><span class="line"><span class="class">  cin.tie(0);</span></span><br><span class="line"><span class="class">  cout.tie(0);</span></span><br><span class="line"><span class="class">  cout &lt;&lt; std::fixed;</span></span><br><span class="line"><span class="class">  cout &lt;&lt; setprecision(2);</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  //ios_base::sync_with_stdio(true);</span></span><br><span class="line"><span class="class">  freopen("C:\\Users\\grain\\Desktop\\in.txt", "r", stdin);</span></span><br><span class="line"><span class="class">  //auto x = freopen("C:\\Users\\grain\\Desktop\\out.txt", "w", stdout);</span></span><br><span class="line"><span class="class">  //cerr &lt;&lt; x &lt;&lt; " " &lt;&lt; errno &lt;&lt; endl;</span></span><br><span class="line"><span class="class">  auto start_time = clock();</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">  solve_all_cases();</span></span><br><span class="line"><span class="class">  //test();</span></span><br><span class="line"><span class="class">#ifdef _zzz_</span></span><br><span class="line"><span class="class">  cout &lt;&lt; (clock() - start_time) * 1.0 / CLOCKS_PER_SEC &lt;&lt; " seconds" &lt;&lt; endl;</span></span><br><span class="line"><span class="class">#endif</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/* stuff you should look for</span></span><br><span class="line"><span class="class">	* int overflow, array bounds</span></span><br><span class="line"><span class="class">	* special cases (n=1?)</span></span><br><span class="line"><span class="class">	* do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="class">	* WRITE STUFF DOWN</span></span><br><span class="line"><span class="class">*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="H-PaperCube-Stacks"><a href="#H-PaperCube-Stacks" class="headerlink" title="H.PaperCube Stacks"></a>H.PaperCube Stacks</h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><p>给出两个栈：第一个栈依次压入 $1,2,3,4,…,n$；第二个栈依次压入 $n+1,n+2,n+3,…,n+m$；<br>你可以将栈 $1$ 中的栈顶元素 $pop$ 出，放到栈 $2$ 的顶部；或者将栈 $2$ 中的栈顶元素 $pop$ 出。求将所有元素最后通过栈2 $pop$ 出后，有几种出栈方式。</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76001<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mo 114514199</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100010</span>];</span><br><span class="line">ll n,m,ans,c[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="function">ll <span class="title">qp</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll re=<span class="number">1</span>,ch=a;</span><br><span class="line">	<span class="keyword">while</span>(b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)re=re*ch%mo;</span><br><span class="line">		ch=ch*ch%mo;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="comment">//scanf("%d",&amp;T);</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">	c[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i][<span class="number">0</span>]=c[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2000</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			c[i][j]=c[i<span class="number">-1</span>][j+<span class="number">1</span>]+c[i][j<span class="number">-1</span>];</span><br><span class="line">			c[i][j]%=mo;</span><br><span class="line">		<span class="comment">//	printf("%lld ",c[i][j]);</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//	puts("");</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line"><span class="comment">//		if(n==0)ans=1;</span></span><br><span class="line"><span class="comment">//		else ans=c[2*n][n+1]*qp(n,mo-2)%mo;</span></span><br><span class="line"><span class="comment">//		ans=ans*(m+1)%mo;</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,c[n][m]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2 2</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4   14</span></span><br><span class="line"><span class="comment">1 2 3 4  4</span></span><br><span class="line"><span class="comment">1 2 4 3  3</span></span><br><span class="line"><span class="comment">1 3 2 4  3</span></span><br><span class="line"><span class="comment">1 3 4 2  </span></span><br><span class="line"><span class="comment">1 4 3 2</span></span><br><span class="line"><span class="comment">2 1 3 4</span></span><br><span class="line"><span class="comment">2 1 4 3</span></span><br><span class="line"><span class="comment">2 3 1 4</span></span><br><span class="line"><span class="comment">2 3 4 1</span></span><br><span class="line"><span class="comment">2 4 3 1</span></span><br><span class="line"><span class="comment">3 2 1 4</span></span><br><span class="line"><span class="comment">3 2 4 1</span></span><br><span class="line"><span class="comment">3 4 2 1</span></span><br><span class="line"><span class="comment">4 3 2 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="I-PaperCubes-were-there"><a href="#I-PaperCubes-were-there" class="headerlink" title="I:PaperCubes were there"></a>I:PaperCubes were there</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>给一个 $n$ 行 $m$ 列的区域，统计区域中有多少个$O$ 组成的立方体平面展开。这些立方体平面展开不考虑相连的情况。</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p><img src="\fujian\pho\zhezhi.jpg" alt="11 cases"><br>an naive idea: 暴力枚举所有可能的情况，包括镜面，旋转。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//~ while (clock()&lt;=69*CLOCKS_PER_SEC)</span></span><br><span class="line"><span class="comment">//~ #pragma comment(linker, "/stack:200000000")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-Ofast"</span>,<span class="meta-string">"-funroll-all-loops"</span>,<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="comment">//~ #pragma GCC target ("avx2")</span></span><br><span class="line"><span class="comment">//~ #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">#define endl '\12'</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) int32_t(a.size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(x) (x).begin(),(x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trav(a,x) for (auto&amp; a: x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG(FMT...) fprintf(stderr, FMT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close std::ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (LL i = (x), _##i = (y); i &lt; _##i; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (LL i = (x), _##i = (y); i &gt; _##i; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SORT_UNIQUE(c) (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CASET int ___T; cin&gt;&gt;___T; for(int __CS=1;__CS&lt;=___T;__CS++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> Erica = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">dlsrand</span><span class="params">(random_device&#123;&#125;())</span></span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">mrand</span><span class="params">(<span class="built_in">std</span>::chrono::system_clock::now().time_since_epoch().count())</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> mrand() % x;&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123; <span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="function">ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll&amp; x, ll&amp; y)</span></span>&#123;<span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;ll ret=ex_gcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="function">LL <span class="title">bin</span><span class="params">(LL x, LL n, LL MOD)</span> </span>&#123;LL ret = MOD != <span class="number">1</span>;<span class="keyword">for</span> (x %= MOD; n; n &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)<span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = ret * x % MOD;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">norm</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &gt;= mod ? (x - mod) : x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">get_inv</span><span class="params">(LL x, LL p)</span> </span>&#123; <span class="keyword">return</span> bin(x, p - <span class="number">2</span>, p); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get_inv</span><span class="params">(ll a)</span> </span>&#123; ll x, y; ex_gcd(a, mod, x, y); <span class="keyword">return</span> norm(x + mod);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">umin</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x = x &gt; y ? y : x;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">umax</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x = x &lt; y ? y : x;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">dec</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x -= y; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += mod;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">inline</span> <span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> &amp;<span class="title">x</span>, <span class="title">T</span> <span class="title">y</span>) &#123;</span>x += y; <span class="keyword">if</span>(x &gt;= mod) x -= mod;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ull base=<span class="number">2333</span>, P_1=<span class="number">19260817</span>, P_2=<span class="number">999998639</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>; <span class="comment">// remember to calculate. if tle, check maxn first.</span></span><br><span class="line"><span class="keyword">int</span> n , m, color = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen("6.in","r",stdin);</span></span><br><span class="line">    <span class="comment">// freopen("out.txt","w",stdout);</span></span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; (s[i]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> ck = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m || vis[x][y] || s[x][y] != <span class="string">'O'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> init = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'O'</span> &amp;&amp; vis[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    vis[i][j] = ++color;</span><br><span class="line">                    <span class="built_in">queue</span>&lt;pii&gt; q;</span><br><span class="line">                    q.push(&#123;i, j&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">                        <span class="keyword">auto</span> x = q.front().first, y = q.front().second;</span><br><span class="line">                        q.pop();</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">                            <span class="keyword">int</span> xx = x + dx[k], yy = y + dy[k];</span><br><span class="line">                            <span class="keyword">if</span>(ck(xx, yy))&#123;</span><br><span class="line">                                vis[xx][yy] = color;</span><br><span class="line">                                q.push(&#123;xx, yy&#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> co = <span class="number">1</span>; co &lt;= color; co++)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;pii&gt; tp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(vis[i][j] == co)&#123;</span><br><span class="line">                        tp.eb(i,j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(SZ(tp)!=<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> [a, b] : tp)&#123;</span><br><span class="line">                    s[a][b] = <span class="string">'.'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    init();</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "\n\n show == \n";</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1; j &lt;= m; j++)&#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; s[i][j] ;</span></span><br><span class="line">    <span class="comment">//     &#125;cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> chk = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "s[" &lt;&lt;i &lt;&lt; "][" &lt;&lt; j&lt;&lt;"]==="&lt;&lt;s[i][j] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; n || j &lt; <span class="number">1</span> || j &gt; m || (s[i][j] != <span class="string">'O'</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check1 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  1" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check2 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  2" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i+<span class="number">1</span>][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check3 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  3" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check4 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j) &amp;&amp; chk(i,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">2</span>) &amp;&amp; chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">2</span>,j+<span class="number">1</span>) &amp;&amp; chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  4" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j] = s[i][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">2</span>] = s[i+<span class="number">1</span>][j+<span class="number">1</span>] = s[i+<span class="number">2</span>][j+<span class="number">1</span>] = s[i+<span class="number">3</span>][j+<span class="number">1</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check5 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">3</span>)&amp;&amp;chk(i,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  5" &lt;&lt; endl;</span></span><br><span class="line">            s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=s[i+<span class="number">1</span>][j+<span class="number">3</span>]=s[i][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">2</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check6 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  6" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">            <span class="comment">// s[i+1][j]=s[i+1][j+1]=s[i+1][j+2]=s[i+1][j+3]=s[i][j+1]=s[i+2][j+1] = 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check7 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  7" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check8 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  8" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check9 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>) &amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  9" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">3</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check10 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i+<span class="number">1</span>,j)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">1</span>)&amp;&amp;chk(i+<span class="number">2</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">3</span>,j+<span class="number">2</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  10" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i+<span class="number">1</span>][j]=s[i+<span class="number">1</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">1</span>]=s[i+<span class="number">2</span>][j+<span class="number">2</span>]=s[i+<span class="number">3</span>][j+<span class="number">2</span>]=<span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> check11 = [&amp;](<span class="keyword">int</span> i , <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i,j)&amp;&amp;chk(i,j+<span class="number">1</span>)&amp;&amp;chk(i,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">2</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">3</span>)&amp;&amp;chk(i+<span class="number">1</span>,j+<span class="number">4</span>))&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; "done  11" &lt;&lt; endl;</span></span><br><span class="line">            s[i][j]=s[i][j+<span class="number">1</span>]=s[i][j+<span class="number">2</span>]=s[i+<span class="number">1</span>][j+<span class="number">2</span>]=s[i+<span class="number">1</span>][j+<span class="number">3</span>]=s[i+<span class="number">1</span>][j+<span class="number">4</span>] = <span class="string">'.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> fl = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> clockwise = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">char</span> tp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1  1 2 3 ... m</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">        .</span></span><br><span class="line"><span class="comment">        .</span></span><br><span class="line"><span class="comment">        n</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                tp[i][j] = s[n+<span class="number">1</span>-j][i]; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(n , m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = tp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fl)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"clockwise"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" -- begin -- "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"n === "</span> &lt;&lt; n &lt;&lt; <span class="string">" m == "</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = tp[i][j];</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; s[i][j];</span><br><span class="line">            &#125;<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "-- end -- " &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// fl=0;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> mirror = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">char</span> tp[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                tp[i][j] = s[i][m+<span class="number">1</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; " mirror   show  " &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                s[i][j] = tp[i][j];</span><br><span class="line">           <span class="comment">//     cout &lt;&lt; s[i][j];</span></span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//   cout &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; " now ==== " &lt;&lt; endl; </span></span><br><span class="line">    <span class="comment">// check6(1,2);</span></span><br><span class="line">    <span class="comment">// for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j = 1; j &lt;= m; j++)&#123;</span></span><br><span class="line">    <span class="comment">//         cout &lt;&lt; s[i][j];</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">auto</span> up = [&amp;]()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">                check1(i , j);</span><br><span class="line">                check2(i , j);</span><br><span class="line">                check3(i , j);</span><br><span class="line">                check4(i , j);</span><br><span class="line">                check5(i , j);</span><br><span class="line">                check6(i , j);</span><br><span class="line">                check7(i , j);</span><br><span class="line">                check8(i , j);</span><br><span class="line">                check9(i , j);</span><br><span class="line">                check10(i , j);</span><br><span class="line">                check11(i , j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> show = [&amp;]()&#123;</span><br><span class="line">        <span class="comment">// for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j = 1; j &lt;= m; j++)&#123;</span></span><br><span class="line">        <span class="comment">//         cout &lt;&lt; s[i][j];</span></span><br><span class="line">        <span class="comment">//     &#125;cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); show();</span><br><span class="line">    mirror();show();</span><br><span class="line">    up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    clockwise(); up();show();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="FB"><a href="#FB" class="headerlink" title="FB:"></a>FB:</h3><p>code by 广州全能王<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> tf[<span class="number">4</span>][<span class="number">6</span>]=&#123;</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">	&#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">	&#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">	&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m &amp;&amp; a[x][y]==<span class="string">'O'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp[<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) tmp[i]=v[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) v[tf[x][i]]=tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	a[x][y]=<span class="string">'.'</span>;</span><br><span class="line">	<span class="keyword">int</span> re=v[<span class="number">0</span>]?<span class="number">-10000</span>:<span class="number">1</span>;</span><br><span class="line">	v[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> tx=x+dx[i];</span><br><span class="line">		<span class="keyword">int</span> ty=y+dy[i];</span><br><span class="line">		<span class="keyword">if</span>(ok(tx,ty))&#123;</span><br><span class="line">			g(i);</span><br><span class="line">			re+=f(tx,ty);</span><br><span class="line">			g(i^<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+i);</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			<span class="keyword">if</span>(a[i][j]==<span class="string">'O'</span>) &#123;</span><br><span class="line">				<span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">				ans+=(f(i,j)==<span class="number">6</span>);</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="J-PaperCubexpress"><a href="#J-PaperCubexpress" class="headerlink" title="J:PaperCubexpress"></a>J:PaperCubexpress</h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>$n$ 次查询,每组查询有两个字符串$a, b$。$a$ 表示学校的名字，$b$ 表示邮寄的物品编号组成的字符串。判断bb字符串是否是 $10$ 个 $O$，3个 $W$ ，$1$ 个$N$，$1$个 $B$，一个$K$组成的.</p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76093<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,ch,ch);</span><br><span class="line">		<span class="keyword">int</span> l=<span class="built_in">strlen</span>(ch);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(ch[i]==<span class="string">'O'</span>)a[<span class="number">1</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'W'</span>)a[<span class="number">2</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'K'</span>)a[<span class="number">3</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'B'</span>)a[<span class="number">4</span>]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ch[i]==<span class="string">'N'</span>)a[<span class="number">5</span>]++;</span><br><span class="line">			<span class="keyword">else</span> a[<span class="number">6</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">10</span>&amp;&amp;a[<span class="number">2</span>]==<span class="number">3</span>&amp;&amp;a[<span class="number">3</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">4</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">5</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">6</span>]==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="K-PaperCase"><a href="#K-PaperCase" class="headerlink" title="K:PaperCase"></a>K:PaperCase</h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><p><strong>多组输入到文件尾</strong>，给一些用空格隔开的单词，用驼峰命名法来表示它们。骆驼式命名法就是当变量名或函数名是由一个或多个单词连结在一起时，第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><p>First Blood by team76009<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="number">0</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s))&#123;</span><br><span class="line">		<span class="keyword">int</span> n = s.length();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]==<span class="string">' '</span>)<span class="built_in">cout</span>&lt;&lt;(<span class="keyword">char</span>)(s[i+<span class="number">1</span>]-<span class="string">'a'</span>+<span class="string">'A'</span>),i++;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;s[i]; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;	 </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Editorial</category>
      </categories>
      <tags>
        <tag>Editorial</tag>
      </tags>
  </entry>
  <entry>
    <title>CUST Monthly Nov. 部分代码</title>
    <url>/2020/11/22/MonthlyNov/</url>
    <content><![CDATA[<p><a href="/Monthly/Monthly Nov.pdf">Statements</a></p>
<p><a href="/Monthly/Editoral.pdf">Tutorial</a></p>
<p>一血代码：</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>分析有几种方法使得输出为三个数的最大数</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>语义分析（不用复制下来运行的拉~）</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>Code by Emanon<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"5\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1 3 4 8 10"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给出序列$X$和序列$Y$，求$X_i$异或$Y_j$后有少个数字在这$2n$个数里的有序对数量的奇偶性。</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>异或性质: $a\oplus b = c$，那么$c \oplus a = b$ 决定总是两对两对出现。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p>Code by Emanon<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Zhuangzhuang Mei Mei Mei"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给图的初始权值和期望权值，进行操作后能后实现。</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>对每个联通块判断是否权值和一样。</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p>Code by UnitsPR<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[<span class="number">200000</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">200000</span> + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[<span class="number">200000</span> + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == father[x]) <span class="keyword">return</span> father[x];</span><br><span class="line">	father[x] = find(father[x]);</span><br><span class="line">	<span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	u = find(u);v = find(v);</span><br><span class="line">	<span class="keyword">if</span> (u != v)</span><br><span class="line">	&#123;</span><br><span class="line">		father[u] = v;</span><br><span class="line">		a[v] += a[u];</span><br><span class="line">		b[v] += b[u];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) father[i] = i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">		merge(u,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> bl = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x = find(i);</span><br><span class="line">		<span class="keyword">if</span> (a[x] != b[x])</span><br><span class="line">		&#123;</span><br><span class="line">			bl = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"azhe\n"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (bl) <span class="built_in">printf</span>(<span class="string">"yingyingying\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>给定一个长度为 n 字符串，交换相邻的字符，问能不能形成回文串，如果能输出最少操作次数。</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>把字符移动到最外边最优，从左往右 用 Fenwick Tree 维护。</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><p>Code by Devour_<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/STACK:10240000000000,10240000000000"</span>)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;<span class="comment">//1.06e9大小</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span> ( <span class="number">-1</span> );</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> t&gt;<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(t &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch=getchar();x=<span class="number">0</span>;<span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);ch=getchar();&#125;</span><br><span class="line">	x=x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int ,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(a) a&amp;(-a)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a,k) memset(a,k,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> bit[maxn] ,a[maxn];</span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//迭代单点修改</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        bit[i]+=x;</span><br><span class="line">        i+=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s+=bit[i];</span><br><span class="line">        i-=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> s ;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt;loc[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;n = s.size();</span><br><span class="line">    <span class="keyword">int</span> cnt =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;++i)loc[s[i]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)cnt+=(loc[i].size()&amp;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"rkmdsxmds buKeai\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//printf("^_^\n");</span></span><br><span class="line">		ll ans =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tot =<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n&amp;&amp;tot&lt;n/<span class="number">2</span>;++i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i])<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> re = s[i] -<span class="string">'a'</span>;</span><br><span class="line">				<span class="keyword">int</span> co = loc[re].size()<span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">if</span>(loc[re][co]==i)</span><br><span class="line">				&#123;<span class="comment">//奇数个当然可以遇到自己啦，于是这个时候就要处理答案</span></span><br><span class="line">					ans+=(n/<span class="number">2</span> - tot);</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				ans+=(n <span class="number">-1</span> -loc[re][co])-( sum(n<span class="number">-1</span>)-sum(loc[re][co]) );</span><br><span class="line">				<span class="comment">//printf("%d %lld %d %d\n",i,ans,sum(n-1),sum(co+1));</span></span><br><span class="line">				a[ loc[re][co] ] = <span class="number">1</span>;</span><br><span class="line">				add(loc[re][co],<span class="number">1</span> );</span><br><span class="line">				loc[re].pop_back();</span><br><span class="line">				tot++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>对于长度为$n$的字符串，计算含本质不同的回文子串数量最少的字符串个数</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><script type="math/tex; mode=display">
ans =
\begin{cases}
62,  & \text{n=1} \\
62*62, & \text{n=2} \\
62*62*62, &\text{n=3}\\
62*61*60,&\text{n>3}
\end{cases}</script><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p>Code by Yukari17<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"62"</span>);</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"3844"</span>);</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">3</span>)<span class="built_in">puts</span>(<span class="string">"238328"</span>);</span><br><span class="line">		<span class="keyword">if</span>(n&gt;<span class="number">3</span>)<span class="built_in">puts</span>(<span class="string">"226920"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">62*61*60=226920</span></span><br><span class="line"><span class="comment">62^3</span></span><br><span class="line"><span class="comment">aba</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>求一条欧拉路</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><p>Nobody</p>
<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>模拟</p>
<h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>模拟题意。写完就行。</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><p>Code by PaperCube<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">leap</span><span class="params">(<span class="keyword">int</span> yr)</span> </span>&#123; <span class="keyword">return</span> yr % <span class="number">400</span> == <span class="number">0</span> || (yr % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; yr % <span class="number">100</span> != <span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> days_of_month[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_day</span><span class="params">(<span class="keyword">int</span> yr, <span class="keyword">int</span> mo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mo != <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> days_of_month[mo];</span><br><span class="line">    <span class="keyword">return</span> leap(yr) ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compose</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123; <span class="keyword">return</span> y * <span class="number">10000</span> + m * <span class="number">100</span> + d; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;y, <span class="keyword">int</span> &amp;m, <span class="keyword">int</span> &amp;d)</span> </span>&#123;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="keyword">if</span> (d &gt; get_day(y, m)) &#123;</span><br><span class="line">        d = <span class="number">1</span>;</span><br><span class="line">        m++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">12</span>) &#123;</span><br><span class="line">        m = <span class="number">1</span>, y++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_date</span><span class="params">(<span class="keyword">int</span> &amp;y, <span class="keyword">int</span> &amp;m, <span class="keyword">int</span> &amp;d)</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%d-%d-%d"</span>, &amp;y, &amp;m, &amp;d); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_wd</span><span class="params">(<span class="keyword">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = v - <span class="number">1</span>;</span><br><span class="line">    x %= <span class="number">7</span>;</span><br><span class="line">    v = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">workday</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n1 = compose(<span class="number">0</span>, <span class="number">2</span>, <span class="number">11</span>), n2 = compose(<span class="number">0</span>, <span class="number">7</span>, <span class="number">11</span>),</span><br><span class="line">               n3 = compose(<span class="number">0</span>, <span class="number">8</span>, <span class="number">23</span>), n4 = compose(<span class="number">0</span>, <span class="number">1</span>, <span class="number">29</span>);</span><br><span class="line">    <span class="keyword">int</span> v = compose(<span class="number">0</span>, m, d);</span><br><span class="line">    <span class="keyword">return</span> (v &gt;= n1 &amp;&amp; v &lt;= n2) || v &gt;= n3 || v &lt;= n4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y, m, d, w;</span><br><span class="line">    <span class="keyword">int</span> y2, m2, d2;</span><br><span class="line">    read_date(y, m, d);</span><br><span class="line">    read_date(y2, m2, d2);</span><br><span class="line">    w = read_int();</span><br><span class="line">    <span class="keyword">for</span> (; compose(y, m, d) &lt;= compose(y2, m2, d2); inc(y, m, d), w++) &#123;</span><br><span class="line">        make_wd(w);</span><br><span class="line">        <span class="keyword">if</span> (!workday(m, d))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">            r[<span class="number">3</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d == get_day(y, m))</span><br><span class="line">            r[<span class="number">4</span>]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((m == <span class="number">2</span> &amp;&amp; d == <span class="number">14</span>) || (m == <span class="number">8</span> &amp;&amp; d == <span class="number">25</span>)) &#123;</span><br><span class="line">            r[<span class="number">1</span>]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r[w]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><p>每次能走$[1,k]$个格子，问从$1$走到$n$有几种方法</p>
<h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>当$k = 2$时，就是每次能走$1,2$格，就是斐波那契数列,$f[i] = f[i - 1] + f[i - 2]$</p>
<p>对于 $k$，$f[i] = \sum_{j = 1}^k f[i - j]$， 矩阵维护一下。</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><p>Code by<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize("Ofast,no-stack-protector,unroll-loops")</span></span><br><span class="line"><span class="comment">// #pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(time(<span class="literal">nullptr</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">min_queue</span> = <span class="title">priority_queue</span>&lt;T, vector&lt;T&gt;, greater&lt;T&gt; &gt;;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">using</span> <span class="title">max_queue</span> = <span class="title">priority_queue</span>&lt;T&gt;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">A</span>, <span class="title">class</span> <span class="title">B</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">ostream</span>&amp; <span class="title">operator</span>&lt;&lt;(ostream&amp; s, pair&lt;A, B&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return s &lt;&lt; "(" &lt;&lt; get&lt;0&gt;(a) &lt;&lt; ", " &lt;&lt; get&lt;1&gt;(a) &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;size_t n, typename... T&gt;</span></span><br><span class="line"><span class="class">typename std::enable_if&lt;(n &gt;= sizeof...(T))&gt;::type print_tuple(</span></span><br><span class="line"><span class="class">    std::ostream&amp;, const std::tuple&lt;T...&gt;&amp;) &#123;&#125;</span></span><br><span class="line"><span class="class">template &lt;size_t n, typename... T&gt;</span></span><br><span class="line"><span class="class">typename std::enable_if&lt;(n &lt; sizeof...(T))&gt;::type print_tuple(</span></span><br><span class="line"><span class="class">    std::ostream&amp; os, const std::tuple&lt;T...&gt;&amp; tup) &#123;</span></span><br><span class="line"><span class="class">  if (n != 0) os &lt;&lt; ", ";</span></span><br><span class="line"><span class="class">  os &lt;&lt; std::get&lt;n&gt;(tup);</span></span><br><span class="line"><span class="class">  print_tuple&lt;n + 1&gt;(os, tup);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;typename... T&gt;</span></span><br><span class="line"><span class="class">std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const std::tuple&lt;T...&gt;&amp; tup) &#123;</span></span><br><span class="line"><span class="class">  os &lt;&lt; "(";</span></span><br><span class="line"><span class="class">  print_tuple&lt;0&gt;(os, tup);</span></span><br><span class="line"><span class="class">  return os &lt;&lt; ")";</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream&amp; print_collection(ostream&amp; s, T const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  s &lt;&lt; '[';</span></span><br><span class="line"><span class="class">  for (auto it = begin(a); it != end(a); ++it) &#123;</span></span><br><span class="line"><span class="class">    s &lt;&lt; *it;</span></span><br><span class="line"><span class="class">    if (it != prev(end(a))) s &lt;&lt; ", ";</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">  return s &lt;&lt; ']';</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;class T, class U&gt;</span></span><br><span class="line"><span class="class">ostream&amp; operator&lt;&lt;(ostream&amp; s, map&lt;T, U&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return print_collection(s, a);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream&amp; operator&lt;&lt;(ostream&amp; s, set&lt;T&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return print_collection(s, a);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template &lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream&amp; operator&lt;&lt;(ostream&amp; s, vector&lt;T&gt; const&amp; a) &#123;</span></span><br><span class="line"><span class="class">  return print_collection(s, a);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">double __startG = clock();</span></span><br><span class="line"><span class="class">void resetG() &#123; __startG = clock(); &#125;</span></span><br><span class="line"><span class="class">double curTime() &#123; return (clock() - __startG) / CLOCKS_PER_SEC; &#125;</span></span><br><span class="line"><span class="class">bool stopNow(double ttl) &#123; return ttl &lt; curTime(); &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;typename T = int&gt;</span></span><br><span class="line"><span class="class">T get_signed_int() &#123;</span></span><br><span class="line"><span class="class">  char c = getchar();</span></span><br><span class="line"><span class="class">  T ret = 0, neg = 0;</span></span><br><span class="line"><span class="class">  while (c != '-' &amp;&amp; !isdigit(c)) c = getchar();</span></span><br><span class="line"><span class="class">  if (c == '-') neg = 1, c = getchar();</span></span><br><span class="line"><span class="class">  do &#123;</span></span><br><span class="line"><span class="class">    ret = (ret &lt;&lt; 3) + (ret &lt;&lt; 1) + c - '0';</span></span><br><span class="line"><span class="class">  &#125; while (isdigit(c = getchar()));</span></span><br><span class="line"><span class="class">  return neg ? -ret : ret;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template &lt;typename T&gt;</span></span><br><span class="line"><span class="class">void print_int(T x) &#123;</span></span><br><span class="line"><span class="class">  static char s[60], *s1;</span></span><br><span class="line"><span class="class">  s1 = s;</span></span><br><span class="line"><span class="class">  if (!x) *s1++ = '0';</span></span><br><span class="line"><span class="class">  if (x &lt; 0) putchar('-'), x = -x;</span></span><br><span class="line"><span class="class">  while (x) *s1++ = (x % 10 + '0'), x /= 10;</span></span><br><span class="line"><span class="class">  while (s1-- != s) putchar(*s1);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">const LL INF = 0x3f3f3f3f3f3f3f3fll;</span></span><br><span class="line"><span class="class">const double PI = acos(-1.0), eps = 1e-7;</span></span><br><span class="line"><span class="class">const int inf = 0x3f3f3f3f, ninf = 0xc0c0c0c0, mod = 1000000007;</span></span><br><span class="line"><span class="class">const int max3 = 1100, max4 = 11100, max5 = 200100, max6 = 2000100;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int dp[100];</span></span><br><span class="line"><span class="class">// k = 1, 1.......1</span></span><br><span class="line"><span class="class">// k = 2, 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946</span></span><br><span class="line"><span class="class">// k = 3, 1 2 4 7 13 24 44 81 149 274 504 927</span></span><br><span class="line"><span class="class">// k = 4, 1 2 4 8 15 29 56 108 208 401 773</span></span><br><span class="line"><span class="class">// k = 5, 1 2 4 8 16 31 61 120 236 464 912 1793 3525 6930 13624 26784</span></span><br><span class="line"><span class="class">// k = 6, 1 2 4 8 16 32 63 125 248 492 976 1936 3840 7617 15109 29970 59448</span></span><br><span class="line"><span class="class">// k = 7, 1 2 4 8 16 32 64 127 253 504 1004 2000 3984 7936 15808 31489 62725 124946</span></span><br><span class="line"><span class="class">// k = 8, 1 2 4 8 16 32 64 128 255 509 1016 2028 4048 8080 16128 32192 64256 128257 256005</span></span><br><span class="line"><span class="class">// k = 9, 1 2 4 8 16 32 64 128 256 511 1021 2040 4076 8144 16272 32512 64960 129792 259328</span></span><br><span class="line"><span class="class">// k = 10,1 2 4 8 16 32 64 128 256 512 1023 2045 4088 8172 16336 32656 65280 130496 260864</span></span><br><span class="line"><span class="class">/*</span></span><br><span class="line"><span class="class"> k = 2</span></span><br><span class="line"><span class="class"> [1, 1]</span></span><br><span class="line"><span class="class"> [1, 0]</span></span><br><span class="line"><span class="class"> k = 3</span></span><br><span class="line"><span class="class">[1, 1, 1;</span></span><br><span class="line"><span class="class"> 0, 0, 1;</span></span><br><span class="line"><span class="class"> 1, 0, 0]</span></span><br><span class="line"><span class="class"> k = 6</span></span><br><span class="line"><span class="class"> [0, 1, 0, 0, 0, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 1, 0, 0, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 0, 1, 0, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 0, 0, 1, 0;</span></span><br><span class="line"><span class="class"> 0, 0, 0, 0, 0, 1;</span></span><br><span class="line"><span class="class"> 1, 1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="class"> k = 10</span></span><br><span class="line"><span class="class"> &#123;0,1,0,0,0,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,1,0,0,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,1,0,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,1,0,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,1,0,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,0,1,0,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,0,0,1,0,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0, 0,0,0,1,0&#125;,</span></span><br><span class="line"><span class="class"> &#123;0,0,0,0,0,0,0,0,0,1&#125;,</span></span><br><span class="line"><span class="class"> &#123;1,1,1,1,1,1,1,1,1,1&#125;&#125;.</span></span><br><span class="line"><span class="class">*/</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int n;</span></span><br><span class="line"><span class="class">struct Matrix &#123;</span></span><br><span class="line"><span class="class">    LL val[124][124];</span></span><br><span class="line"><span class="class">    void Zero() &#123;memset(val,0,sizeof(val));&#125;</span></span><br><span class="line"><span class="class">    void Init()&#123;</span></span><br><span class="line"><span class="class">        Zero();</span></span><br><span class="line"><span class="class">        for(int i=0;i&lt;124;i++)</span></span><br><span class="line"><span class="class">            val[i][i]=1;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    Matrix operator *( const Matrix &amp;b );</span></span><br><span class="line"><span class="class">&#125; A;</span></span><br><span class="line"><span class="class">Matrix Matrix::operator *( const Matrix &amp;b ) &#123;</span></span><br><span class="line"><span class="class">    Matrix temp;</span></span><br><span class="line"><span class="class">    temp.Zero();</span></span><br><span class="line"><span class="class">    for( int i = 0 ; i &lt;  n ;  i ++ )&#123;</span></span><br><span class="line"><span class="class">        for( int k = 0 ; k &lt; n ; k ++ )&#123;</span></span><br><span class="line"><span class="class">            if( val[i][k] )&#123;</span></span><br><span class="line"><span class="class">                for( int j = 0 ; j &lt;  n;  j ++ )&#123;</span></span><br><span class="line"><span class="class">                    temp.val[i][j]+=val[i][k]*b.val[k][j];</span></span><br><span class="line"><span class="class">                    temp.val[i][j] %= mod;</span></span><br><span class="line"><span class="class">                &#125;</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return temp;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">Matrix quickpow(Matrix A,int m) &#123;</span></span><br><span class="line"><span class="class">    Matrix temp;</span></span><br><span class="line"><span class="class">    temp.Init();</span></span><br><span class="line"><span class="class">    while( m ) &#123;</span></span><br><span class="line"><span class="class">        if( m&amp;1 ) temp = temp*A;</span></span><br><span class="line"><span class="class">        A  = A*A;</span></span><br><span class="line"><span class="class">        m &gt;&gt;= 1;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return temp;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main() &#123;</span></span><br><span class="line"><span class="class">    int T, N, K;</span></span><br><span class="line"><span class="class">    cin &gt;&gt; T;</span></span><br><span class="line"><span class="class">    while (T--) &#123;</span></span><br><span class="line"><span class="class">        cin &gt;&gt; N &gt;&gt; K;</span></span><br><span class="line"><span class="class">        n = K;</span></span><br><span class="line"><span class="class">        A.Zero();</span></span><br><span class="line"><span class="class">        for (int i = 0; i &lt; n - 1; i++) &#123;</span></span><br><span class="line"><span class="class">            A.val[i][i + 1] = 1;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="class">            A.val[n - 1][i] = 1;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        A = quickpow(A, N);</span></span><br><span class="line"><span class="class">        printf("%llu\n", A.val[n - 1][0]);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    return 0;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>找到一个子集，使得子集序号的异或和不为0且开心值和最大。</p>
<h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>先按开心值进行排序，对每一样泥巴尝试插入线性基即可（线性基一个性质是线性基内任意一些数异或起来不为 $0$。</p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><p>Code by axp<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; ii;</span><br><span class="line"><span class="built_in">set</span>&lt;ll&gt; se;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> i=se.rbegin();i!=se.rend();++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x^(*i))&lt;x)</span><br><span class="line">			x^=*i;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;i&lt;&lt;' ';</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;endl&lt;&lt;x&lt;&lt;": "&lt;&lt;tx&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	se.insert(x);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ii a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)<span class="built_in">cin</span>&gt;&gt;a[i].first&gt;&gt;a[i].second;</span><br><span class="line">	sort(a,a+n,[](<span class="keyword">const</span> ii&amp; a, <span class="keyword">const</span> ii&amp;b)&#123;<span class="keyword">return</span> a.second&gt;b.second;&#125;);</span><br><span class="line">	ll ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(check(a[i].first))</span><br><span class="line">			ans+=a[i].second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>每个字符串压缩，每个字符串不同，使字符串总和最小。</p>
<h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>对于字符串，建字典树，每个结点维护字符串长度多重集合，从下往上做启发式合并，若当前结点没有被标记，则从多重集合中选最大数值替换为当前节点字符串长度，$dsu on tree$，$O(nlog^2n)$</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><p>Nobody</p>
<h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>ans=$233+max(max(\sum_{i = 1}^na_i), 0)$ </p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><p>Code by yzbsy<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000000 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> st=<span class="number">233</span>,maxx=<span class="number">233</span>,x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">		st+=x;</span><br><span class="line">		maxx=max(maxx,st);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>,maxx);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><h3 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>对每一行建 $Splay$，离线把每个 $4$ 操作连成一棵树，$dfs$ 即可</p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><p>Nobody</p>
<h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><h3 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h3><p>$f[i]=f[i-1]+2*f[i-2]\%100000$。</p>
<h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><p>数组模拟过程，多组输入要学会。</p>
<h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><p>Code by Bi08<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">100000</span>  ;</span><br><span class="line">ll a[N],n,x; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;x)&#123;</span><br><span class="line">		a[<span class="number">1</span>] = x%mod;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) a[i] = a[i<span class="number">-1</span>] % mod+ a[i<span class="number">-2</span>]*<span class="number">2</span>%mod;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a[n]%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Monthly</category>
      </categories>
      <tags>
        <tag>Monthly</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #1: ICPC Central Russia Regional Contest</title>
    <url>/2020/11/13/CRRC19/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/102780" target="_blank" rel="noopener">传送门</a></p>
<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>两杯水混合温度80，求两杯水体积。</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>观察到数据很小，暴力枚举。有特判。。。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t1 , t2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">    <span class="keyword">if</span>(t1 == <span class="number">80</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t2 == <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v1 = <span class="number">1</span>; v1 &lt;= <span class="number">1000</span>; v1++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v2 = <span class="number">1</span>; v2 &lt;= <span class="number">1000</span>; v2++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1 * v1 + t2 * v2 == <span class="number">80</span> * (v1 + v2))&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; v1 &lt;&lt; <span class="string">" "</span> &lt;&lt; v2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>电路电阻。</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>发现单调性。二分一下。</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , R, r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">chk</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        res += (r[i] * x) / (r[i] + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// close;</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; R;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="comment">// cin &gt;&gt; r[i];</span></span><br><span class="line">        read(r[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> le = <span class="number">0</span>, ri = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (le + ri) / <span class="number">2.0</span>; </span><br><span class="line">        <span class="keyword">if</span>(chk(mid) &gt; R)&#123;</span><br><span class="line">            ri = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            le = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.8f\n"</span>, le);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><p>没看</p>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>听说是模拟</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-Ofast"</span>,<span class="meta-string">"-funroll-all-loops"</span>,<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">11000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>); <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) mp[s[i]]++;</span><br><span class="line">    <span class="comment">//[:|||:]</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'['</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'['</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"([:|||:])" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"[:|||:]"</span>);</span><br><span class="line">            mp[<span class="string">'['</span>]--; mp[<span class="string">']'</span>]--; mp[<span class="string">':'</span>] -= <span class="number">2</span>; mp[<span class="string">'|'</span>] -= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-|</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'|'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'|'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-|)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-|"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'|'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:~(</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'~'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'~'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:~()" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":~("</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'~'</span>]--; mp[<span class="string">'('</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-X</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'X'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'X'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-X)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-X"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'X'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//%0</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'%'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'%'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(%0)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"%0"</span>);</span><br><span class="line">            mp[<span class="string">'0'</span>]--; mp[<span class="string">'%'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//8-0</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'8'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'8'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(8-0)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"8-0"</span>);</span><br><span class="line">            mp[<span class="string">'0'</span>]--; mp[<span class="string">'8'</span>]--; mp[<span class="string">'-'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-E</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'E'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'E'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-E)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-E"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'E'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-0</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'0'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'0'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-0)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-0"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">'0'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:C</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'C'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'C'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:C)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":C"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'C'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:D</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'D'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'D'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:D)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":D"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'D'</span>]--;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//:-P</span></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'P'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'P'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-P)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-P"</span>);</span><br><span class="line">            mp[<span class="string">':'</span>]--; mp[<span class="string">'P'</span>]--; mp[<span class="string">'-'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">'\\'</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = mp[<span class="string">'\\'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tp; i++) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:-\)" &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":-\\"</span>);</span><br><span class="line">            mp[<span class="string">'\\'</span>]--; mp[<span class="string">'-'</span>]--; mp[<span class="string">':'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mp[<span class="string">';'</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">'('</span>]) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(;-()" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">";-("</span>), mp[<span class="string">';'</span>]--, mp[<span class="string">'-'</span>]--, mp[<span class="string">'('</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">')'</span>]) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(;-))" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">";-)"</span>), mp[<span class="string">';'</span>]--, mp[<span class="string">'-'</span>]--, mp[<span class="string">')'</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mp[<span class="string">':'</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">')'</span>]) &#123;</span><br><span class="line">            <span class="comment">//:)</span></span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:))" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":)"</span>), mp[<span class="string">':'</span>]--, mp[<span class="string">')'</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(mp[<span class="string">'('</span>]) &#123;</span><br><span class="line">            <span class="comment">//:(</span></span><br><span class="line">            <span class="comment">//cout &lt;&lt; R"(:()" &lt;&lt; endl,</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">":("</span>), mp[<span class="string">':'</span>]--, mp[<span class="string">'('</span>]--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; "LOL" &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"LOL"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><p>给定a,b，求$a^x==x^b$时候的x。</p>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>多校Claris有个题有个思想，拿三个素数check，maxn不能开太大，会TLE。</p>
<h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a , b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    vi pri;</span><br><span class="line">    pri.eb(P_1), pri.eb(P_2), pri.eb(Erica);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> fl = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : pri)&#123;</span><br><span class="line">            <span class="keyword">if</span>(bin(a, i , it) != bin(i, b , it)) &#123;</span><br><span class="line">                fl = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fl) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>待补（gugu）</p>
<h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><p>取一个或两个或全部字符，最后一次操作的人获胜。</p>
<h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><p>记忆化搜索。</p>
<h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st.size() == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(mp.count(st)) <span class="keyword">return</span> mp[st];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sg, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : st) v.push_back(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x) &#123;</span><br><span class="line">            st.erase(st.find(x)); st.insert(x<span class="number">-1</span>);</span><br><span class="line">            sg.push_back(dfs()); st.erase(st.find(x<span class="number">-1</span>)); st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            st.erase(st.find(x)); st.insert(x<span class="number">-2</span>);</span><br><span class="line">            sg.push_back(dfs()); st.erase(st.find(x<span class="number">-2</span>)); st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            st.erase(st.find(x)); sg.push_back(dfs()); st.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : sg)</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> mp[st] = flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp.clear();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">30</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : s) a[x-<span class="string">'A'</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) st.insert(a[i]);</span><br><span class="line">    <span class="keyword">if</span>(dfs() == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Alice"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bob"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    doit();</span><br><span class="line">    <span class="comment">//st.insert(4); st.insert(4); st.insert(4); st.insert(4);</span></span><br><span class="line">    <span class="comment">//st.insert(4); st.insert(4); st.insert(4);</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; dfs();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AAAAAAAAAAAAAAAAAAAABBBBBBBBCCCCCCCDDDDD</span></span><br></pre></td></tr></table></figure>
<p>别人的代码。不明白啊qwq。。得补补吧呜呜。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> sg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">        sg[i] = i % <span class="number">3</span> + (i % <span class="number">3</span> == <span class="number">0</span> ? <span class="number">3</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : s)</span><br><span class="line">        c[ch - <span class="string">'A'</span>]++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (c[i])</span><br><span class="line">            ans ^= sg[c[i]];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, ans == <span class="number">0</span> ? <span class="string">"Bob"</span> : <span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><p>待补</p>
<h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h4><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><h4 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h4><p>签到</p>
<h4 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h4><p>签到</p>
<h4 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (n &amp; <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><h4 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h4><p>待补</p>
<h4 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h4><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><h4 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h4><p>$k(k\le 5)$个数使得${a_1}^{3}+\cdots {a_k}^3=x(x\le 10^{100000})$，构造出来。</p>
<h4 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h4><p>观察到k很小，然后用$(x-1)^3,(x+1)^3$展开后发现和为$2x^3+6x$,那么用两个-x抵一下，然后分类对mod&emsp; 6讨论一下。</p>
<h4 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger Erica = BigInteger.valueOf(<span class="number">6</span>);</span><br><span class="line">        BigInteger ONE = BigInteger.ONE;</span><br><span class="line">        BigInteger FU = BigInteger.valueOf(-<span class="number">1</span>);</span><br><span class="line">        BigInteger x = cin.nextBigInteger();</span><br><span class="line">        BigInteger modd = x.mod(Erica);</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">0</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">4</span>);</span><br><span class="line">            BigInteger xx = x.divide(Erica);</span><br><span class="line">            System.out.println(xx.multiply(FU)+ <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span>+ xx.subtract(ONE));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(ONE))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.subtract(ONE)).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"1 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">2</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.subtract(BigInteger.valueOf(<span class="number">8</span>))).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"2 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">3</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.add(BigInteger.valueOf(<span class="number">27</span>))).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"-3 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">4</span>)))&#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.add(BigInteger.valueOf(<span class="number">8</span>))).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"-2 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(modd.equals(BigInteger.valueOf(<span class="number">5</span>))) &#123;</span><br><span class="line">            System.out.println(<span class="number">5</span>);</span><br><span class="line">            BigInteger xx = (x.add(ONE)).divide(Erica);</span><br><span class="line">            System.out.println(<span class="string">"-1 "</span>+xx.subtract(ONE)+<span class="string">" "</span> + xx.add(ONE) + <span class="string">" "</span> + xx.multiply(FU) + <span class="string">" "</span> + xx.multiply(FU));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><h4 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h4><p>两两交换相邻的数字，使得数字前一段下降，后一段上升。数字两两不同。</p>
<h4 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h4><p>发现最大数字要么最左边要么最右边，然后次大数字，模拟这个过程，Fenwick tree维护一下。</p>
<h4 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) <span class="meta-string">" ["</span> &lt;&lt; #__VA_ARGS__ <span class="meta-string">": "</span> &lt;&lt; (__VA_ARGS__) &lt;&lt; <span class="meta-string">"] "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT freopen(<span class="meta-string">"out.txt"</span>,<span class="meta-string">"w"</span>,stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> al[N],len,a[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[N];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb(x) (x&amp;-x)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;N;x+=lowb(x))s[x]+=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x-=lowb(x))res+=s[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(al+<span class="number">1</span>,al+<span class="number">1</span>+len,x)-al;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    IN;</span></span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cin</span>&gt;&gt;a[i],al[++len]=a[i];</span><br><span class="line">    sort(al+<span class="number">1</span>,al+<span class="number">1</span>+len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=find(a[i]);</span><br><span class="line">        pos[a[i]]=i;</span><br><span class="line">        add(i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> p=pos[i];</span><br><span class="line">        ans+=min(query(p<span class="number">-1</span>),query(n)-query(p));</span><br><span class="line">        add(p,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
      </tags>
  </entry>
  <entry>
    <title>CUST新生爽爽爽部分一血代码</title>
    <url>/2020/11/10/cust_newbie/</url>
    <content><![CDATA[<h2 id="恭喜Winners"><a href="#恭喜Winners" class="headerlink" title="恭喜Winners"></a>恭喜Winners</h2><p>liangxinzhu &amp; techtbw</p>
<h2 id="一血代码："><a href="#一血代码：" class="headerlink" title="一血代码："></a>一血代码：</h2><h3 id="A"><a href="#A" class="headerlink" title="A:"></a>A:</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>简单模拟。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>by e792a8<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">53</span>];</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>.getline(str,<span class="number">52</span>))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(str); ++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">isupper</span>(str[i]))</span><br><span class="line">				str[i]=<span class="built_in">tolower</span>(str[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="B"><a href="#B" class="headerlink" title="B:"></a>B:</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>模拟题意。</p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><p>by liangxinzhu<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a, b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">		<span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ll x = a - b;</span><br><span class="line">		<span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span>, x = -x;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v; <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(x) &#123;</span><br><span class="line">			v.push_back((x % <span class="number">10</span>) + <span class="string">'0'</span>), x /= <span class="number">10</span>, cnt++;</span><br><span class="line">			<span class="keyword">if</span>(cnt % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; x) v.push_back(<span class="string">','</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		reverse(v.begin(), v.end());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)v.size(); i++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="C"><a href="#C" class="headerlink" title="C:"></a>C:</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>模拟</p>
<h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">while</span>(fgets(c,<span class="number">100</span>,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;c[i];++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(c[i]&gt;=<span class="string">'D'</span>&amp;&amp;c[i]&lt;=<span class="string">'Z'</span>||c[i]&gt;=<span class="string">'d'</span>&amp;&amp;c[i]&lt;=<span class="string">'z'</span>)c[i]-=<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;=<span class="string">'A'</span>&amp;&amp;c[i]&lt;=<span class="string">'C'</span>||c[i]&gt;=<span class="string">'a'</span>&amp;&amp;c[i]&lt;=<span class="string">'c'</span>)c[i]+=<span class="number">23</span>;</span><br><span class="line">			<span class="built_in">putchar</span>(c[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="D"><a href="#D" class="headerlink" title="D:"></a>D:</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> r[<span class="number">100011</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,n,e;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">		<span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="number">100010</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">			r[a]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!r[i])&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="E"><a href="#E" class="headerlink" title="E:"></a>E:</h3><h4 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>map的简单运用</p>
<h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="built_in">string</span> a;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length(); j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(a[j] &gt;= <span class="string">'A'</span> &amp;&amp; a[j] &lt;= <span class="string">'Z'</span>) a[j] += <span class="number">32</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			mp[a]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mp.size());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="F"><a href="#F" class="headerlink" title="F:"></a>F:</h3><h4 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c[<span class="number">120</span>],ps[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">while</span>(fgets(ps,<span class="number">100</span>,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		fgets(c,<span class="number">120</span>,<span class="built_in">stdin</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;c[i];++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(c[i]&gt;=<span class="string">'A'</span>&amp;&amp;c[i]&lt;=<span class="string">'Z'</span>)c[i]=ps[c[i]-<span class="string">'A'</span>];</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(c[i]&gt;=<span class="string">'a'</span>&amp;&amp;c[i]&lt;=<span class="string">'z'</span>)c[i]=(<span class="string">'a'</span>-<span class="string">'A'</span>)+ps[c[i]-<span class="string">'a'</span>];</span><br><span class="line">			<span class="built_in">putchar</span>(c[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//putchar('\n');</span></span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="G"><a href="#G" class="headerlink" title="G:"></a>G:</h3><h4 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h4><p>by 200511535_ZBW</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x*y*k&gt;=<span class="number">100000</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="H"><a href="#H" class="headerlink" title="H:"></a>H:</h3><h4 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h4><p>map的简单运用</p>
<h4 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">			mp[x]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ::iterator it;</span><br><span class="line">		<span class="keyword">for</span>(it = mp.begin(); it != mp.end(); it++) &#123;</span><br><span class="line">			ans = max(ans, it-&gt;second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(it = mp.begin(); it != mp.end(); it++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(it-&gt;second == ans) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, it-&gt;first, it-&gt;second);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="I"><a href="#I" class="headerlink" title="I:"></a>I:</h3><h4 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h4><p>by techtbw<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for (int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,b) for (int i=a;i&gt;=b;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line">ll x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    z=x+y;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=z%<span class="number">10</span>;</span><br><span class="line">        z/=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">5</span>) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="J"><a href="#J" class="headerlink" title="J:"></a>J:</h3><h4 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h4><p>by liangxinzhu<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)str.size(); i++) &#123;</span><br><span class="line">		res = res * <span class="number">10</span> + str[i] - <span class="string">'0'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;ll&gt; v; <span class="built_in">string</span> temp = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.size(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i] == <span class="string">'5'</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(temp.size()) v.push_back(cal(temp));</span><br><span class="line">			temp = <span class="string">""</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> temp += s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(temp.size()) v.push_back(cal(temp));</span><br><span class="line">	sort(v.begin(), v.end());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)v.size(); i++)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; (i != (<span class="keyword">int</span>)v.size()<span class="number">-1</span> ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s) doit();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="K"><a href="#K" class="headerlink" title="K:"></a>K:</h3><h4 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p>
<h3 id="L"><a href="#L" class="headerlink" title="L:"></a>L:</h3><h4 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h4><p>正整数唯一分解</p>
<h4 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h4><p>by liangxinzhu</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x; <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">int</span> sq = <span class="built_in">sqrt</span>(x); ll ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sq; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> p = i, q = x / i;</span><br><span class="line">		<span class="keyword">if</span>(x % i) <span class="keyword">continue</span>;</span><br><span class="line">		ans += p;</span><br><span class="line">		<span class="keyword">if</span>(p != q) ans += q;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> _; <span class="built_in">cin</span> &gt;&gt; _; <span class="keyword">while</span>(_--) doit();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="M"><a href="#M" class="headerlink" title="M:"></a>M:</h3><h4 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h4><p>会读入就行了</p>
<h4 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>];</span><br><span class="line"><span class="keyword">int</span> ap[<span class="number">27</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(fgets(s,<span class="number">100000</span>,<span class="built_in">stdin</span>)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(ap,<span class="number">0</span>,<span class="number">27</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;s[i];++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i]&gt;=<span class="string">'a'</span>&amp;&amp;s[i]&lt;=<span class="string">'z'</span>)</span><br><span class="line">				ap[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%c:%d\n"</span>,i+<span class="string">'a'</span>,ap[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="N"><a href="#N" class="headerlink" title="N:"></a>N:</h3><h4 id="Description-13"><a href="#Description-13" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p>
<h3 id="O"><a href="#O" class="headerlink" title="O:"></a>O:</h3><h4 id="Description-14"><a href="#Description-14" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="keyword">char</span> e[<span class="number">100</span>],f[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c))&#123;</span><br><span class="line">		<span class="keyword">if</span>(a==b&amp;&amp;a==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">sprintf</span>(e,<span class="string">"%d"</span>,a);</span><br><span class="line">		<span class="built_in">sprintf</span>(f,<span class="string">"%d"</span>,b);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">strlen</span>(e)<span class="number">-1</span>,j=<span class="built_in">strlen</span>(f)<span class="number">-1</span>;<span class="built_in">strlen</span>(e)-i&lt;=c;--i,--j)&#123;</span><br><span class="line">			<span class="keyword">if</span>((i&gt;=<span class="number">0</span>?e[i]:<span class="string">'0'</span>)!=(j&gt;=<span class="number">0</span>?f[j]:<span class="string">'0'</span>))<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strlen</span>(e)-i==c)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">				<span class="keyword">goto</span> endloop;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		d=a+b;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,d);</span><br><span class="line">		endloop:</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">				</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="P"><a href="#P" class="headerlink" title="P:"></a>P:</h3><h4 id="Description-15"><a href="#Description-15" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-15"><a href="#Code-15" class="headerlink" title="Code"></a>Code</h4><p>by CUST_190331203<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> r[<span class="number">1000</span>];</span><br><span class="line">	<span class="keyword">int</span> v;</span><br><span class="line">	<span class="keyword">int</span> ans;</span><br><span class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!n)<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,r+i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(r[i]==v)ans++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><h4 id="Description-16"><a href="#Description-16" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-16"><a href="#Code-16" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr freopen(<span class="meta-string">"in.txt"</span>,<span class="meta-string">"r"</span>,stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fw freopen(<span class="meta-string">"out.txt"</span>,<span class="meta-string">"w"</span>,stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_Case</span><span class="params">(<span class="keyword">int</span> cnt,ll ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,cnt,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1000005</span>],m,prime[<span class="number">50005</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primes</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">            prime[++m]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prime[j]&gt;f[i]||prime[j]&gt;n/i)<span class="keyword">break</span>;</span><br><span class="line">            f[prime[j]*i]=prime[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>,M=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    primes(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)s.insert(prime[i]);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prime[i]&gt;n/<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(s.find(n-prime[i])!=s.end()&amp;&amp;n-prime[i]-prime[i]&lt;b-a&amp;&amp;n-prime[i]-prime[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                a=prime[i];</span><br><span class="line">                b=n-prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="R"><a href="#R" class="headerlink" title="R:"></a>R:</h3><h4 id="Description-17"><a href="#Description-17" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h4><p>简单数学</p>
<h4 id="Code-17"><a href="#Code-17" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> kase)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) v.push_back(n);</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) n = n * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v.size()) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, v[i], <span class="string">" \n"</span>[i == <span class="keyword">int</span>(v.size()) - <span class="number">1</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No number can be output !\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><h4 id="Description-18"><a href="#Description-18" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h4><p>映射关系</p>
<h4 id="Code-18"><a href="#Code-18" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3000</span> + <span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> kase)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                b[++tot] = a[i] + a[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b + <span class="number">1</span>, b + tot + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, b[i], <span class="string">" \n"</span>[i == m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="T"><a href="#T" class="headerlink" title="T:"></a>T:</h3><h4 id="Description-19"><a href="#Description-19" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h4><p>欧拉函数</p>
<h4 id="Code-19"><a href="#Code-19" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> pri[N], phi[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler_table</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>; vis[<span class="number">1</span>] = vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ;i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            pri[++tot] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;<span class="comment">//i是素数时＜i的所有大于0的数都与i互质</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= tot; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i * pri[k] &gt; N)<span class="keyword">break</span>;</span><br><span class="line">            vis[i * pri[k]] = <span class="number">1</span>;<span class="comment">//筛选掉i的倍数</span></span><br><span class="line">            <span class="keyword">if</span>(i % pri[k] == <span class="number">0</span>)&#123;<span class="comment">//如果有一个质数是i的因子</span></span><br><span class="line">                phi[i * pri[k]] = phi[i] * pri[k];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> phi[i * pri[k]] = phi[i] * phi[pri[k]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> kase)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, phi[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="U"><a href="#U" class="headerlink" title="U:"></a>U:</h3><h4 id="Description-20"><a href="#Description-20" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-20"><a href="#Solution-20" class="headerlink" title="Solution"></a>Solution</h4><p>模拟？</p>
<h4 id="Code-20"><a href="#Code-20" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print_Case</span><span class="params">(<span class="keyword">int</span> cnt,ll ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,cnt,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)temp+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==n)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>,M=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n1,n2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n1,&amp;n2);</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n1&gt;n2)swap(n1,n2);</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">6</span>&amp;&amp;<span class="number">6</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">28</span>&amp;&amp;<span class="number">28</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">496</span>&amp;&amp;<span class="number">496</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="keyword">if</span>(n1&lt;=<span class="number">8128</span>&amp;&amp;<span class="number">8128</span>&lt;=n2)ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="V"><a href="#V" class="headerlink" title="V:"></a>V:</h3><h4 id="Description-21"><a href="#Description-21" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-21"><a href="#Solution-21" class="headerlink" title="Solution"></a>Solution</h4><p>枚举</p>
<h4 id="Code-21"><a href="#Code-21" class="headerlink" title="Code"></a>Code</h4><p>by myfnb<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num)!=EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j&lt;= <span class="number">100</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= <span class="number">100</span>; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i * i + j * j + k * k == num) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, i, j, k);</span><br><span class="line">                        f = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(f)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="W"><a href="#W" class="headerlink" title="W:"></a>W:</h3><h4 id="Description-22"><a href="#Description-22" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-22"><a href="#Solution-22" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-22"><a href="#Code-22" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p>
<h3 id="X"><a href="#X" class="headerlink" title="X:"></a>X:</h3><h4 id="Description-23"><a href="#Description-23" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-23"><a href="#Solution-23" class="headerlink" title="Solution"></a>Solution</h4><p>进制转换</p>
<h4 id="Code-23"><a href="#Code-23" class="headerlink" title="Code"></a>Code</h4><p>by cyh20021231<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> a, b;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%x%x"</span>, &amp;a, &amp;b) != EOF) &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Y"><a href="#Y" class="headerlink" title="Y:"></a>Y:</h3><h4 id="Description-24"><a href="#Description-24" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-24"><a href="#Solution-24" class="headerlink" title="Solution"></a>Solution</h4><p>枚举？</p>
<h4 id="Code-24"><a href="#Code-24" class="headerlink" title="Code"></a>Code</h4><p>by myfnb</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)temp+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==n)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>,M=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vc;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vc2[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>],&amp;a[<span class="number">3</span>],&amp;a[<span class="number">4</span>]);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">2</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">3</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">4</span>]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(f)<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            vc.push_back(a[<span class="number">1</span>]*<span class="number">1000</span>+a[<span class="number">2</span>]*<span class="number">100</span>+a[<span class="number">3</span>]*<span class="number">10</span>+a[<span class="number">4</span>]);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>,a+<span class="number">5</span>));</span><br><span class="line">        sort(vc.begin(),vc.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vc.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vc[i]/<span class="number">1000</span>==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            vc2[vc[i]/<span class="number">1000</span>].push_back(vc[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> len=vc2[i].size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==len<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,vc2[i][j]);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>,vc2[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Z"><a href="#Z" class="headerlink" title="Z:"></a>Z:</h3><h4 id="Description-25"><a href="#Description-25" class="headerlink" title="Description"></a>Description</h4><h4 id="Solution-25"><a href="#Solution-25" class="headerlink" title="Solution"></a>Solution</h4><h4 id="Code-25"><a href="#Code-25" class="headerlink" title="Code"></a>Code</h4><p>Nobody</p>
]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>Miscellaneous</tag>
      </tags>
  </entry>
  <entry>
    <title>爱上对方过后就哭了</title>
    <url>/2020/09/18/asdfghjkl/</url>
    <content><![CDATA[<p>不知道这样的日子还要折磨我多久。</p>
<p>感觉真的好痛苦啊。</p>
<p>我以为我长大了。</p>
<p>可是不到一个礼拜我就后悔了。</p>
<p>那种感情太迷惑了。</p>
<p>我不知道我在干什么。</p>
<p>我不知道我要干什么。</p>
<p>明明已经失学失业了，为什么还会被这种神奇的事情困扰呢。</p>
<p>为什么身位会这么低啊。</p>
<p>都说goodbye了为什么忍不住啊。</p>
<p>为什么会有执念呢。</p>
<p>念念不忘就会有回响嘛？</p>
<p>什么时候才能真的fold啊。</p>
<p>真的真的太痛苦了。</p>
<p>每天都这样真的太糟糕了。</p>
]]></content>
      <categories>
        <category>Roast</category>
      </categories>
      <tags>
        <tag>Roast</tag>
      </tags>
  </entry>
  <entry>
    <title>迷惑行为</title>
    <url>/2020/08/16/0816/</url>
    <content><![CDATA[<p>失望是相互增长的不是吗？</p>
]]></content>
      <categories>
        <category>Roast</category>
      </categories>
      <tags>
        <tag>roast</tag>
      </tags>
  </entry>
  <entry>
    <title>bitset学习笔记</title>
    <url>/2020/07/14/bitset/</url>
    <content><![CDATA[<p><a href="https://zh.cppreference.com/w/cpp/utility/bitset" target="_blank" rel="noopener">cppreference about bitset</a></p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><blockquote>
<p>C++的 bitset 在 \<bitset\> 头文件中，它是一种类似数组的结构，它的每一个元素只能是0或１，每个元素仅用１bit空间。</bitset\></p>
</blockquote>
<p>常常碰到处理的数组只有0和1的变化，此时就可以使用bitset优化。比如求两个集合的交集可以使用按位与运算，求并集可以使用按位或运算</p>
<h3 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h3><p>构造函数<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;4&gt; bitset1;<span class="comment">//无参构造，长度为４，默认每一位为0</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">bitset2</span><span class="params">(<span class="number">12</span>)</span></span>;<span class="comment">//长度为８，二进制保存，前面用0补充</span></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"100101"</span>;</span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;10&gt; <span class="title">bitset3</span><span class="params">(s)</span></span>;<span class="comment">//长度为10，前面用0补充</span></span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"10101"</span>;</span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;13&gt; <span class="title">bitset4</span><span class="params">(s2)</span></span>;<span class="comment">//长度为13，前面用0补充</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;3&gt; <span class="title">bitset5</span><span class="params">(<span class="string">"1100011"</span>)</span></span>; <span class="comment">// 当位数不够时候，只取前面的</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset1 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0000</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset2 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//00001100</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset3 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0000100101</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset4 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//0000000010101</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; bitset5 &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//110</span></span><br></pre></td></tr></table></figure></p>
<p>修改器<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;4&gt; <span class="title">foo</span> <span class="params">(<span class="built_in">string</span>(<span class="string">"1001"</span>))</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;4&gt; <span class="title">bar</span> <span class="params">(<span class="built_in">string</span>(<span class="string">"0011"</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo^=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 1010 (foo对bar按位异或后赋值给foo)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&amp;=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 0010 (按位与后赋值给foo)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo|=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 0011 (按位或后赋值给foo)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&lt;&lt;=<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 1100 (左移２位，低位补0，有自身赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&gt;&gt;=<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0110 (右移１位，高位补0，有自身赋值)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (~bar) &lt;&lt; <span class="built_in">endl</span>;           <span class="comment">// 1100 (按位取反)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bar&lt;&lt;<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;         <span class="comment">// 0110 (左移，不赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (bar&gt;&gt;<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;         <span class="comment">// 0001 (右移，不赋值)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo==bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// false (0110==0011为false)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo!=bar) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// true  (0110!=0011为true)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo&amp;bar) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0010 (按位与，不赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo|bar) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0111 (按位或，不赋值)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (foo^bar) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// 0101 (按位异或，不赋值)</span></span><br></pre></td></tr></table></figure></p>
<p>元素访问 test顺带检查了是否合法下标<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似数组，通过[]访问，下标从0开始。也可以修改</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;4&gt; <span class="title">foo</span> <span class="params">(<span class="string">"1011"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//0</span></span><br></pre></td></tr></table></figure></p>
<p>一些常用函数：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">foo</span> <span class="params">(<span class="string">"10011011"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.count() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//5　　（count函数用来求bitset中1的位数，foo中共有5个1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.size() &lt;&lt; <span class="built_in">endl</span>;　　 <span class="comment">//8　　（size函数用来求bitset的大小，一共有8位</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.test(<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//true　　（test函数用来查下标处的元素是0还是1，并返回false或true，此处foo[0]为1，返回true</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.test(<span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//false　　（同理，foo[2]为0，返回false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.any() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//true　　（any函数检查bitset中是否有１</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.none() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//false　　（none函数检查bitset中是否没有１</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; foo.all() &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//false　　（all函数检查bitset中是全部为１</span></span><br></pre></td></tr></table></figure></p>
<p>常见类型转换函数<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">foo</span> <span class="params">(<span class="string">"10011011"</span>)</span></span>;</span><br><span class="line"><span class="built_in">string</span> s = foo.to_string();　　<span class="comment">//将bitset转换成string类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> a = foo.to_ulong();　　<span class="comment">//将bitset转换成unsigned long类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> b = foo.to_ullong();　　<span class="comment">//将bitset转换成unsigned long long类型</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//10011011</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//155</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;　　<span class="comment">//155</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>set 将位置设置为1</li>
<li>reset 将位置设置为0</li>
<li>flip 翻转位，即更改 true 值为 false 并更改 false 值为 true 。等价于在 bitset 一部分或全体上的逻辑非。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; b.size(); i += <span class="number">2</span>) &#123;</span><br><span class="line">    b.<span class="built_in">set</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">/*10101010*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;4&gt; b;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.flip(<span class="number">0</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.flip(<span class="number">2</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.flip() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="comment">/*0000</span></span><br><span class="line"><span class="comment">0001</span></span><br><span class="line"><span class="comment">0101</span></span><br><span class="line"><span class="comment">1010*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; <span class="title">b</span><span class="params">(<span class="number">42</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Bitset is         "</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">b.reset(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.reset(1): "</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">b.reset();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After b.reset():  "</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Bitset is         00101010</span></span><br><span class="line"><span class="comment">After b.reset(1): 00101000</span></span><br><span class="line"><span class="comment">After b.reset():  00000000*/</span></span><br></pre></td></tr></table></figure>
<p>函数汇总<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;MAXN&gt; bt; <span class="comment">//  bt 包括 MAXN 位，下标 0 ~ MAXN - 1，默认初始化为 0 </span></span><br><span class="line">bt.any()        <span class="comment">//  bt 中是否存在置为 1 的二进制位？</span></span><br><span class="line">bt.none()       <span class="comment">//  bt 中不存在置为 1 的二进制位吗？</span></span><br><span class="line">bt.count()      <span class="comment">//  bt 中置为 1 的二进制位的个数</span></span><br><span class="line">bt.size()       <span class="comment">//  bt 中二进制位的个数</span></span><br><span class="line">bt[pos]         <span class="comment">//  访问 bt 中在 pos 处的二进制位</span></span><br><span class="line">bt.test(pos)    <span class="comment">//  bt 中在 pos 处的二进制位是否为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>()        <span class="comment">//  把 bt 中所有二进制位都置为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>(pos)     <span class="comment">//  把 bt 中在 pos 处的二进制位置为 1</span></span><br><span class="line">bt.reset()      <span class="comment">//  把 bt 中所有二进制位都置为 0</span></span><br><span class="line">bt.reset(pos)   <span class="comment">//  把 bt 中在pos处的二进制位置为0</span></span><br><span class="line">bt.flip()       <span class="comment">//  把 bt 中所有二进制位逐位取反</span></span><br><span class="line">bt.flip(pos)    <span class="comment">//  把 bt 中在 pos 处的二进制位取反</span></span><br><span class="line">bt[pos].flip()  <span class="comment">//  同上</span></span><br><span class="line">bt.to_ulong()   <span class="comment">//  用 bt 中同样的二进制位返回一个 unsigned long 值</span></span><br><span class="line">os &lt;&lt; bt        <span class="comment">//  把 bt 中的位集输出到 os 流</span></span><br></pre></td></tr></table></figure></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3>]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>LCS的一些应用</title>
    <url>/2020/07/06/LCS/</url>
    <content><![CDATA[<h3 id="喜闻乐见的-n-2-算法"><a href="#喜闻乐见的-n-2-算法" class="headerlink" title="喜闻乐见的 $n^2$ 算法:"></a>喜闻乐见的 $n^2$ 算法:</h3><p>不妨设 $dp[i][j]$ 表示第一个串 $s$ 的前 $i$ 位，第二个串 $t$ 的前 $j$ 位的 $LCS$ 的长度，那么状态转移方程是：</p>
<script type="math/tex; mode=display">
dp[i][j]
\begin{cases}
dp[i-1][j-1]+1  & \text{if s[i]=t[j]} \\
max(dp[i-1][j],dp[i][j-1]) & \text{else}
\end{cases}</script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"> 	dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(s[i]==t[j])</span><br><span class="line"> 	    dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[n][m];</span><br></pre></td></tr></table></figure>
<h3 id="n-logn-的算法"><a href="#n-logn-的算法" class="headerlink" title="$n \ logn$的算法"></a>$n \ logn$的算法</h3><p>因为可以转化为最长递增子序列问题，所以这样复杂度是可行的。</p>
<p><a href="https://www.luogu.com.cn/problem/P1439" target="_blank" rel="noopener">洛谷全排列LCS模板</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i] , pos[a[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos[b[i]] &gt; f[mx]) f[++mx] = pos[b[i]];</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = mx, mid;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(f[mid] &gt; pos[b[i]]) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[l] = min(f[l], pos[b[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p>
<p>算法可行性的证明：<br>样例：<br>s : 3 2 1 4 5 =&gt; a b c d e<br>t : 1 2 3 4 5 =&gt; c b a d e<br>如此，只要求出 $t$ 中的 $LIS$ 即可。</p>
<p><a href="https://vjudge.net/problem/UVA-10635" target="_blank" rel="noopener">nlogn求LCS问题</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =<span class="number">250</span>*<span class="number">250</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">int</span> s[maxn],g[maxn],d[maxn];</span><br><span class="line"><span class="keyword">int</span> num[maxn];<span class="comment">//num[x]为整数x的新编号，num[x]=0表示x没有在A中出现过、</span></span><br><span class="line"><span class="keyword">int</span> N,p,q,x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T,tt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;p,&amp;q);</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            num[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q+<span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            <span class="keyword">if</span>(num[x])</span><br><span class="line">                s[n++]=num[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//求解s[0]...s[n-1]的LIS</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">           g[i]=inf;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> k=lower_bound(g+<span class="number">1</span>,g+n+<span class="number">1</span>,s[i])-g;<span class="comment">//在g[1]~g[n]中查找</span></span><br><span class="line">            d[i]=k;</span><br><span class="line">            g[k]=s[i];</span><br><span class="line">            ans=max(ans,d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++tt,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果给的序列不是全排列也问题不大。</p>
<p>对于序列A{},B{},我们可以记录下来B中的每个元素在A中出现的位置，按顺序保存在一个新序列当中，<br>如果有多个位置按倒序写，没有就不用写，然后对这个新序列求一个LIS就是两个序列的LCS长度。<br>证明算法可行性：<br>考虑，对于A序列，下标编号记为1—-n1，B和A的最长公共子序列在A中对应的编号肯定是递增的，</p>
<p>所以B中的这些元素对应的A的编号也是递增的，为了重复计算当有多个编号时倒序存入，表示只能选一个，尽管有多个编号但在B中这只是一个元素。</p>
<p>例子：<br>A={3,9,7,10,3}   B={5,3,7,3}<br>列出B对应的A中的编号(1—5)<br>5:无<br>3:1,5<br>7:3<br>3:1,5</p>
<p><a href="https://www.cnblogs.com/KYSpring/p/9021909.html" target="_blank" rel="noopener">参考博客</a><br><img src="/images/LCS_1.png" alt="nlogn求可重复最长公共子序列"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100000+10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],dp[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;location[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> s1[maxn],s2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=maxn;++i)</span><br><span class="line">        a[i]=dp[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> i,j,k,w,ans,l,r,mid;</span><br><span class="line">    <span class="keyword">int</span> lena=<span class="built_in">strlen</span>(s1),lenb=<span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)location[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(i=lenb<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)location[s2[i]-<span class="string">'a'</span>].push_back(i);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,k=<span class="number">0</span>;s1[i];i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;location[w=s1[i]-<span class="string">'a'</span>].size();++j,++k)</span><br><span class="line">            a[k]=location[w][j];</span><br><span class="line">    dp[<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=ans=<span class="number">1</span>;i&lt;k;++i)&#123;</span><br><span class="line">        l=<span class="number">0</span>;r=ans;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dp[mid]&gt;=a[i])r=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r==ans)</span><br><span class="line">            ans++,dp[r+<span class="number">1</span>]=a[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dp[r+<span class="number">1</span>]&gt;a[i])dp[r+<span class="number">1</span>]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s1,s2)!=EOF)LCS();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="基于位运算的最长公共子序列"><a href="#基于位运算的最长公共子序列" class="headerlink" title="基于位运算的最长公共子序列"></a>基于位运算的最长公共子序列</h3><p>这个是零几年时候ioi集训队的题目。</p>
<p><a href="https://wenku.baidu.com/view/ed99e4f77c1cfad6195fa776.html" target="_blank" rel="noopener">研究报告</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from claris</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BIT = <span class="number">808</span>, E = <span class="number">62</span>;</span><br><span class="line"><span class="keyword">int</span> n1, n2, m, h, i, j, p, ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50000</span>], t[<span class="number">50000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Num</span> &#123;</span></span><br><span class="line">    ll x[BIT];</span><br><span class="line">    Num() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BIT; i++) x[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; x[p / E] |= <span class="number">1L</span>L &lt;&lt; (p % E); &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>&amp;(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] &amp; b.x[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>|(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] | b.x[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>^(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] ^ b.x[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    Num <span class="keyword">operator</span>-(Num b) &#123;</span><br><span class="line">        Num c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) c.x[i] = x[i] - b.x[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">if</span> (c.x[i] &lt; <span class="number">0</span>) c.x[i] += (<span class="number">1L</span>L &lt;&lt; E), c.x[i + <span class="number">1</span>]--;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll o = <span class="number">1</span>, p;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; o = p, i++) &#123;</span><br><span class="line">            p = x[i] &amp; (<span class="number">1L</span>L &lt;&lt; h), (x[i] &lt;&lt;= <span class="number">1</span>) &amp;= ~(<span class="number">1L</span>L &lt;&lt; (h + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (o) x[i] |= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ap[<span class="number">4</span>], x, row[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'A'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'C'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %s %s"</span>, &amp;n1, &amp;n2, s, t);</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (m = (n1 - <span class="number">1</span>) / E, h = (m ? E : n1) - <span class="number">1</span>; i &lt; n1; i++)</span><br><span class="line">        ap[hash(s[i])].<span class="built_in">set</span>(i);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line">        p ^= <span class="number">1</span>;</span><br><span class="line">        x = ap[hash(t[i])] | row[p ^ <span class="number">1</span>];</span><br><span class="line">        row[p ^ <span class="number">1</span>].shl();</span><br><span class="line">        row[p] = x &amp; ((x - row[p ^ <span class="number">1</span>]) ^ x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = m; ~i; i--)</span><br><span class="line">        <span class="keyword">for</span> (j = h; ~j; j--)</span><br><span class="line">            <span class="keyword">if</span> (row[p].x[i] &amp; (<span class="number">1L</span>L &lt;&lt; j)) ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h3>]]></content>
      <categories>
        <category>Dynamic Programming</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>dp计划1</title>
    <url>/2020/03/30/dp1/</url>
    <content><![CDATA[<blockquote>
<p>你能优化来我的人生吗？</p>
</blockquote>
 <font color="black" size="5" face="source code pro">已完成</font><font color="RED" size="5" face="source code pro">？/50</font>

<h2 id="CF446A-DZY-Loves-Sequences"><a href="#CF446A-DZY-Loves-Sequences" class="headerlink" title="CF446A - DZY Loves Sequences"></a>CF446A - DZY Loves Sequences</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给一个长度为 $n$ 的序列，最多可以修改一个位置的数，求最长连续上升子序列。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>当 $a<em>{i+1} &gt; a</em>{i-1}+2$ 时， 改变 $a_i$ 的值来使前后两段合并，反之，分别考虑$a_i$左边那段最长的和右边那段最长的。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], dp[N], l[N], r[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i<span class="number">-1</span>]) dp[i] = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r[n] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; a[i+<span class="number">1</span>]) r[i] = r[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> r[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tp = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= a[i<span class="number">-1</span>] + <span class="number">2</span>)&#123;</span><br><span class="line">            ans = max(ans , tp + r[i+<span class="number">1</span>] - i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ans = max(&#123;ans, tp, r[i+<span class="number">1</span>] - i + <span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CF4D-Mysterious-Present"><a href="#CF4D-Mysterious-Present" class="headerlink" title="CF4D - Mysterious Present"></a>CF4D - Mysterious Present</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给出n个信封，这n个信封有长和宽，给出卡片的尺寸，求取能够装入卡片的最长的序列，序列满足后一个的长和宽一定<code>大于</code>前一个（套娃），求最长的这个序列的长度。</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>$dp[i] = \max_{j=0}^{j-1} { dp[j]+1 } , { a[j].w &lt; a[i].w \  \&amp;\&amp; \ a[j].h &lt; a[i].h }$</p>
<p>记个pre倒序输出答案。</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w , h , id;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">int</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a , <span class="keyword">const</span> node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.w == b.w) <span class="keyword">return</span> a.h &lt; b.h;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n , h , w;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; w &gt;&gt; h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i].w &gt;&gt; a[i].h;</span><br><span class="line">        a[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">    vector&lt;int&gt; dp(n+10), pre(n+10);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].h &lt;= h || a[i].w &lt;= w) <span class="keyword">continue</span>;</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].w &gt; a[j].w <span class="keyword">and</span> a[i].h &gt; a[j].h) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i] &lt; dp[j] + <span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i] = dp[j]+<span class="number">1</span>;</span><br><span class="line">                    pre[i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mx &lt; dp[i]) &#123;</span><br><span class="line">            mx = dp[i];</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function&lt;<span class="keyword">void</span> (<span class="keyword">int</span> )&gt; dfs = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x) <span class="keyword">return</span> ;</span><br><span class="line">        dfs(pre[x]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[x].id &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    dfs(pos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10<br>10 11 12 1 2 3 14 7 15 16</p>
<h2 id="串"><a href="#串" class="headerlink" title="串"></a><a href="https://ac.nowcoder.com/acm/contest/9981/A" target="_blank" rel="noopener">串</a></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>长度不超过n，且包含子序列“us”的、只由小写字母构成的字符串有多少个？ 答案对10^9+7 取模。<br>所谓子序列，指一个字符串删除部分字符（也可以不删）得到的字符串。<br>例如，”unoacscc”包含子序列”us”，但”scscucu”则不包含子序列”us”</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p> dp[i][0]无u</p>
<p> dp[i][1]有u无s</p>
<p> dp[i][2]有us</p>
<p>考虑状态转移。<br>$dp[i][0] = 25*dp[i-1][0]$ 最后有25种选择</p>
<p>$dp[i][1] = 25<em>dp[i-1][1]</em>25+dp[i][0]$前面有u的随意加，无u的加u</p>
<p>$dp[i][2] = dp[i-1][1]+dp[i-1][2]*26$ 有u的串最后一位加上s，加上之前us的串随意加</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="comment">// dp[i][0]无u</span></span><br><span class="line"><span class="comment">// dp[i][1]有u无s</span></span><br><span class="line"><span class="comment">// dp[i][2]有us</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ans = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">25</span>,dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>,dp[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        add(dp[i][<span class="number">0</span>], dp[i<span class="number">-1</span>][<span class="number">0</span>] * <span class="number">25</span> % mod);</span><br><span class="line">        add(dp[i][<span class="number">1</span>], (dp[i<span class="number">-1</span>][<span class="number">1</span>]*<span class="number">25</span>+dp[i<span class="number">-1</span>][<span class="number">0</span>])%mod);</span><br><span class="line">        add(dp[i][<span class="number">2</span>],(dp[i<span class="number">-1</span>][<span class="number">1</span>]+dp[i<span class="number">-1</span>][<span class="number">2</span>]*<span class="number">26</span>)%mod);</span><br><span class="line">        add(ans , dp[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="cf-544-div-3-E-K-Balanced-Teams"><a href="#cf-544-div-3-E-K-Balanced-Teams" class="headerlink" title="cf#544 div.3-E. K Balanced Teams"></a><a href="https://codeforces.com/problemset/problem/1133/E" target="_blank" rel="noopener">cf#544 div.3-E. K Balanced Teams</a></h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, a[N], dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> zz = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[zz] &gt; a[i] + <span class="number">5</span>) zz--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[zz + <span class="number">1</span>][j - <span class="number">1</span>] + (zz + <span class="number">1</span> - i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="美团2017年CodeM大赛-初赛A轮-合并回文子串"><a href="#美团2017年CodeM大赛-初赛A轮-合并回文子串" class="headerlink" title="美团2017年CodeM大赛-初赛A轮-合并回文子串"></a><a href="https://ac.nowcoder.com/acm/problem/13230" target="_blank" rel="noopener">美团2017年CodeM大赛-初赛A轮-合并回文子串</a></h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>$a,b$ 两个串保持字符顺序不变组合成字符串$c$ ,求字符串 $c$ 可能形成的最长回文子串的长度。</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>区间dp。<br><a href="https://ac.nowcoder.com/discuss/391086" target="_blank" rel="noopener">官方题解</a><br>设 $f[l1][r1][l2][r2]$ 表示$A[l1] \sim A[r1]$ 和 $B[l2] \sim B[r2]$ 是否能合并成一个回文串。<br><img src="https://i.loli.net/2020/04/06/zcMgSkNnt9Dl53Q.png" alt="from：牛客 https://blog.nowcoder.net/n/51d6684184b64b1399859ad5a22cbb5f"><br>所以dp转移如图所示，</p>
<ul>
<li>$dp[l1][r1][l2][r2] |= dp[l1+1][r1-1][l2][r2];$</li>
<li>$dp[l1][r1][l2][r2] |= dp[l1+1][r1][l2][r2-1];$</li>
<li>$dp[l1][r1][l2][r2] |= dp[l1][r1][l2+1][r2-1];$</li>
<li>$dp[l1][r1][l2][r2] |= dp[l1][r1-1][l2+1][r2];$<br>需要注意的是，当两个串选出的字符只有一个时候，认为是可以构成回文串的。（边界条件）</li>
</ul>
<p>Complexity: $O(T\times n^4)$</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn][maxn][maxn];</span><br><span class="line"><span class="comment">//区间dp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CASET &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lena = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> lenb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp , <span class="number">0</span> , <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lena; i++) &#123;      <span class="comment">// a的长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= lenb; j++) &#123;  <span class="comment">// b的长度</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l1 = <span class="number">1</span>, r1 = l1 + i - <span class="number">1</span>; r1 &lt;= lena; l1++, r1++) &#123; <span class="comment">//枚举a的起点终点部分</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l2 = <span class="number">1</span>, r2 = l2 + j - <span class="number">1</span>; r2 &lt;= lenb; l2++, r2++) &#123; <span class="comment">//枚举b的起点终点部分</span></span><br><span class="line">                        <span class="keyword">if</span> (i + j &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                            dp[l1][r1][l2][r2] = <span class="number">1</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span>(a[l1]==a[r1]&amp;&amp;r1&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1+<span class="number">1</span>][r1<span class="number">-1</span>][l2][r2];</span><br><span class="line">                            <span class="keyword">if</span>(a[l1]==b[r2]&amp;&amp;r2&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1+<span class="number">1</span>][r1][l2][r2<span class="number">-1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(b[l2]==b[r2]&amp;&amp;r2&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1][r1][l2+<span class="number">1</span>][r2<span class="number">-1</span>];</span><br><span class="line">                            <span class="keyword">if</span>(b[l2]==a[r1]&amp;&amp;r1&gt;<span class="number">0</span>) dp[l1][r1][l2][r2] |= dp[l1][r1<span class="number">-1</span>][l2+<span class="number">1</span>][r2];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (dp[l1][r1][l2][r2])</span><br><span class="line">                            ans = max(ans, r1 - l1 + r2 - l2 + <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2018年长沙理工大学程序设计竞赛-数学考试"><a href="#2018年长沙理工大学程序设计竞赛-数学考试" class="headerlink" title="2018年长沙理工大学程序设计竞赛-数学考试"></a><a href="https://ac.nowcoder.com/acm/problem/15553" target="_blank" rel="noopener">2018年长沙理工大学程序设计竞赛-数学考试</a></h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p>给定一个序列，选取两个不相交的长度为 k 的区间求和， MAX 这个和。</p>
<h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p><a href="https://ac.nowcoder.com/discuss/392146" target="_blank" rel="noopener">nowcoder官方题解</a><br>前缀和+暴力dp<br>对序列求前缀和得到 $sum$ 。设 $dp1_i$表示位置$i$ 之前最大的区间和，$dp2_i$表示位置$i$之后最大区间和。线性更新一下就OK了。</p>
<p>Complexity: $O(T\times n)$</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn], dp1[maxn], dp2[maxn], sum[maxn], n, k, ans;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    CASET &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="built_in">memset</span>(dp1, <span class="number">0xcf</span>, <span class="keyword">sizeof</span> dp1);</span><br><span class="line">        <span class="built_in">memset</span>(dp2, <span class="number">0xcf</span>, <span class="keyword">sizeof</span> dp1);</span><br><span class="line">        ans = -linf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp1 之前一段的max  dp2 之后的一段</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k; i++) &#123;</span><br><span class="line">            dp1[i] = max(sum[i] - sum[i - k], dp1[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &gt;= k + <span class="number">1</span>; i--) &#123;</span><br><span class="line">            dp2[i] = max(sum[i + k - <span class="number">1</span>] - sum[i - <span class="number">1</span>], dp2[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k; i++) &#123;</span><br><span class="line">            ans = max(ans, dp1[i] + dp2[i + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>others 线段树：<a href="https://blog.nowcoder.net/n/7c67622afee94322af471bf99ff6ed6b" target="_blank" rel="noopener">博客</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line">ll sum[<span class="number">422222</span>],a[<span class="number">422222</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> p,l,r;</span><br><span class="line">    ll ma;</span><br><span class="line">&#125;;</span><br><span class="line">stree t[<span class="number">800020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;        <span class="comment">//递归建立线段树</span></span><br><span class="line">    t[p].l=l,t[p].r=r;                <span class="comment">//线段树的区间左端点和右端点赋值。</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;t[p].ma=a[l];<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p*<span class="number">2</span>,l,mid);                <span class="comment">//递归左儿子</span></span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);            <span class="comment">//递归右儿子</span></span><br><span class="line">    t[p].ma=max(t[<span class="number">2</span>*p].ma,t[<span class="number">2</span>*p+<span class="number">1</span>].ma);    <span class="comment">//区间最大值赋值。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;    <span class="comment">//在节点p对应区间找原数组里l到r的最大值</span></span><br><span class="line">    <span class="keyword">if</span>(t[p].l&gt;=l&amp;&amp;t[p].r&lt;=r)<span class="keyword">return</span> t[p].ma;    <span class="comment">//若p对应区间被包含在[l,r]区间里，则直接返回。</span></span><br><span class="line">    <span class="keyword">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll ma=<span class="number">-1e18</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)ma=max(ma,ask(p*<span class="number">2</span>,l,r));    <span class="comment">//递归找左节点</span></span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)ma=max(ma,ask(p*<span class="number">2</span>+<span class="number">1</span>,l,r));    <span class="comment">//递归找右节点</span></span><br><span class="line">    <span class="keyword">return</span> ma;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,k,i,x;</span><br><span class="line">        ll s=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            s+=x;</span><br><span class="line">            sum[i]=s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n-k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            a[i]=sum[i+k<span class="number">-1</span>]-sum[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n-k+<span class="number">1</span>);</span><br><span class="line">        ll ma=<span class="number">-1e18</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>*k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            ma=max(ma,a[i]+ask(<span class="number">1</span>,i+k,n-k+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ma&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="expansion"><a href="#expansion" class="headerlink" title="expansion"></a>expansion</h3><ol>
<li>不限制长度—在一个数列里找两个不相交区间使得他们权值和最大</li>
<li>区间数目变多—找 $m$ 个长度为 $k$ 的不相交区间使得他们的权值和最大 $(1\leq n \leq 5000)$</li>
<li>区间数目变多且不限制长度—找 $m$ 个不相交长度不限的区间使他们的权值和最大 $(1\leq n \leq 5000)$</li>
</ol>
<p><a href="https://ac.nowcoder.com/discuss/392146" target="_blank" rel="noopener">官方</a></p>
<p>some ideas:<br>bonus1: 设 $f<em>i$表示前 $[1,i]$ 的最大子段和， $g_i$表示 $[i,n]$ 的最大子段和。那么有$ans = \mathbb {MAX}{ f_i+g</em>{i+1}}$<br>bonus2: 设 $f<em>{i,j}$ 表示前 $i$ 个数， 分成$j$ 段长度为 $k$ 的连续子段的最大值，那么有转移方程: $f</em>{i,j} = \mathbb{MAX} (f<em>{i-1,j} \ , f</em>{i-k,j-1}+s<em>i-s</em>{i-k})$<br>bonus3: 设$f_{i,j,0/1}$ 表示前 $i$ 个数，分成 $j$ 段，第 $i$个不选/选的最大值，考虑第 $i$ 个是不是新开一段。于是有以下的转移方程。</p>
<script type="math/tex; mode=display">\begin{cases}
f_{i,j,0}=max(f_{i-1,j,0},f_{i-1,j,1})\\
f_{i,j,1}=max(f_{i-1,j,1},f_{i-1,j-1,1},f_{i-1,j-1,0})+a_i\\
\end{cases}</script><h2 id><a href="#" class="headerlink" title=" "></a> </h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><h2 id="Codeforces-Round-635-Div-2-E-Kaavi-and-Magic-Spell"><a href="#Codeforces-Round-635-Div-2-E-Kaavi-and-Magic-Spell" class="headerlink" title="Codeforces Round #635 (Div. 2)-E. Kaavi and Magic Spell"></a><a href="https://codeforces.com/contest/1337/problem/E" target="_blank" rel="noopener">Codeforces Round #635 (Div. 2)-E. Kaavi and Magic Spell</a></h2><h3 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h3><p>给定一个长度为 $n$ 的字符串 $S$ 和一个长度为 $m$ 的字符串$T$, 有 $1\le m \le n$,开始有一个空串 $A$, 接下来对 $S$ 串进行 n 次操作：</p>
<ol>
<li>把 S 的首字符加到 A 的开头</li>
<li>把 S 的首字符加到 A 的结尾<br>问在操作过程中使得 A 的前 m 个字符为 字符串 T 的方案数。认为长度不同或者是操作序列中有某个地方不同是不同情况。</li>
</ol>
<h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution:"></a>Solution:</h3><p>区间 $DP$。<br>不妨假设 $T$ 串为 “asd”<br>$A$ 串为”asd<strong><em>*</em></strong>(补到与S串等长)”<br>定义 $dp[l][r]$ 为满足 $\forall \ l \le i \le r, S_i=T_i$能构造出来的操作序列。<br>假设删除$S_i$往 $A$ 里添加（此时$A$有$i-1$个元素），考虑状态转移方程。<br>考虑两个东西： $dp[l][r]$和$r-l+1=i$ </p>
<ul>
<li>如果有$S_i=T_l$ 那么就把 $S_i$放到$[l+1,r]$区间的前面，构成$[l,r]$ 即有$dp[l][r]+=dp[l+1][r]$</li>
<li>如果有$S_i=T_r$ 那么就把 $S_i$放到$[l,r-1]$区间的后面，构成$[l,r]$ 即有$dp[l][r]+=dp[l][r-1]$</li>
</ul>
<p>初始化状态：区间长度为 1 时如果有字符相等那么就会存在$dp[i][i] += dp[i][i-1]$的情况，对于这种情况其实就是单个字符$S_i$在空串基础上前插或后插后成为了符合条件的串之一，实际上应该是$dp[i][i] += 1$，所以我们就预处理一下使$ dp[i][i-1] = 1 $即可。</p>
<p>统计答案：即 统计 A 的前缀部分 $ans=\sum_{i=m}^ndp[1][i]$</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], t[N];</span><br><span class="line">ll dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll &amp;a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    a += b;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= mod) a -= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s + <span class="number">1</span> &gt;&gt; t + <span class="number">1</span>;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">10</span>; i++) &#123;</span><br><span class="line">        dp[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, len = <span class="number">1</span>; i &lt;= n; i++, len++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>;; l++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(r &gt; n)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; m || s[i] == t[l]) &#123;</span><br><span class="line">                add(dp[l][r], dp[l + <span class="number">1</span>][r]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (r &gt; m || s[i] == t[r]) &#123;</span><br><span class="line">                add(dp[l][r], dp[l][r - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= m; i--) &#123;</span><br><span class="line">        add(ans, dp[<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><h2 id="EDU59-E-Vasya-and-Binary-String"><a href="#EDU59-E-Vasya-and-Binary-String" class="headerlink" title="EDU59-E. Vasya and Binary String"></a><a href="https://codeforces.com/contest/1107/problem/E" target="_blank" rel="noopener">EDU59-E. Vasya and Binary String</a></h2><h3 id="Description：-1"><a href="#Description：-1" class="headerlink" title="Description："></a>Description：</h3><p>给个长度为 $n (n\le100)$ 的 $01$ 串 $s$ ,以及长度为 $n$ 数组 $a$.每次可以选择任意长度 $L$ 的连续子串（要求子串每个字符相同）从原串中去掉，并获得 $a[L]$ 的值。问可能获得的最大值</p>
<h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution:"></a>Solution:</h3><p>观察数据范围，考虑到用区间 $dp$。<br>令$dp[ l ][ r ][ k ] $代表的是 $[l, r]$这段区间内，前面有 $k-1$ 个连续的和 $s[l]$ 相同且连续的字符传进来的最大值。<br>$solve( l, r, k)$ 代表的是处理区间$[L, R]$, 正在处理 $[L, R]$这个区间， 前面有$k-1$个连续的和$s[l]$相同且连续的字符。<br>考虑转移状态方程：<br>$dp[l][r][k] = a[k] + solve(l+1,r,1)$。 在 $l$ 这个位置切断连续字符。<br>$dp[l][r][k] = solve( l+1, i-1, 1) + solve(i, r, k+1)$  其中 $s[l] == s[i]$  加入新的连续字符。</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">201</span> + <span class="number">10</span>;</span><br><span class="line">ll n, a[N], dp[N][N][N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> a[k];</span><br><span class="line">    ll &amp;ret = dp[l][r][k];</span><br><span class="line">    <span class="keyword">if</span> (ret) <span class="keyword">return</span> ret;</span><br><span class="line">    ret = a[k] + solve(l + <span class="number">1</span>, r, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[l]) &#123;</span><br><span class="line">            ret = max(ret, solve(i, r, k + <span class="number">1</span>) + solve(l + <span class="number">1</span>, i - <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; solve(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Beautiful-Mirrors"><a href="#Beautiful-Mirrors" class="headerlink" title="Beautiful Mirrors"></a>Beautiful Mirrors</h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>魔镜魔镜我美嘛easy版本，一个人问魔镜他美嘛，魔镜会有$p_i$ %d 概率说他美，他美就会开心，否则不开心，回到第一天，求开心的期望天数。</p>
<h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>概率求期望题目<br>不妨设 dp[i] 表示第i到 n+1 天期望步数。那么有 dp[n+1] = 0<br>则有：</p>
<script type="math/tex; mode=display">\begin{cases}
dp_1=1+p_1\cdot dp_2+ (1-p_1)\cdot dp_1 \\ 
dp_2=1+p_2\cdot dp_3+ (1-p_2)\cdot dp_1 \\
\cdots\\
dp_n=1+p_n\cdot dp_{n+1}+(1-p_n)dp_1
\end{cases}</script><p>求解得到：</p>
<script type="math/tex; mode=display">\begin{cases}
dp_1=dp_2+\frac{1}{p_1} \\ 
dp_1=dp_3+\frac{1}{p_2}+\frac{1}{p2\cdot p1} \\
\cdots\\
dp_1=dp_{n+1}+\frac{1}{p_n}+\frac{1}{p_n\cdot p_{n-1}}+\cdots +\frac{1}{p_n\cdot p_{n-1}\cdots p_1}
\end{cases}</script><p>推得：<br>$dp<em>1=\frac{1+p_1+p_1p_2+\cdots p_1p_2\cdots p</em>{n-1}}{p_1p_2\cdots p_n}$</p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ll dp[maxn], a[maxn], b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">0</span>, n, x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    ll inv = get_inv(<span class="number">100</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        a[i] = x * inv % mod;</span><br><span class="line">        b[i] = get_inv(a[i], mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i] = (dp[i<span class="number">-1</span>] + <span class="number">1</span>) * b[i] % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Beautiful-Mirrors-with-queries"><a href="#Beautiful-Mirrors-with-queries" class="headerlink" title="Beautiful Mirrors with queries"></a><a href="https://codeforces.com/contest/1264/problem/C" target="_blank" rel="noopener">Beautiful Mirrors with queries</a></h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>在上题的基础上，要求的是回到 $u$ 。</p>
<h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>考虑$[L , R], ans = \frac{1+p<em>l+p_lp</em>{l+1}\cdots +(p<em>l\cdots p_r)}{p_lp</em>{l+1}\cdots p_r}$<br>对于求这个，考虑:<br>定义 $s_i=p_ip_2\cdots p_i,t_i=p_1+p_1\cdot p_2+\cdots + p_1 p_2\cdots p_i$</p>
<p>维护前缀积和累和<br>$ans=\frac{A}{B}, A=\frac{t<em>{r-1}-r</em>{l-2}}{s<em>{l-2}}, B=\frac{s_r}{r</em>{l-1}}$</p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>&lt;ll&gt; S;</span><br><span class="line"><span class="keyword">int</span> n, q, v[maxn];</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn], inv[maxn], s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">1</span>) &#123;</span><br><span class="line">        ll A = (t[r - <span class="number">1</span>] + <span class="number">1</span>) % mod;</span><br><span class="line">        ll B = s[r] % mod;</span><br><span class="line">        <span class="keyword">return</span> A * get_inv(B, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ll A = (t[r - <span class="number">1</span>] - t[l - <span class="number">2</span>] + mod) % mod * get_inv(s[l - <span class="number">1</span>], mod) % mod;</span><br><span class="line">    ll B = s[r] * get_inv(s[l - <span class="number">1</span>], mod) % mod;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "A == " &lt;&lt; A &lt;&lt; "  B === " &lt;&lt; B &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> A * get_inv(B, mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    S.insert(<span class="number">1</span>);</span><br><span class="line">    S.insert(n + <span class="number">1</span>);</span><br><span class="line">    v[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> inv100 = get_inv(<span class="number">100</span>, mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        p[i] = p[i] * inv100 % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">1</span>, t[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] * p[i] % mod;</span><br><span class="line">        t[i] = (t[i - <span class="number">1</span>] + s[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = query(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (v[x]) &#123;</span><br><span class="line">            v[x] = <span class="number">0</span>;</span><br><span class="line">            S.erase(x);</span><br><span class="line">            <span class="keyword">auto</span> L = S.lower_bound(x);</span><br><span class="line">            <span class="comment">// auto L = lower_bound(ALL(S),x);</span></span><br><span class="line">            <span class="keyword">auto</span> R = L;</span><br><span class="line">            L--;</span><br><span class="line">            <span class="comment">// ans = (ans + query(*L, *R - 1)) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans - query(*L, x - 1) + mod) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans - query(x, *R - 1) + mod) % mod;</span></span><br><span class="line">            add(ans, query(*L, *R - <span class="number">1</span>));</span><br><span class="line">            dec(ans, query(*L, x - <span class="number">1</span>));</span><br><span class="line">            dec(ans, query(x, *R - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// auto L = lower_bound(ALL(S),x);</span></span><br><span class="line">            <span class="keyword">auto</span> L = S.lower_bound(x);</span><br><span class="line">            <span class="keyword">auto</span> R = L;</span><br><span class="line">            L--;</span><br><span class="line">            <span class="comment">// ans = (ans - query(*L, *R - 1) + mod) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans + query(*L, x - 1)) % mod;</span></span><br><span class="line">            <span class="comment">// ans = (ans + query(x, *R - 1)) % mod;</span></span><br><span class="line">            dec(ans, query(*L, *R - <span class="number">1</span>));</span><br><span class="line">            add(ans, query(*L, x - <span class="number">1</span>));</span><br><span class="line">            add(ans, query(x, *R - <span class="number">1</span>));</span><br><span class="line">            S.insert(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><h3 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h3><h2 id="-4"><a href="#-4" class="headerlink" title=" "></a> </h2><h3 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h3><h2 id="-5"><a href="#-5" class="headerlink" title=" "></a> </h2><h3 id="Description-13"><a href="#Description-13" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-15"><a href="#Code-15" class="headerlink" title="Code"></a>Code</h3><h2 id="-6"><a href="#-6" class="headerlink" title=" "></a> </h2><h3 id="Description-14"><a href="#Description-14" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-16"><a href="#Code-16" class="headerlink" title="Code"></a>Code</h3><h2 id="-7"><a href="#-7" class="headerlink" title=" "></a> </h2><h3 id="Description-15"><a href="#Description-15" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-17"><a href="#Code-17" class="headerlink" title="Code"></a>Code</h3><h2 id="-8"><a href="#-8" class="headerlink" title=" "></a> </h2><h3 id="Description-16"><a href="#Description-16" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-18"><a href="#Code-18" class="headerlink" title="Code"></a>Code</h3><h2 id="-9"><a href="#-9" class="headerlink" title=" "></a> </h2><h3 id="Description-17"><a href="#Description-17" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-19"><a href="#Code-19" class="headerlink" title="Code"></a>Code</h3><h2 id="-10"><a href="#-10" class="headerlink" title=" "></a> </h2><h3 id="Description-18"><a href="#Description-18" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-20"><a href="#Solution-20" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-20"><a href="#Code-20" class="headerlink" title="Code"></a>Code</h3><h2 id="-11"><a href="#-11" class="headerlink" title=" "></a> </h2><h3 id="Description-19"><a href="#Description-19" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-21"><a href="#Solution-21" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-21"><a href="#Code-21" class="headerlink" title="Code"></a>Code</h3><h2 id="-12"><a href="#-12" class="headerlink" title=" "></a> </h2><h3 id="Description-20"><a href="#Description-20" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-22"><a href="#Solution-22" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-22"><a href="#Code-22" class="headerlink" title="Code"></a>Code</h3><h2 id="-13"><a href="#-13" class="headerlink" title=" "></a> </h2><h3 id="Description-21"><a href="#Description-21" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-23"><a href="#Solution-23" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-23"><a href="#Code-23" class="headerlink" title="Code"></a>Code</h3><h2 id="-14"><a href="#-14" class="headerlink" title=" "></a> </h2><h3 id="Description-22"><a href="#Description-22" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-24"><a href="#Solution-24" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-24"><a href="#Code-24" class="headerlink" title="Code"></a>Code</h3><h2 id="-15"><a href="#-15" class="headerlink" title=" "></a> </h2><h3 id="Description-23"><a href="#Description-23" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-25"><a href="#Solution-25" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-25"><a href="#Code-25" class="headerlink" title="Code"></a>Code</h3><h2 id="-16"><a href="#-16" class="headerlink" title=" "></a> </h2><h3 id="Description-24"><a href="#Description-24" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-26"><a href="#Solution-26" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-26"><a href="#Code-26" class="headerlink" title="Code"></a>Code</h3><h2 id="-17"><a href="#-17" class="headerlink" title=" "></a> </h2><h3 id="Description-25"><a href="#Description-25" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-27"><a href="#Solution-27" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-27"><a href="#Code-27" class="headerlink" title="Code"></a>Code</h3><h2 id="-18"><a href="#-18" class="headerlink" title=" "></a> </h2><h3 id="Description-26"><a href="#Description-26" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-28"><a href="#Solution-28" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-28"><a href="#Code-28" class="headerlink" title="Code"></a>Code</h3><h2 id="-19"><a href="#-19" class="headerlink" title=" "></a> </h2><h3 id="Description-27"><a href="#Description-27" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-29"><a href="#Solution-29" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-29"><a href="#Code-29" class="headerlink" title="Code"></a>Code</h3><h2 id="-20"><a href="#-20" class="headerlink" title=" "></a> </h2><h3 id="Description-28"><a href="#Description-28" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-30"><a href="#Solution-30" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-30"><a href="#Code-30" class="headerlink" title="Code"></a>Code</h3><h2 id="-21"><a href="#-21" class="headerlink" title=" "></a> </h2><h3 id="Description-29"><a href="#Description-29" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-31"><a href="#Solution-31" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-31"><a href="#Code-31" class="headerlink" title="Code"></a>Code</h3><h2 id="-22"><a href="#-22" class="headerlink" title=" "></a> </h2><h3 id="Description-30"><a href="#Description-30" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-32"><a href="#Solution-32" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-32"><a href="#Code-32" class="headerlink" title="Code"></a>Code</h3><h2 id="-23"><a href="#-23" class="headerlink" title=" "></a> </h2><h3 id="Description-31"><a href="#Description-31" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-33"><a href="#Solution-33" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-33"><a href="#Code-33" class="headerlink" title="Code"></a>Code</h3><h2 id="-24"><a href="#-24" class="headerlink" title=" "></a> </h2><h3 id="Description-32"><a href="#Description-32" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-34"><a href="#Solution-34" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-34"><a href="#Code-34" class="headerlink" title="Code"></a>Code</h3><h2 id="-25"><a href="#-25" class="headerlink" title=" "></a> </h2><h3 id="Description-33"><a href="#Description-33" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-35"><a href="#Solution-35" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-35"><a href="#Code-35" class="headerlink" title="Code"></a>Code</h3><h2 id="-26"><a href="#-26" class="headerlink" title=" "></a> </h2><h3 id="Description-34"><a href="#Description-34" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-36"><a href="#Solution-36" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-36"><a href="#Code-36" class="headerlink" title="Code"></a>Code</h3><h2 id="-27"><a href="#-27" class="headerlink" title=" "></a> </h2><h3 id="Description-35"><a href="#Description-35" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-37"><a href="#Solution-37" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-37"><a href="#Code-37" class="headerlink" title="Code"></a>Code</h3><h2 id="-28"><a href="#-28" class="headerlink" title=" "></a> </h2><h3 id="Description-36"><a href="#Description-36" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-38"><a href="#Solution-38" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-38"><a href="#Code-38" class="headerlink" title="Code"></a>Code</h3><h2 id="-29"><a href="#-29" class="headerlink" title=" "></a> </h2><h3 id="Description-37"><a href="#Description-37" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-39"><a href="#Solution-39" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-39"><a href="#Code-39" class="headerlink" title="Code"></a>Code</h3><h2 id="-30"><a href="#-30" class="headerlink" title=" "></a> </h2><h3 id="Description-38"><a href="#Description-38" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-40"><a href="#Solution-40" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-40"><a href="#Code-40" class="headerlink" title="Code"></a>Code</h3><h2 id="-31"><a href="#-31" class="headerlink" title=" "></a> </h2><h3 id="Description-39"><a href="#Description-39" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-41"><a href="#Solution-41" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-41"><a href="#Code-41" class="headerlink" title="Code"></a>Code</h3><h2 id="-32"><a href="#-32" class="headerlink" title=" "></a> </h2><h3 id="Description-40"><a href="#Description-40" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-42"><a href="#Solution-42" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-42"><a href="#Code-42" class="headerlink" title="Code"></a>Code</h3><h2 id="-33"><a href="#-33" class="headerlink" title=" "></a> </h2><h3 id="Description-41"><a href="#Description-41" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-43"><a href="#Solution-43" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-43"><a href="#Code-43" class="headerlink" title="Code"></a>Code</h3><h2 id="-34"><a href="#-34" class="headerlink" title=" "></a> </h2><h3 id="Description-42"><a href="#Description-42" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-44"><a href="#Solution-44" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-44"><a href="#Code-44" class="headerlink" title="Code"></a>Code</h3><h2 id="-35"><a href="#-35" class="headerlink" title=" "></a> </h2><h3 id="Description-43"><a href="#Description-43" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-45"><a href="#Solution-45" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-45"><a href="#Code-45" class="headerlink" title="Code"></a>Code</h3><h2 id="-36"><a href="#-36" class="headerlink" title=" "></a> </h2><h3 id="Description-44"><a href="#Description-44" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-46"><a href="#Solution-46" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-46"><a href="#Code-46" class="headerlink" title="Code"></a>Code</h3><h2 id="-37"><a href="#-37" class="headerlink" title=" "></a> </h2><h3 id="Description-45"><a href="#Description-45" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-47"><a href="#Solution-47" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-47"><a href="#Code-47" class="headerlink" title="Code"></a>Code</h3><h2 id="-38"><a href="#-38" class="headerlink" title=" "></a> </h2><h3 id="Description-46"><a href="#Description-46" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-48"><a href="#Solution-48" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-48"><a href="#Code-48" class="headerlink" title="Code"></a>Code</h3><h2 id="-39"><a href="#-39" class="headerlink" title=" "></a> </h2><h3 id="Description-47"><a href="#Description-47" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-49"><a href="#Solution-49" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-49"><a href="#Code-49" class="headerlink" title="Code"></a>Code</h3><h2 id="-40"><a href="#-40" class="headerlink" title=" "></a> </h2><h3 id="Description-48"><a href="#Description-48" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-50"><a href="#Solution-50" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-50"><a href="#Code-50" class="headerlink" title="Code"></a>Code</h3><h2 id="-41"><a href="#-41" class="headerlink" title=" "></a> </h2><h3 id="Description-49"><a href="#Description-49" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-51"><a href="#Solution-51" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-51"><a href="#Code-51" class="headerlink" title="Code"></a>Code</h3>]]></content>
      <categories>
        <category>farm plz!</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>NOI online 题解</title>
    <url>/2020/03/27/NOI2020online/</url>
    <content><![CDATA[<h1 id="普及组"><a href="#普及组" class="headerlink" title="普及组"></a>普及组</h1><h2 id="T1文具采购"><a href="#T1文具采购" class="headerlink" title="T1文具采购"></a><a href="https://www.luogu.com.cn/problem/P6188" target="_blank" rel="noopener">T1文具采购</a></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定整数 $n$ ,求出 $a,b,c$ 满足以下性质</p>
<ol>
<li>$7a+4b+3c = n$</li>
<li>$MAX\  (min (a,b,c))$</li>
<li>$MAX(a+b+c)$<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3>针对性质 $2$，我们令 $k =MAX\  (min (a,b,c))$,那么易得 $k$ 在 $\frac{n}{7+4+3}$ <em>附近</em></li>
</ol>
<p>然后，由数论知识可知，对于质数 $p,q$ ，用 $X=ap+bq(a,b\ge 0)$,不能组成的最大的 $X=(p-1)*(q-1)-1$</p>
<p>对于本题，发现不能组成的数字为 $1 , 2 ,5.（3，4来组数）$</p>
<p>然后我们很容易想到当$x = 15$ 时候，虽然 $x\equiv 1\pmod {14}$,但他其实有解，不难想到这个边间为 $19$（因为当剩下的数字$\ge20$ 时候，条件 2 不符合了。）</p>
<p>预处理一下就行了。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 7a+4b+3c=n</span></span><br><span class="line"><span class="comment">// max (min(a,b,c))</span></span><br><span class="line"><span class="comment">// a+b+c MAX</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">20</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0xff</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; <span class="number">7</span> * a &lt;= i; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; <span class="number">7</span> * a + <span class="number">4</span> * b &lt;= i; b++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i - <span class="number">7</span> * a - <span class="number">4</span> * b) % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> c = (i - <span class="number">7</span> * a - <span class="number">4</span> * b) / <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][<span class="number">0</span>] == <span class="number">-1</span>) &#123;</span><br><span class="line">                        dp[i][<span class="number">0</span>] = a, dp[i][<span class="number">1</span>] = b, dp[i][<span class="number">2</span>] = c;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span> || n == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>, <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">14</span>; i &gt;= n / <span class="number">14</span> - <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = n - <span class="number">14</span> * i;</span><br><span class="line">        <span class="keyword">if</span> (dp[left][<span class="number">0</span>] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i + dp[left][<span class="number">0</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; i + dp[left][<span class="number">1</span>] &lt;&lt; <span class="string">' '</span></span><br><span class="line">                 &lt;&lt; i + dp[left][<span class="number">2</span>];</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id><a href="#" class="headerlink" title=" "></a> </h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><h2 id="魔法"><a href="#魔法" class="headerlink" title="魔法"></a><a href="https://www.luogu.com.cn/problem/P6190" target="_blank" rel="noopener">魔法</a></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>中文题面略略略</p>
<p>挂两个<del>similar</del>的题<br><a href="http://codeforces.com/problemset/problem/576/D" target="_blank" rel="noopener">Codeforces Round #319 (Div. 1)-D. Flights for Regular Customers</a><br><a href="http://poj.org/problem?id=3613" target="_blank" rel="noopener">poj3613 牛站</a></p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>法一：倍增 $Floyd$<br>法二：广义矩阵快速幂优化 $dp$<br>本文采用法二<del>我是不会说我没做过倍增Floyd的</del></p>
<p>不妨令$dp<em>{k,i,j}$ 表示从 $i$ 到 $j$ ，使用魔法次数不超过 $k$ 次的所有方案钟的最短路。<br>容易得到转移方程为: $$dp</em>{k,i,j} = min(dp<em>{k-1,i,t}+dp</em>{1,t,j})$$<br>由<del>广义矩阵乘法具有结合率</del>(不知道这样描述对不对。)<br><del>但在离散中是有这样一个<a href="https://www.luogu.com.cn/blog/chhokmah/solution-p6190" target="_blank" rel="noopener">结论</a>的</del>：</p>
<blockquote>
<p>对于一个邻接矩阵 $G$ ，那么 $G^k$ 表示的就是<strong>恰好</strong>经过 $k$ 次后的状态。</p>
</blockquote>
<p>这为矩阵快速幂优化提供理论基础。</p>
<p>考虑子问题，<br>当 $k=0$ 时，$floyd$ 解决即可。<br>当 $k=1$ 时， 即用一次魔法，枚举每一条边 $(u,v,w)$, $dp<em>{1,i,j}=dp</em>{0,i,u}-w+dp_{0,v,j}$ &emsp;时间复杂度 $O(n^2m)$</p>
<p>总时间复杂度为 $O(n^3logK+n^2m)$</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><p>写矩阵一定要注意初始化的问题！！！！<br>矩阵不规范，debug两行泪<br>注意，后来的a矩阵就是用了一次魔法的矩阵<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">2505</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, u, v, w, dis[MAXN][MAXN];</span><br><span class="line"><span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; e[MAXM];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[MAXN][MAXN];</span><br><span class="line">    Matrix() &#123;&#125;</span><br><span class="line">    Matrix(<span class="keyword">int</span> tmp[MAXN][MAXN]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) a[i][j] = tmp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(Matrix <span class="keyword">const</span> &amp;b) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp[MAXN][MAXN];</span><br><span class="line">        <span class="built_in">memset</span>(tmp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                    tmp[i][j] = min(tmp[i][j], a[i][k] + b.a[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Matrix(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span>^(Matrix base, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        Matrix res = base;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">for</span> (; n; n &gt;&gt;= <span class="number">1</span>, base = base * base) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                res = res * base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*Matrix Qpow(ll p)  //矩阵快速幂,求a^p</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        --p;</span></span><br><span class="line"><span class="comment">        Matrix res = *this, cur = *this;</span></span><br><span class="line"><span class="comment">        while (p) &#123;</span></span><br><span class="line"><span class="comment">            if (p &amp; 1) res = res * cur;</span></span><br><span class="line"><span class="comment">            cur = cur * cur;</span></span><br><span class="line"><span class="comment">            p &gt;&gt;= 1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return res;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125; a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dis[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        e[i] = &#123;u, v, w&#125;;</span><br><span class="line">        dis[u][v] = min(dis[u][v], w);</span><br><span class="line">    &#125;</span><br><span class="line">    floyd(n);</span><br><span class="line">    a = Matrix(dis);</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; dis[<span class="number">1</span>][n], <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [u, v, w] = e[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt;= n; s++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= n; t++) &#123;</span><br><span class="line">                a.a[s][t] = min(a.a[s][t], dis[s][u] + dis[v][t] - w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix ans = Matrix((a ^ k).a);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.a[<span class="number">1</span>][n];</span><br><span class="line">    <span class="comment">// cout &lt;&lt; a.Qpow(k).a[1][n];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="提高组"><a href="#提高组" class="headerlink" title="提高组"></a>提高组</h1><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><h2 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><h2 id="-3"><a href="#-3" class="headerlink" title=" "></a> </h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3>]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>Online</tag>
      </tags>
  </entry>
  <entry>
    <title>hash在ACM中的一些运用</title>
    <url>/2020/03/24/hash/</url>
    <content><![CDATA[<p><kbd> 我装作看窗外的样子，</kbd></p>
<p><kbd> 看窗户上映着的你。</kbd></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>哈希表是一种高效的数据结构 。</li>
<li>散列方法是使用函数 h 将 U 映射到表 $T[0..m-1]$ 的下标上$（m=O(|U|)）$。这样以 $U$ 中关键字为自变量，以 $h$ 为函数的运算结果就是相应结点的存储地址。从而达到在 $O(1)$ 时间内就可完成查找。<br><img src="https://i.loli.net/2020/03/24/oL3vCnmfZhlugtb.png" alt="用散列函数$h$将关键字映射到散列表中"></li>
</ul>
<h2 id="Hash-表"><a href="#Hash-表" class="headerlink" title="Hash 表"></a>Hash 表</h2><p>Hash 表又称为散列表，一般由 Hash 函数（散列函数）与链表结构共同实现。与离散化思想类似，当我们要对若干复杂信息进行统计时，可以用 <strong>Hash</strong> 函数把这些复杂信息映射到一个容易维护的值域内，因为值域变简单没有可能两个不同的原始信息被 <strong>Hash</strong> 函数映射为相同的值。所以我们需要处理这种<strong>冲突情况</strong>。</p>
<p>整数 Hash 函数的构造方法一般有直接取余法，乘积取整法，平方取中法，等等，此处不详说。</p>
<h2 id="字符串-Hash"><a href="#字符串-Hash" class="headerlink" title="字符串 Hash"></a>字符串 Hash</h2><h2 id="树-Hash"><a href="#树-Hash" class="headerlink" title="树 Hash"></a>树 Hash</h2><h2 id="矩阵-Hash"><a href="#矩阵-Hash" class="headerlink" title="矩阵 Hash"></a>矩阵 Hash</h2><p>即二维 Hash</p>
<h2 id="杂言"><a href="#杂言" class="headerlink" title="杂言"></a>杂言</h2><h3 id="适合-hash-的素数"><a href="#适合-hash-的素数" class="headerlink" title="适合 hash 的素数"></a>适合 hash 的素数</h3><p>1572869, 3145739, 6291469, 12582917, 25165843, 50331653<br><img src="https://i.loli.net/2020/03/24/RhcjKgl5F4XQv8O.png" alt="good hash table primes"><br><a href="https://planetmath.org/goodhashtableprimes" target="_blank" rel="noopener">https://planetmath.org/goodhashtableprimes</a></p>
<h3 id="pb-ds-中的哈希表"><a href="#pb-ds-中的哈希表" class="headerlink" title="pb_ds 中的哈希表"></a>pb_ds 中的哈希表</h3><p><a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/policy_data_structures_using.html" target="_blank" rel="noopener">wiki</a></p>
<p><a href="https://codeforces.com/blog/entry/60737" target="_blank" rel="noopener"><strong>CFblog</strong> C++ STL: Order of magnitude faster hash tables with Policy Based Data Structures </a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line">gp_hash_table&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">cc_hash_table&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br></pre></td></tr></table></figure>
<p>支持 find 和 operator[]</p>
<p>支持了两款 hash_table</p>
<p>cc_hash_table 是拉链法</p>
<p>gp_hash_table 是查探法 <del>稍稍快点</del></p>
<h2 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h2><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p><a href="https://zhuanlan.zhihu.com/p/89381173" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89381173</a></p>
<p><a href="https://planetmath.org/goodhashtableprimes" target="_blank" rel="noopener">https://planetmath.org/goodhashtableprimes</a></p>
<p><a href="https://codeforces.com/problemset?tags=hashing" target="_blank" rel="noopener">https://codeforces.com/problemset?tags=hashing</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>Atc Educational DP Contest</title>
    <url>/2020/03/18/atcoder_DP_contest/</url>
    <content><![CDATA[<p><a href="https://atcoder.jp/contests/dp" target="_blank" rel="noopener">传送门</a></p>
<p>体现了<strong>Educational</strong>。感觉对于萌新（我）或者回顾回顾还是不错的。</p>
<h2 id="A-Frog-1"><a href="#A-Frog-1" class="headerlink" title="A - Frog 1"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_a" target="_blank" rel="noopener">A - Frog 1</a></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 个石头,石头高度分别为$h_1…h_n$。现在要求小青蛙从 $1$ 号石头跳到 $n$ 号石头，每次小青蛙可以选择从 $i$ 号石头跳到 $i+1$ 或 $i+2$ 号石头，代价是起跳点与落点的高度差的绝对值。求最小代价。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>暴力dp。</p>
<p>令 $dp[i]$ 表示小青蛙跳到第 $i$ 号石头时的最小代价。</p>
<p>Complexity: $O(n)$</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn],a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">            dp[i] = min(dp[i<span class="number">-2</span>]+<span class="built_in">abs</span>(a[i]-a[i<span class="number">-2</span>]),<span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>])+dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = <span class="built_in">abs</span>(a[i]-a[i<span class="number">-1</span>])+dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B-Frog-2"><a href="#B-Frog-2" class="headerlink" title="B - Frog 2"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_b" target="_blank" rel="noopener">B - Frog 2</a></h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 个石头，第 $i$ 个石头的高度为 $h_i$ 。现要求小青蛙从 $1$ 号石头跳到 $n$ 号石头，每次小青蛙可以选择从 $i$ 号石头跳到 $i+t(1\le t\le k)$ 号石头，代价是起跳点与落点的高度差的绝对值。求最小代价。</p>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>暴力dp</p>
<p>设 $dp[i]$ 为小青蛙跳到第 $i$ 号石头时最小代价。</p>
<p>Complexity: $O(k*n)$</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n , k,a[maxn],dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i-j&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            dp[i] = min(dp[i-j]+<span class="built_in">abs</span>(a[i]-a[i-j]),dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i = 1; i &lt;=n ; i++)&#123;</span></span><br><span class="line"><span class="comment">        printf("dp[%d]===%d\n",i,dp[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="C-Vacation"><a href="#C-Vacation" class="headerlink" title="C - Vacation"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_c" target="_blank" rel="noopener">C - Vacation</a></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>Taro有 $n$ 天假期，每天他可以进行三种活动中的一种，每种活动给他带来的愉悦值各不相同。如果当天进行过某一种活动，第二天即不能进行另一种活动，求 $n$ 天后Taro能获得的最大愉悦值。</p>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>令 $dp[i][j]$ 分别记录在第 $i$ 天选做第 $j$ 件娱乐活动的最大愉悦值。</p>
<p>Complexity: $O(n)$</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n , a[maxn], b[maxn], c[maxn], dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>],dp[<span class="number">1</span>][<span class="number">2</span>] = b[<span class="number">1</span>],dp[<span class="number">1</span>][<span class="number">3</span>]=c[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = a[i]+max(dp[i<span class="number">-1</span>][<span class="number">2</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]);</span><br><span class="line">        dp[i][<span class="number">3</span>] = c[i]+max(dp[i<span class="number">-1</span>][<span class="number">2</span>],dp[i<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">        dp[i][<span class="number">2</span>] = b[i]+max(dp[i<span class="number">-1</span>][<span class="number">1</span>],dp[i<span class="number">-1</span>][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(max(dp[n][<span class="number">1</span>],dp[n][<span class="number">2</span>]),dp[n][<span class="number">3</span>]) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Knapsack-1"><a href="#D-Knapsack-1" class="headerlink" title="D - Knapsack 1"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_d" target="_blank" rel="noopener">D - Knapsack 1</a></h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>01背包板子题</p>
<h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>设 $dp[i]$ 为背包重量不超过 $i$ 时候最大价值。<br>Complexity: $O(N*W)$</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> N , W, w[maxn],v[maxn],dp[<span class="number">105</span>][<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; W;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= W;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i] &lt;= j)&#123;</span><br><span class="line">                dp[i][j] = max(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Knapsack-2"><a href="#E-Knapsack-2" class="headerlink" title="E - Knapsack 2"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_e" target="_blank" rel="noopener">E - Knapsack 2</a></h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>$n$ 件物品，大小和权值分别为 $w_i$，$v_i$,给定背包最大容量$W$ ，$MAX$ 化价值。</p>
<h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>由于 $W$ 很大，所以不能如同 D 题的做法，但是发现价值很小，对价值进行背包。求出来达到某一个权值最小的重量，然后找到满足限制的最大的价值即可。(因为，如果能达到权值比这个还大的点，那么这个点很显然也是可以达到的。)</p>
<p>令 $dp[i]$ 表示装填价值为 $i$ 的物品的最小权值。<br>Complexity: $O(N*v)$</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> v[maxn], w[maxn], dp[maxn], N , V;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp , <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> zz = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = zz + w[i]; j &gt;= w[i]; j--)&#123;</span><br><span class="line">            dp[j] = min(dp[j], dp[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        zz+=w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = zz;  i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        dp[i] = min(dp[i],dp[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// for(int i = 1; i&lt;= V;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     printf("dp[%lld]===%lld\n",i,dp[i]);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">while</span>(dp[ans] &lt;= V)ans++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-LCS"><a href="#F-LCS" class="headerlink" title="F - LCS"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_f" target="_blank" rel="noopener">F - LCS</a></h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p>输出字符串$s,t$的最长公共子串。</p>
<h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>令 $dp[i][j]$ 表示 $s$ 的长度为 $i$ 的前缀和 $t$ 的长度为 $j$ 的前缀的最长公共子串。</p>
<p>自底向上输出这个串。</p>
<p>Complexity: $O(n^2)$</p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3005</span>][<span class="number">3005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span> a, b, t = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.size(); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.size(); j++)</span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>])</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> i = a.size(), j = b.size();</span><br><span class="line">    <span class="keyword">while</span> (dp[i][j])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] == dp[i - <span class="number">1</span>][j])</span><br><span class="line">            i--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dp[i][j] == dp[i][j - <span class="number">1</span>])</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dp[i][j] &gt; dp[i - <span class="number">1</span>][j - <span class="number">1</span>])</span><br><span class="line">            i--, j--, t += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(t.begin(), t.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="G-Longest-Path"><a href="#G-Longest-Path" class="headerlink" title="G - Longest Path"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_g" target="_blank" rel="noopener">G - Longest Path</a></h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>求 DAG 上的最长路径。</p>
<h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>DAG上 dp。<br>Complexity: $O(n)$</p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n , m , x , y ,dp[N], deg[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m ; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        deg[y]++;G[x].pb(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt; q ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!deg[i])q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="comment">// cout &lt;&lt; "now === " &lt;&lt; now &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">/*for(int it = 0; it &lt; G[now].size(); it++)&#123;</span></span><br><span class="line"><span class="comment">            dp[G[now][it]] = max(dp[now]+1, dp[G[now][it]]);</span></span><br><span class="line"><span class="comment">            deg[G[now][it]]--;</span></span><br><span class="line"><span class="comment">            if(!deg[G[now][it]])q.push(G[now][it]);</span></span><br><span class="line"><span class="comment">            // cout &lt;&lt; "it ==" &lt;&lt;  it &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : G[now])&#123;</span><br><span class="line">            dp[it] = max(dp[it] , dp[now]+<span class="number">1</span>);</span><br><span class="line">            deg[it] --;</span><br><span class="line">            <span class="keyword">if</span>(!deg[it])q.push(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        ans = max(dp[i], ans);</span><br><span class="line">    &#125;<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照 <strong>$DFS$ 序</strong>，$f[i]$ 表示从 $i$ 号点出发的最长路径上点的数量。</p>
<p>Complexity: $O(n)$<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100001</span></span><br><span class="line"><span class="keyword">int</span> hd[N], nx[M], e[M];</span><br><span class="line"><span class="keyword">int</span> f[N], v[N], n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x]) <span class="keyword">return</span> f[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = hd[x]; i; i = nx[i]) f[x] = max(f[x], dfs(e[i]));</span><br><span class="line">    <span class="keyword">return</span> ++f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, Num = <span class="number">0</span>, x, y; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        nx[++Num] = hd[x], hd[x] = Num, e[Num] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = max(ans, dfs(i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="H-Grid-1"><a href="#H-Grid-1" class="headerlink" title="H - Grid 1"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_h" target="_blank" rel="noopener">H - Grid 1</a></h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description"></a>Description</h3><p>给定一个 $H，W$ 的网格，每次$(i,j)$可以到达$(i+1,j)$或者$(i),j+1$，有一些障碍。求从$(1,1)$到达$(H,W)$ 的方案数。</p>
<h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h3><p>暴力dp</p>
<p>设$dp[i][j]$表示从$(1,1)$到达$(i,j)$的移动方案。</p>
<p>Complexity: $O(H\times W)$</p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> h, w;</span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= h &amp;&amp; y &lt;= w &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &gt;= <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; h &gt;&gt; w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= w; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(check(i<span class="number">-1</span>,j) &amp;&amp; a[i<span class="number">-1</span>][j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    dp[i][j] += dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    dp[i][j] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(check(i,j<span class="number">-1</span>) &amp;&amp; a[i][j<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    dp[i][j] += dp[i][j<span class="number">-1</span>];</span><br><span class="line">                    dp[i][j] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> dp[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[h][w];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-Coins"><a href="#I-Coins" class="headerlink" title="I - Coins"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_i" target="_blank" rel="noopener">I - Coins</a></h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description"></a>Description</h3><p>给定 $n(is \ odd)$ 个硬币，扔第 $i$ 个硬币时，它正面朝上的概率为 $p_i$ 。<br>求每一个硬币扔一次，正面朝上的数量多余反面朝上的硬币的数量的概率。</p>
<h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h3><p>概率DP，记有 $i$ 个正面朝上的概率</p>
<p>Complexity: $O(n^2)$</p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">double</span> p[N], dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">            dp[j] = (dp[j] * (<span class="number">1.0</span>-p[i]) + dp[j<span class="number">-1</span>]*p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] *= <span class="number">1.0</span> - p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i = 1; i &lt;= n; i++)&#123;</span></span><br><span class="line"><span class="comment">        printf("%.6f\n",dp[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n/<span class="number">2</span> + <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        ans += dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="J-Sushi"><a href="#J-Sushi" class="headerlink" title="J - Sushi"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_j" target="_blank" rel="noopener">J - Sushi</a></h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description"></a>Description</h3><p>有$n$个盘子，每盘里有 1到 3份食物。每次随机选中一份食物，若该盘中有食物，则吃掉一份。</p>
<p>求期望选择次数。</p>
<h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h3><p>期望问题。<br>记忆化搜索。<br>设$dp[i][j][k]$为有 i 盘一份食物， j 盘二份食物， k 盘三份食物的期望选择次数。<br>Complexity: $O(n^3)$?? dont know</p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">310</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>], x, n;</span><br><span class="line"><span class="keyword">double</span> dp[N][N][N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[i][j][k]) <span class="keyword">return</span> dp[i][j][k];</span><br><span class="line">    <span class="keyword">if</span> (i + j + k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*double ans = 1;  //ok as well</span></span><br><span class="line"><span class="comment">    if(i) ans += dfs(i - 1, j , k) * i / n;</span></span><br><span class="line"><span class="comment">    if(j) ans += dfs(i + 1, j - 1, k) * j / n;</span></span><br><span class="line"><span class="comment">    if(k) ans += dfs(i , j+1 , k-1) * k / n;</span></span><br><span class="line"><span class="comment">    if(i+j+k!=n)ans*=1.0*n/(j+k+i);*/</span></span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1.0</span> * n / (i + j + k);</span><br><span class="line">    <span class="keyword">if</span> (i) ans += dfs(i - <span class="number">1</span>, j, k) * i / (i + j + k);</span><br><span class="line">    <span class="keyword">if</span> (j) ans += dfs(i + <span class="number">1</span>, j - <span class="number">1</span>, k) * j / (i + j + k);</span><br><span class="line">    <span class="keyword">if</span> (k) ans += dfs(i, j + <span class="number">1</span>, k - <span class="number">1</span>) * k / (i + j + k);</span><br><span class="line">    <span class="keyword">return</span> dp[i][j][k] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f"</span>, dfs(a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="K-Stones"><a href="#K-Stones" class="headerlink" title="K - Stones"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_k" target="_blank" rel="noopener">K - Stones</a></h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description"></a>Description</h3><p>给定 $n,k$ ,和集合 $\mathbb{A}$,$a_i\in\mathbb{A}$,总共$k$个石子，每次在集合 $\mathbb{A}$ 可取石 $x$,无法取石子的为输。问赢家是谁。</p>
<h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution"></a>Solution</h3><p>博弈结论。<br>设 $dp[i]$ 为先手的胜负状态。 胜负 <strong>局面</strong> 转移一下就行了。</p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> n , k , a[N], dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">boyi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[x]) <span class="keyword">return</span> dp[x];</span><br><span class="line">    <span class="keyword">int</span> fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= x &amp;&amp; boyi(x - a[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">            fl = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x] =  (fl ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(boyi(k) == <span class="number">1</span>? <span class="string">"First"</span>:<span class="string">"Second"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="L-Deque"><a href="#L-Deque" class="headerlink" title="L - Deque"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_l" target="_blank" rel="noopener">L - Deque</a></h2><h3 id="Description-11"><a href="#Description-11" class="headerlink" title="Description"></a>Description</h3><p>给定一个序列 $a$ ，alice和bob轮流进行博弈，太郎先行。</p>
<p>每次可以从序列的两端中任取一端，删去那一段的第一个元素，并获取等量的分数。</p>
<p>alice 和 bob 都希望能最大化自己与对面的得分差，询问你最终 alice 与 bob 的得分差。</p>
<h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution"></a>Solution</h3><p>设 $dp[i][j]$表示剩余区间为 $[i,j]$ 时候的最大得分差。</p>
<p>状态转移方程为：$dp[l][r] = max(a[l] - dp[l+1][r], a[r]-dp[l][r-1] );$</p>
<p>取减号是因为：上一个人的负值是下一个人的正值。</p>
<p>Complexity: $O(n^2)$</p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// She is Pretty pretty!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e3</span>+<span class="number">100</span>;</span><br><span class="line">ll dp[N][N];</span><br><span class="line"><span class="keyword">int</span> a[N], n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i ; j &lt;= n; j++)&#123;<span class="comment">//[j-i+1,j]</span></span><br><span class="line">            <span class="keyword">int</span> l = j - i + <span class="number">1</span>, r = j;</span><br><span class="line">            dp[l][r] = max(a[l] - dp[l+<span class="number">1</span>][r], a[r]-dp[l][r<span class="number">-1</span>] ); <span class="comment">// 上一个人的负值是下一个人的正值。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="M-Candies"><a href="#M-Candies" class="headerlink" title="M - Candies"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_m" target="_blank" rel="noopener">M - Candies</a></h2><h3 id="Description-12"><a href="#Description-12" class="headerlink" title="Description"></a>Description</h3><p>有 $n$ 个小朋友的需求，第 $i$ 个小朋友的需求为 $a_i$ ，表示他可以接受 $[0,a_i]$ 个糖果。<br>给定 $m$ 个糖果，把这些糖果全部分配出去，求有多少种分配方案。</p>
<h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution"></a>Solution</h3><p>设$dp[i][j]$为分配前 $i$ 个小朋友还剩 $j$ 个糖果的方案数。</p>
<p>Complexity: $O(n*k)$</p>
<h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> POP pop_back()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>), eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e2</span> + <span class="number">10</span>, M = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][M], sum[N][M], n, k, a[N];</span><br><span class="line"><span class="comment">// dp[i][j] 表示到第i个人剩下j的数量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][k] = sum[<span class="number">0</span>][k] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = (sum[i - <span class="number">1</span>][min(k, j + a[i])] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>] + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[i][<span class="number">0</span>] = dp[i][<span class="number">0</span>] = sum[i - <span class="number">1</span>][a[i]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[i][j] = (sum[i][j - <span class="number">1</span>] + dp[i][j]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="N-Slimes"><a href="#N-Slimes" class="headerlink" title="N - Slimes"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_n" target="_blank" rel="noopener">N - Slimes</a></h2><h3 id="Description-13"><a href="#Description-13" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h3><h2 id="O-Matching"><a href="#O-Matching" class="headerlink" title="O - Matching"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_o" target="_blank" rel="noopener">O - Matching</a></h2><h3 id="Description-14"><a href="#Description-14" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h3><h2 id="P-Independent-Set"><a href="#P-Independent-Set" class="headerlink" title="P - Independent Set"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_p" target="_blank" rel="noopener">P - Independent Set</a></h2><h3 id="Description-15"><a href="#Description-15" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-15"><a href="#Code-15" class="headerlink" title="Code"></a>Code</h3><h2 id="R-Walk"><a href="#R-Walk" class="headerlink" title="R - Walk"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_r" target="_blank" rel="noopener">R - Walk</a></h2><h3 id="Description-16"><a href="#Description-16" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-16"><a href="#Code-16" class="headerlink" title="Code"></a>Code</h3><h2 id="S-Digit-Sum"><a href="#S-Digit-Sum" class="headerlink" title="S - Digit Sum"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_s" target="_blank" rel="noopener">S - Digit Sum</a></h2><h3 id="Description-17"><a href="#Description-17" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-17"><a href="#Solution-17" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-17"><a href="#Code-17" class="headerlink" title="Code"></a>Code</h3><h2 id="T-Permutation"><a href="#T-Permutation" class="headerlink" title="T - Permutation"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_t" target="_blank" rel="noopener">T - Permutation</a></h2><h3 id="Description-18"><a href="#Description-18" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-18"><a href="#Solution-18" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-18"><a href="#Code-18" class="headerlink" title="Code"></a>Code</h3><h2 id="U-Grouping"><a href="#U-Grouping" class="headerlink" title="U - Grouping"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_u" target="_blank" rel="noopener">U - Grouping</a></h2><h3 id="Description-19"><a href="#Description-19" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-19"><a href="#Solution-19" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-19"><a href="#Code-19" class="headerlink" title="Code"></a>Code</h3><h2 id="V-Subtree"><a href="#V-Subtree" class="headerlink" title="V - Subtree"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_v" target="_blank" rel="noopener">V - Subtree</a></h2><h3 id="Description-20"><a href="#Description-20" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-20"><a href="#Solution-20" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-20"><a href="#Code-20" class="headerlink" title="Code"></a>Code</h3><h2 id="W-Intervals"><a href="#W-Intervals" class="headerlink" title="W - Intervals"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_w" target="_blank" rel="noopener">W - Intervals</a></h2><h3 id="Description-21"><a href="#Description-21" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-21"><a href="#Solution-21" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-21"><a href="#Code-21" class="headerlink" title="Code"></a>Code</h3><h2 id="X-Tower"><a href="#X-Tower" class="headerlink" title="X - Tower"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_x" target="_blank" rel="noopener">X - Tower</a></h2><h3 id="Description-22"><a href="#Description-22" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-22"><a href="#Solution-22" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-22"><a href="#Code-22" class="headerlink" title="Code"></a>Code</h3><h2 id="Y-Grid-2"><a href="#Y-Grid-2" class="headerlink" title="Y - Grid 2"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_y" target="_blank" rel="noopener">Y - Grid 2</a></h2><h3 id="Description-23"><a href="#Description-23" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-23"><a href="#Solution-23" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-23"><a href="#Code-23" class="headerlink" title="Code"></a>Code</h3><h2 id="Z-Frog-3"><a href="#Z-Frog-3" class="headerlink" title="Z - Frog 3"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_z" target="_blank" rel="noopener">Z - Frog 3</a></h2><h3 id="Description-24"><a href="#Description-24" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-24"><a href="#Solution-24" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-24"><a href="#Code-24" class="headerlink" title="Code"></a>Code</h3>]]></content>
      <categories>
        <category>Dynamic Programming</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>Atc</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #19: 2019 icpc online ShenYang</title>
    <url>/2020/02/26/TeamRound19/</url>
    <content><![CDATA[<p>这一场是在 2020-02-26 13:08 CST 开始的。</p>
<p>蛮糟糕的，啥也不会。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>Online</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #18: 2019 Multi-University Training Contest 4</title>
    <url>/2020/02/19/TeamRound18/</url>
    <content><![CDATA[<p>这一场是在 2020-02-19 13:00 CST 开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>hdu</tag>
      </tags>
  </entry>
  <entry>
    <title>2019Multi-UniversityTrainingContest</title>
    <url>/2020/02/19/2019Multi-UniversityTrainingContest/</url>
    <content><![CDATA[<blockquote>
<p>陈力就列，然心向往之。</p>
</blockquote>
<h1 id="2019-Multi-University-Training-Contest-1"><a href="#2019-Multi-University-Training-Contest-1" class="headerlink" title="2019 Multi-University Training Contest 1"></a>2019 Multi-University Training Contest 1</h1><h1 id="2019-Multi-University-Training-Contest-2"><a href="#2019-Multi-University-Training-Contest-2" class="headerlink" title="2019 Multi-University Training Contest 2"></a>2019 Multi-University Training Contest 2</h1><p><a href="/fujian/2019hdu/2tutorial.pdf">tutorial</a><br>出题人: $FZU$</p>
<h1 id="2019-Multi-University-Training-Contest-3"><a href="#2019-Multi-University-Training-Contest-3" class="headerlink" title="2019 Multi-University Training Contest 3"></a>2019 Multi-University Training Contest 3</h1><h1 id="2019-Multi-University-Training-Contest-4"><a href="#2019-Multi-University-Training-Contest-4" class="headerlink" title="2019 Multi-University Training Contest 4"></a>2019 Multi-University Training Contest 4</h1><h1 id="2019-Multi-University-Training-Contest-5"><a href="#2019-Multi-University-Training-Contest-5" class="headerlink" title="2019 Multi-University Training Contest 5"></a>2019 Multi-University Training Contest 5</h1><h1 id="2019-Multi-University-Training-Contest-6"><a href="#2019-Multi-University-Training-Contest-6" class="headerlink" title="2019 Multi-University Training Contest 6"></a>2019 Multi-University Training Contest 6</h1><h1 id="2019-Multi-University-Training-Contest-7"><a href="#2019-Multi-University-Training-Contest-7" class="headerlink" title="2019 Multi-University Training Contest 7"></a>2019 Multi-University Training Contest 7</h1><h1 id="2019-Multi-University-Training-Contest-8"><a href="#2019-Multi-University-Training-Contest-8" class="headerlink" title="2019 Multi-University Training Contest 8"></a>2019 Multi-University Training Contest 8</h1><h1 id="2019-Multi-University-Training-Contest-9"><a href="#2019-Multi-University-Training-Contest-9" class="headerlink" title="2019 Multi-University Training Contest 9"></a>2019 Multi-University Training Contest 9</h1><h1 id="2019-Multi-University-Training-Contest-10"><a href="#2019-Multi-University-Training-Contest-10" class="headerlink" title="2019 Multi-University Training Contest 10"></a>2019 Multi-University Training Contest 10</h1>]]></content>
      <categories>
        <category>hdu</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
      </tags>
  </entry>
  <entry>
    <title>2019牛客暑期多校训练营</title>
    <url>/2020/02/19/2019%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
    <content><![CDATA[<p>就把八场的全部写在一起吧。</p>
<p>暑假时候是没有打的，都是<strong>随缘</strong>补题</p>
<p>鉴于水平有限，如果有错误欢迎联系$miniLCT$的邮箱  <em>iamnotmyself@vip.qq.com</em> 万分感谢。</p>
<h1 id="2019牛客暑期多校训练营（第一场）"><a href="#2019牛客暑期多校训练营（第一场）" class="headerlink" title="2019牛客暑期多校训练营（第一场）"></a>2019牛客暑期多校训练营（第一场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第一场题解.pdf">Tutorial</a></p>
<p>出题人:郭晓絮 <em><a href="https://codeforces.com/profile/ftiasch" target="_blank" rel="noopener">ftiasch</a></em></p>
<h1 id="2019牛客暑期多校训练营（第二场）"><a href="#2019牛客暑期多校训练营（第二场）" class="headerlink" title="2019牛客暑期多校训练营（第二场）"></a>2019牛客暑期多校训练营（第二场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第二场题解.pdf">Tutorial</a></p>
<p>出题人:许晋嘉 <a href="https://codeforces.com/profile/eddy1021" target="_blank" rel="noopener">eddy1021</a></p>
<h1 id="2019牛客暑期多校训练营（第三场）"><a href="#2019牛客暑期多校训练营（第三场）" class="headerlink" title="2019牛客暑期多校训练营（第三场）"></a>2019牛客暑期多校训练营（第三场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第三场题解.pdf">Tutorial</a></p>
<p>出题人:Reconquista 浙江大学</p>
<h1 id="2019牛客暑期多校训练营（第四场）"><a href="#2019牛客暑期多校训练营（第四场）" class="headerlink" title="2019牛客暑期多校训练营（第四场）"></a>2019牛客暑期多校训练营（第四场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第四场题解.pdf">Tutorial</a></p>
<p>出题人：zzq <a href="https://codeforces.com/profile/TLE" target="_blank" rel="noopener">TLE</a> &amp; kzc<a href="https://codeforces.com/profile/kczno1" target="_blank" rel="noopener">孔朝哲</a></p>
<h1 id="2019牛客暑期多校训练营（第五场）"><a href="#2019牛客暑期多校训练营（第五场）" class="headerlink" title="2019牛客暑期多校训练营（第五场）"></a>2019牛客暑期多校训练营（第五场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第五场题解.pdf">Tutorial</a></p>
<p>出题人:dreamoon</p>
<h1 id="2019牛客暑期多校训练营（第六场）"><a href="#2019牛客暑期多校训练营（第六场）" class="headerlink" title="2019牛客暑期多校训练营（第六场）"></a>2019牛客暑期多校训练营（第六场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第六场题解.pdf">Tutorial</a></p>
<p>出题人: 赵轩昂 <a href="https://codeforces.com/profile/sd0061" target="_blank" rel="noopener">sd0061</a></p>
<h1 id="2019牛客暑期多校训练营（第七场）"><a href="#2019牛客暑期多校训练营（第七场）" class="headerlink" title="2019牛客暑期多校训练营（第七场）"></a>2019牛客暑期多校训练营（第七场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第七场题解.pdf">Tutorial</a></p>
<p>出题人:kuangbin <a href="http://codeforces.com/profile/kuangbin" target="_blank" rel="noopener">判断一个acmer可以看他是不是带kuangbin的板子!minilct虚假acmer</a></p>
<h1 id="2019牛客暑期多校训练营（第八场）"><a href="#2019牛客暑期多校训练营（第八场）" class="headerlink" title="2019牛客暑期多校训练营（第八场）"></a>2019牛客暑期多校训练营（第八场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第八场题解.pdf">Tutorial</a></p>
<p>出题人:高铭鸿、李泽仁</p>
<h1 id="2019牛客暑期多校训练营（第九场）"><a href="#2019牛客暑期多校训练营（第九场）" class="headerlink" title="2019牛客暑期多校训练营（第九场）"></a>2019牛客暑期多校训练营（第九场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第九场题解.pdf">Tutorial</a></p>
<p>出题人:wwwwodddd + zscoder</p>
<h1 id="2019牛客暑期多校训练营（第十场）"><a href="#2019牛客暑期多校训练营（第十场）" class="headerlink" title="2019牛客暑期多校训练营（第十场）"></a>2019牛客暑期多校训练营（第十场）</h1><p><a href="/fujian/2019nowcoder/2019牛客暑期多校训练营第十场题解.pdf">Tutorial</a></p>
<p>出题人:<a href="https://codeforces.com/team/44706" target="_blank" rel="noopener">Coffee Chicken(gisp_zjz，AceSrc，zyb)</a></p>
]]></content>
      <categories>
        <category>Nowcoder</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #17:ICPC 2019-2020 North-Western Russia Regional Contest</title>
    <url>/2020/02/14/TeamRound17/</url>
    <content><![CDATA[<p>这一场是在 2020-02-14 13:00 CST 开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>Official ICPC Contest</tag>
      </tags>
  </entry>
  <entry>
    <title>陌生的STL 和 pbds初步</title>
    <url>/2020/02/10/STL/</url>
    <content><![CDATA[<blockquote>
<p>真的有很多人，他们的代码如诗一般。</p>
<p>有两个有趣的事情。 ①<del>部分</del>很多 $ACMer$ 对 $Vector$ 有这样的想法 : 这个东西是会带大常数的，可是现场赛没卡过，所以很喜欢用（外国选手也非常喜欢？）。 ②我们常常感觉 $stack$ 和 $queue$ 常数特别大，事实上，他的空间特别大， 比时间问题大多了。不信开个$queue\lt int\gt a[1000000]$ 试试呗😂。事实上，$std::queue $ 和 $std::stack$ 是默认基于 $std::deque$ 实现的。</p>
</blockquote>
<p>起因是看到著名OI爷<a href="https://codeforces.com/profile/jiangly" target="_blank" rel="noopener">jiangly</a>的代码，虎躯一震。他的代码风格真的好好啊！他对于stl的掌控，真的！！！%%%%%%%</p>
<p>回想自己，经常问队友什么什么怎么用，就很<strong>离谱</strong>。</p>
<p><img src="https://i.loli.net/2020/02/10/16vCELgoKOjUlXQ.png" alt="像这种窒息的对话常常出现，就很无奈。。"><br>遂学习一波</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知道从什么地方开始写，就来碎碎念。</p>
<p>打过 $OI$ 的会感觉 $stl$ 在时间效率上比较低下。而在 $XCPC$ 中，是开$-O2$ 优化的。 &emsp;&emsp;&emsp;<font color="red">当然，不要觉得，编译器什么都可以优化。</font></p>
<h2 id="Part-Ⅰ"><a href="#Part-Ⅰ" class="headerlink" title="Part Ⅰ"></a>Part Ⅰ</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>没系统的学过，之前看过但是都忘记了。除了字典树$(trie)$等几个算法或数据结构外,都用的不多把（包括trie也是可以用数组模拟的）？除此之外的地方，指针也基本上可以被引用代替。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在扩展欧几里得算法中用到了实参引用。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找出a,b最大公因数，且求出x，y满足ax+by =gcd(a,b)。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ext_gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> d = a;</span><br><span class="line">	<span class="keyword">if</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">		d = ext_gcd(b , a%b ,y , x);</span><br><span class="line">		y -= (a / b) * x;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		x = <span class="number">1</span>;</span><br><span class="line">		y = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>和指针传参效果一样，但是相比于用指针传递参数而言要方便很多。在要传占用内存较大的变量或类时可以用指针传递来加快效率。</p>
<h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>在结构体中，我们经常会用到运算符重载。旨在实现扩展c++自带的类型，或者达到自己的运算（或比较）目的。<br>比如在fft中重写Complex。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    LD r, i;</span><br><span class="line">    C(LD r = <span class="number">0</span>, LD i = <span class="number">0</span>) : r(r), i(i) &#123;&#125;</span><br><span class="line">&#125; A[MAXN], B[MAXN];</span><br><span class="line">C <span class="keyword">operator</span>+(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r + b.r, a.i + b.i); &#125;</span><br><span class="line">C <span class="keyword">operator</span>-(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r - b.r, a.i - b.i); &#125;</span><br><span class="line">C <span class="keyword">operator</span>*(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r); &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="auto关键字"><a href="#auto关键字" class="headerlink" title="auto关键字"></a>auto关键字</h3><p>$auto$ 关键字可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型，配合同是  $C++ 11$标准加入的 $for$ 语句的新用法在有的时候可以加快代码的编写速度。</p>
<p>比如以前遍历 $set$ 的一般写法是:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> &lt;<span class="keyword">int</span>&gt; iterator::itr;</span><br><span class="line"><span class="keyword">for</span> (itr = st.begin(); itr != st.end(); itr++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *itr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>比如遍历某容器时现可以写作:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it : st)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种写法中，$for$ 循环会从头到尾遍历一遍 $st$ 容器，将其中的值取出。需要注意的是，如果要修改元素的值的话，应该声明成引用$auto\&amp;\quad i$。</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>$cf$ 上著名选手 tourist 的代码就有很多模板。然而我很多看不懂用不来。<br>卑微如我只能写个快读模板。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    x *= f;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Part-Ⅱ"><a href="#Part-Ⅱ" class="headerlink" title="Part Ⅱ"></a>Part Ⅱ</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>vector 的实现基于动态数组，结合倍增思想（空间开不下了就全部删掉再开 $2$ 倍）。单次操作复杂度基本都是均摊 $O(1)$ 的。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a;<span class="comment">//新建一个空的vector </span></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; b(<span class="number">5</span>,<span class="number">3</span>);<span class="comment">//新建一个包含 5 个 3 的 vector</span></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; c(<span class="number">5</span>);<span class="comment">// = vector &lt;int&gt; c(5,0);</span></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d(b.begin()+<span class="number">1</span>,b.end()<span class="number">-1</span>);<span class="comment">// 用 [b.begin()+1,b.end()-1) 这一段构成的数组生成 vector </span></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; e(d);<span class="comment">// 生成一个和 d 相同的 vector e</span></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v(n);</span><br><span class="line">iota(v.begin(),v.end(),<span class="number">0</span>); <span class="comment">//在vector里创建一个0,1...n-1的数列</span></span><br></pre></td></tr></table></figure>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>back() &emsp;v.back() 返回 v 的最后一个元素的引用 </li>
<li>front() &emsp;v.front() 返回 v 的第一个元素的引用</li>
<li>begin() &emsp;v.begin()返回一个迭代器，指向 v 的第一个元素。</li>
<li>end() &emsp;v.end()返回一个迭代器，指向 v 的最后一个元素的后一个位置。</li>
<li>clear() &emsp;v.clear() 表示将 v 清空（内存不释放）。  Complexity：与容器大小线性。</li>
<li>empty() &emsp;v.empty()返回一个布尔值，表示 v 是否为空。</li>
<li><p>erase </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">iota(v.begin(), v.end(), <span class="number">1</span>);</span><br><span class="line">v.erase(v.begin() + <span class="number">5</span>);  <span class="comment">//删除 v.begin()+5 这个位置的元素</span></span><br><span class="line">v.erase(v.begin(), v.begin() + <span class="number">3</span>);  <span class="comment">//删除 [v.begin(),v.end()) 这个区间之间的所有元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="comment">//输出结果 4 5 7 8 9 10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>insert</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; :: iterator it=v.begin();</span><br><span class="line">it=v.insert(it,<span class="number">2</span>);<span class="comment">//在 it 处插入一个 2</span></span><br><span class="line">v.insert(it,<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//在 it 处插入 2 个 3 ，注意这个语句执行完之后 it 就失效了</span></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; u(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">u.insert(u.begin(),v.begin(),v.end());<span class="comment">//在 u.begin() 处插入 [v.begin(),v.end()) 这个范围内的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>resize<br>这个聚好用！<br>多组时候可以这样v.clear();v.resize(n);<br>unique_sort时候可以这样 (sort(c.begin(),c.end()), c.resize(distance(c.begin(),unique(c.begin(),c.end()))))好像有点长，有个很简短写法我忘记了。。 a.resize(unique(a.begin(),a.end())-a.begin());大概这样？</p>
</li>
<li><p>emplace_back()/push_back()&emsp; 在 v 的最后插入一个元素。</p>
</li>
<li>pop_back()&emsp;弹出最后一个元素。</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>单次操作的复杂度基本都是 $O(log\ Size)$的。<br>一样的操作就省略了。</p>
<h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>count<br><code>S.count(x)</code>表示求 $S$ 中 $x$ 元素的出现次数。由于 $set$ 中各个元素互不相同，所以只会返回 $0$ 或 $1$ 。<br>单次操作时间复杂度为 $O(log \ Size)$<br>​1000000 次 count 用时在 0.3s 到 1s 左右，取决于电脑运行效率。</li>
<li><p>erase<br>用于删除元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">S.erase(it);<span class="comment">// 删除 set 迭代器 it 指向的元素。删除完之后这个迭代器就失效了。</span></span><br><span class="line">S.erase(x);<span class="comment">// 删除元素 x </span></span><br><span class="line">S.erase(it1,it2);<span class="comment">// 删除 [it1,it2) 的所有元素 </span></span><br><span class="line">S.erase(it,S.end());<span class="comment">// 上一种用法的一个实例</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>find<br><code>S.find(x)</code>返回一个迭代器，这个迭代器指向的元素值为 $x$。</p>
</li>
<li>insert<br><code>S.insert(x)</code> 表示在 S 中插入元素 $x$ ，并返回一个 <code>pair <set <int> :: iterator,bool&gt;</set></code> ，第一个元素表示插入元素 $x$ 之后 $x$ 的迭代器（如果原本就有 $x$ 就返回原来的 $x$ 的迭代器），第二个元素表示这次插入是否有效，如果 $x$ 原先不在 $S$ 中，那么返回 $true$，否则返回 $false$。<br>​<code>S.insert(it1,it2) </code>表示在 S 中插入 $[it1,it2)$ 的所有元素。</li>
<li><p>swap </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">S.swap(S1);<span class="comment">//复杂度是常数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>lower_bound/upper_bound<br>返回的是迭代器。<strong>大于等于</strong> / <strong>大于</strong></p>
</li>
</ul>
<h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><p>multiset 是可重集，也就是说容器内可以有多个相同元素。我以前很喜欢用。<br>大部分用法和 set 一样，这里讲不太一样的。<br>奥！！一定要说的一个点是 multiset 的常数比 set 的常数大若干倍！</p>
<h4 id="较为不同的"><a href="#较为不同的" class="headerlink" title="较为不同的"></a>较为不同的</h4><ul>
<li>count<br><code>S.count(x)</code>单次 count 复杂度在 $O(log\ Size + S.count(x))$<br><img src="https://i.loli.net/2020/05/20/wYmRcEa56Aexhok.png" alt="实测 from others"></li>
<li>erase<br><code>S.erase(x)</code>的作用是删除 S 中所有等于 x 的元素。<br>删除一个的时候写成<code>S.erase(S.find(x))</code></li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>基于 rbtree。<br>一般用于离散化，单次操作的时间复杂度基本都是 $0(log \ Size)$</p>
<p>用得好map真的很方便！ dqy 就比较会。</p>
<h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><p>基于 hash 表。是map的弱化版，由于实现原理不同，map有的很多功能他都么得，但是他单次操作时间复杂度$O(1)$，但在 cf 上可以被卡。neal文章有写 <a href="https://codeforces.com/blog/entry/62393" target="_blank" rel="noopener">Blowing up unordered_map, and how to stop getting hacked on it</a><br>​<br>需要 c++11 以上的编译器才可以使用。</p>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>优先队列，堆，完全可以用 set 代替，功能比 set 弱，单次操作 $O(log \ Size)$，没有迭代器，系统默认大根堆。</p>
<p>但他常数比set小，约为0.5倍。</p>
<p>定义一个 int 类型的大根堆 priority_queue<int> q;</int></p>
<p>定义一个 char 类型的大根堆 priority_queue<char , vector<char>, greater<char> &gt; Q;</char></char></p>
<p>重载比较运算符：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;<span class="keyword">int</span>,<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;,cmp&gt; Q3;</span><br></pre></td></tr></table></figure></p>
<h2 id="Part-Ⅲ-pb-ds初步："><a href="#Part-Ⅲ-pb-ds初步：" class="headerlink" title="Part Ⅲ:pb_ds初步："></a>Part Ⅲ:pb_ds初步：</h2><p>主要看的是于纪平《C++的pb_ds库在OI中的应用.pdf》</p>
<p>什么是__gnu_pbds?Policy based data structures！简称<del>平板电视</del>pbds。在使用pbds前，你需要：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;//用tree</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;//用hash</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/trie_policy.hpp&gt;//用trie</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;//用priority_queue</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure>
<p>有没有形如<code>#include&lt;bits/stdc++.h&gt;</code>的写法呢？</p>
<p>答案是有的！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="comment">//bits/extc++.h与bits/stdc++.h类似，bits/extc++.h是所有拓展库，bits/stdc++.h是所有标准库,然而在某些ide下会显示缺少东西。</span></span><br></pre></td></tr></table></figure>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>hash_table的用法与map类似，它是这么定义的：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cc_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; h;</span><br><span class="line">gp_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; h;</span><br></pre></td></tr></table></figure></p>
<p>其中cc开头为拉链法，gp开头为探测法，实测探测法稍微快一些。</p>
<p>用法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">gp_hash_table&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; h;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h.find(s)!=h.end())</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"orz %%%"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"fuck"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    h[<span class="string">"aa"</span>]=<span class="number">1</span>;</span><br><span class="line">    h.insert(make_pair(<span class="string">"nn"</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)</span><br><span class="line">        judge(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等一等？和map一样，那不如直接用 <code>map</code> 了。不不不，<code>map</code> 的总时间复杂度是 $O(nlog_n)$ 的，而hash_table的总时间复杂度仅为 $O(n)$</p>
<h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><p>pbds里面的tree都是平衡树，其中有rb_tree,splay_tree,ov_tree（后两种都容易超时，所以请不要用它们）。</p>
<p>食用芝士：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(x,y) make_pair(x,y) </span></span><br><span class="line">tree&lt;pii,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; tr;</span><br><span class="line">pii <span class="comment">//存储的类型</span></span><br><span class="line">null_type <span class="comment">//无映射(低版本g++为null_mapped_type)</span></span><br><span class="line">less&lt;pii&gt; <span class="comment">//从小到大排序</span></span><br><span class="line">rb_tree_tag <span class="comment">//红黑树</span></span><br><span class="line">tree_order_statistics_node_update <span class="comment">//更新方式 </span></span><br><span class="line">tr.insert(mp(x,y)); <span class="comment">//插入;</span></span><br><span class="line">tr.erase(mp(x,y)); <span class="comment">//删除;</span></span><br><span class="line">tr.order_of_key(pii(x,y)); <span class="comment">//求排名 </span></span><br><span class="line">tr.find_by_order(x); <span class="comment">//找k小值，返回迭代器 </span></span><br><span class="line">tr.join(b); <span class="comment">//将b并入tr，前提是两棵树类型一样且没有重复元素 </span></span><br><span class="line">tr.split(v,b); <span class="comment">//分裂，key小于等于v的元素属于tr，其余的属于b</span></span><br><span class="line">tr.lower_bound(x); <span class="comment">//返回第一个大于等于x的元素的迭代器</span></span><br><span class="line">tr.upper_bound(x); <span class="comment">//返回第一个大于x的元素的迭代器</span></span><br><span class="line"><span class="comment">//以上所有操作的时间复杂度均为O(logn)</span></span><br></pre></td></tr></table></figure></p>
<p>对于<a href="https://www.luogu.com.cn/problem/P3369" target="_blank" rel="noopener">洛谷P3369 普通平衡树</a>，我们用此很容易解决。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">tree&lt;ll,null_type,less&lt;ll&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; bbt;</span><br><span class="line"><span class="keyword">int</span> n;ll k,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt;i&lt;=n;i++)&#123;</span><br><span class="line">        opt=read();k=read();</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) bbt.insert((k&lt;&lt;<span class="number">20</span>)+i);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>) bbt.erase(bbt.lower_bound(k&lt;&lt;<span class="number">20</span>));</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,bbt.order_of_key(k&lt;&lt;<span class="number">20</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">4</span>) ans=*bbt.find_by_order(k<span class="number">-1</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans&gt;&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">5</span>) ans=*--bbt.lower_bound(k&lt;&lt;<span class="number">20</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans&gt;&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">6</span>) ans=*bbt.upper_bound((k&lt;&lt;<span class="number">20</span>)+n),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans&gt;&gt;<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p>trie即为字典树，我们先看如何定义一个trie与它的操作：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> trie&lt;<span class="built_in">string</span>,null_type,trie_string_access_traits&lt;&gt;,pat_trie_tag,trie_prefix_search_node_update&gt; tr;</span><br><span class="line"><span class="comment">//第一个参数必须为字符串类型，tag也有别的tag，但pat最快，与tree相同，node_update支持自定义</span></span><br><span class="line">tr.insert(s); <span class="comment">//插入s </span></span><br><span class="line">tr.erase(s); <span class="comment">//删除s </span></span><br><span class="line">tr.join(b); <span class="comment">//将b并入tr </span></span><br><span class="line">pair<span class="comment">//pair的使用如下：</span></span><br><span class="line">pair&lt;tr::iterator,tr::iterator&gt; range=base.prefix_range(x);</span><br><span class="line"><span class="keyword">for</span>(tr::iterator it=range.first;it!=range.second;it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">' '</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//pair中第一个是起始迭代器，第二个是终止迭代器，遍历过去就可以找到所有字符串了。</span></span><br></pre></td></tr></table></figure></p>
<h3 id="priority-queue-1"><a href="#priority-queue-1" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>priority_queue为优先队列，用堆实现，priority_queue的定义与操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt;,TAG&gt; Q;<span class="comment">//小根堆，大根堆写less&lt;int&gt;</span></span><br><span class="line"><span class="comment">/*其中的TAG为类型，有以下几种：</span></span><br><span class="line"><span class="comment">pairing_heap_tag 默认是pairing_heap_tag </span></span><br><span class="line"><span class="comment">thin_heap_tag</span></span><br><span class="line"><span class="comment">binomial_heap_tag</span></span><br><span class="line"><span class="comment">rc_binomial_heap_tag </span></span><br><span class="line"><span class="comment">binary_heap_tag</span></span><br><span class="line"><span class="comment">其中pairing_help_tag最快*/</span></span><br><span class="line">Q.push(x);</span><br><span class="line">Q.pop();</span><br><span class="line">Q.top();</span><br><span class="line">Q.join(b);</span><br><span class="line">Q.empty();</span><br><span class="line">Q.size(); </span><br><span class="line">Q.modify(it,<span class="number">6</span>);</span><br><span class="line">Q.erase(it);</span><br></pre></td></tr></table></figure>
<p><a href="https://www.luogu.com.cn/blog/Chanis/gnu-pbds" target="_blank" rel="noopener">堆优化dijkstra</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i,a,b) for(register int i=(a),i##end=(b);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Repe(i,a,b) for(register int i=(a),i##end=(b);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,a,b) for(i=(a),i&lt;=(b);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Forward(i,a,b) for(i=(a),i&gt;=(b);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Chkmax(a,b) a=a&gt;b?a:b</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c);c=getchar())<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)&#123;<span class="built_in">putchar</span>(<span class="number">48</span>);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sta[<span class="number">45</span>],tp;</span><br><span class="line">    <span class="keyword">for</span>(tp=<span class="number">0</span>;x;x/=<span class="number">10</span>)sta[++tp]=x%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(;tp;<span class="built_in">putchar</span>(sta[tp--]^<span class="number">48</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">file</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"water.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"water.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">7</span>,MAXM=<span class="number">4e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">edg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,h;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(edg a,edg b)&#123;<span class="keyword">return</span> a.h&gt;b.h;&#125;</span><br><span class="line">&#125;EDG[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,nxt;</span><br><span class="line">&#125;P[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> head[MAXN],e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;P[++e]=(edge)&#123;v,w,head[u]&#125;;head[u]=e;&#125;</span><br><span class="line"></span><br><span class="line">__gnu_pbds::priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;G;</span><br><span class="line"></span><br><span class="line">__gnu_pbds::priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;::point_iterator its[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkst</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G.clear();</span><br><span class="line">    its[s]=G.push(make_pair(<span class="number">0</span>,s));dis[s]=<span class="number">0</span>;</span><br><span class="line">    Rep(i,<span class="number">2</span>,n)dis[i]=INF,its[i]=G.push(make_pair(INF,i));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>(!G.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        u=G.top().second;G.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> v=head[u];v;v=P[v].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dis[P[v].v]&gt;dis[u]+P[v].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[P[v].v]=dis[u]+P[v].w;</span><br><span class="line">                G.modify(its[P[v].v],make_pair(dis[u]+P[v].w,P[v].v));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);read(m);read(s);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> u,v,w;</span><br><span class="line">    Rep(i,<span class="number">1</span>,m)read(u),read(v),read(w),add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dijkst(s);</span><br><span class="line">    Rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    file();</span><br><span class="line">    init();</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #16: 2019 Multi-University Training Contest 8</title>
    <url>/2020/02/09/TeamRound16/</url>
    <content><![CDATA[<p>这一场是在 2020-02-09 13:00 CST 开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>hdu</tag>
      </tags>
  </entry>
  <entry>
    <title>Concrete Mathematics</title>
    <url>/2020/02/08/Concrete%20Mathematics/</url>
    <content><![CDATA[<blockquote>
<p>擅长用概率为零的事件使用条件概率。</p>
</blockquote>
<p>具体数学第2版。坑大无比，能填多少是多少</p>
<p>习题选取为部分我感兴趣的并且能基本弄懂的。</p>
<h1 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h1><h2 id="河内塔"><a href="#河内塔" class="headerlink" title="河内塔"></a>河内塔</h2><p><kbd>The Tower of Hanoi</kbd></p>
<p>$T(n) = 2T(n-1)+1$<br>$T(0) = 0$<br>$T(1) = 1$&emsp;…………<br>$\Rightarrow T(n) = 2^n-1$<br>来个大一上写的代码<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">char</span> a , <span class="keyword">char</span> b , <span class="keyword">char</span> c)</span></span>&#123; <span class="comment">// a起始座，b辅助座，c终点座</span></span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%c --&gt; %c\n"</span>, a, c); <span class="comment">// 盘子数量为1时候</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        move(x<span class="number">-1</span>, a , c , b);  <span class="comment">//先将前x-1个盘借助c放到b上</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c --&gt; %c\n"</span>, a, c); <span class="comment">// 将最后一个盘子放到目标座</span></span><br><span class="line">        move(x<span class="number">-1</span> , b , a , c);<span class="comment">//将前x-1个盘借助a放到c上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    move(x , <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入盘的数量："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    Hanoi(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="平面上的直线"><a href="#平面上的直线" class="headerlink" title="平面上的直线"></a>平面上的直线</h2><p><kbd>Lines in The Plane</kbd></p>
<h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><blockquote>
<p>　“What is the maximum number Ln of regions defined by n lines in the plane?”<br>平面上 $n$ 条直线所界定的区域的最大个数  $L_n$  是多少。</p>
</blockquote>
<p>画图观察可知，$L_o = 1, L_1 = 2, L_2 = 4,L_3 = 7。$</p>
<p>对第 $n$ 条线的构造，由已有 $n-1$ 条直线，所以第n条直线最多和已有直线产生 $n-1$ 个交点，所以增加的平面数量的最大值为 $n$，由此一个可行解，它是充分的 $L<em>n \le L</em>{n-1} + n (n&gt;0)$</p>
<p>接下来试图说明它的必要性：只要把第 $ n$ 条直线放在与前$n-1$ 条都不相交的方向，那么第n条直线必和前n-1条直线各有一个交点。又因为 $L<em>{n-1}$ 为最大值，所以保证了前 $n-1$ 条直线产生的 $n-2$ 个交点互异，可以做到第 $n$ 条直线产生的 $n-1$ 个新交点彼此互异，且和前$ n-2 $个交点也互异。由此 $Ln \ge L</em>{n-1} + n (n&gt;0)$。</p>
<p>由此，有递归式：<script type="math/tex">L_0=1$$$$L_n=L_{n-1}+n \qquad n \gt 0</script></p>
<script type="math/tex; mode=display">\Rightarrow L_n=\frac{n(n+1)}{2}+1\quad n\ge 0</script><h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a>Part2</h3><p>折线代替直线，求形成区域的$MAX$<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2050" target="_blank" rel="noopener">HDU折线分割平面</a><br><img src="https://i.loli.net/2020/02/10/GAPoDzI84cSWjn7.png" alt="Problem Description"><br><img src="https://i.loli.net/2020/02/10/piMCSEP6ReYB3nH.jpg" alt="solution"><br>将折线看作直线处理，考虑到折线外形成的区域，发现每个折线失去了两个区域。<br>容易得到递归式:</p>
<script type="math/tex; mode=display">Z_n=L_{2n}-2n=\frac{2n(2n+1)}{2}+1-2n=2n^2-n+1,n\ge0</script><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p><kbd>The Josephus Problem</kbd></p>
<h3 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h3><p>基于从围成标有记号 $1$ 到 $n$ 的圆圈的$n$ 个人开始，<strong>每隔一个</strong> 删去一个人。<br>显然：偶数的在第一轮就被删完了。<del>这没多大用</del></p>
<p>以下用 $J(n)$ 表示 $n$ 个人时候，幸存者的编号。</p>
<script type="math/tex; mode=display">\begin{cases}
J(1) = 1 ; \\
J(2n)=2J(n)-1,n\ge1;\\
J(2n+1) = 2J(n)+1,n\ge1;
\end{cases}</script><p>对小数进行模拟表发现</p>
<script type="math/tex; mode=display">
\begin{array}{|l|l|ll|ll l l|llllllll|l}
\hline
 \quad n &\text{1}&\text{2}&\text{3}&\text{4
 }&\text{5}&\text{6} &\text{7}  & \text{8} & \text{9} & \text{10}& \text{11}& \text{12}& \text{13}& \text{14} & \text{15} & \text{16}  \\
\hline
J(n) & 1 & 1 & 3 & 1 & 3 & 5 & 7 & 1 &3&5&7&9&11&13&15&1\\
\hline
\end{array}</script><p>感觉发现了规律<script type="math/tex">J(2^m+l) = 2l+1\qquad m\ge0 \ ,\ 0\le l\lt 2^m</script><br>可以证明上式是对的，此处略。<br>以下说明另一个结论，考虑$n$,$J(n)$的以2为基数的表示，假设$n$的二进制展开式为$n = (b<em>mb</em>{m-1}…b<em>1b_0)_2 \quad \Leftrightarrow \quad n = b_m2^m+b</em>{m-1}2^{m-1}+……+b<em>12+b_0$<br>推得$J((b_mb</em>{m-1}…b<em>1b_0)_2 ) = (b</em>{m-1}…b_1b_0b_m)_2)$ $\quad n$左循环一位得到 $J(n)$ </p>
<ul>
<li>重复运用 $J$ 的性质会得到一系列递减的值。最终达到一个不动点。此不动点有$J(n) = n = 2^{v(n)}-1$ ,$\quad v(n)$是$n$的二进制表示中 $1$ 的个数。例如有$v(13) = 3$</li>
</ul>
<h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h3><p>引入常数$\alpha,\beta,\gamma $。</p>
<script type="math/tex; mode=display">\begin{cases}
J(1) = \alpha ; \\
J(2n)=2J(n)+\beta,n\ge1;\\
J(2n+1) = 2J(n)+\gamma,n\ge1;
\end{cases}</script><script type="math/tex; mode=display">
\begin{array}{l|l}
n &\text{f(n)}\\
\hline
1& \alpha\\
\hline 
2& 2\alpha+\beta\\
3& 2\alpha\qquad+\gamma \\
\hline
4&4\alpha+3\beta\\
5&4\alpha+2\beta+\gamma\\
6&4\alpha+\ \beta+2\gamma\\
7&4\alpha+\quad+ 3 \gamma\\
\hline
8&8\alpha+7\beta\\
9&8\alpha+6\beta+\ \gamma
\end{array}</script><p>观察到我们可以将 $f(n)$ 表示为以下形式：</p>
<script type="math/tex; mode=display">f(n) = A(n)\alpha + B(n)\beta+C(n)\gamma</script><p>可以证明得到$A(n)=2^m,B(n)=2^m-1-l,C(n) = l \quad n=2^m+l,0\le l\lt2^m(n\ge1)$</p>
<p>联系之前约瑟夫递归式有个写成二进制的解，$J((b<em>mb</em>{m-1}…b<em>1b_0)_2 )= (b</em>{m-1}…b_1b_0b_m)_2)$，现在考虑推广的有无这样特殊的解。</p>
<p>不妨令$\beta_0=\beta,\beta_1=\gamma$，这样递归式写成$f(1)=\alpha,f(2n+j)=2f(n)+\beta_j,\quad j=0,1,n\ge1$<br>这个递归式按照二进制展开得到</p>
<script type="math/tex; mode=display">
\begin{aligned}
f((b_mb_{m-1}…b_1b_0)_2) & = 2f((b_mb_{m-1}…b_1)_2)+\beta_{b_0}\\
& = 4f(b_mb_{m-1}…b_2)_2)+2\beta_{b_1}+\beta_{b_0}\\
& \quad \vdots\\
&=2^mf((b_m)_2)+2^{m-1}\beta_{b_{m-1}}+\cdots+2\beta_{b_1}+\beta_{b_0}\\
&=2^m\alpha+2^{m-1}\beta_{b_{m-1}}+\cdots+2\beta_{b_1}+\beta_{b_0}\\
\end{aligned}</script><p>现在进一步推广，不仅仅限于二进制表示，允许任何的数字（不仅限于0，1），那么，上述的推导告诉我们<script type="math/tex">f((b_mb_{m-1}…b_1b_0)_2)=(\alpha \beta_{b_{m-1}}\beta_{b_{m-2}}…\beta_{b_1}\beta_{b_0})_2</script><br>把$100$带进去很快就能验证到这是正确的。(偷懒以下就不打了)</p>
<p><strong>循环移位</strong>的性质！</p>
<p>好，接下来对于一般的递归式，</p>
<script type="math/tex; mode=display">f(j)=\alpha_j, \qquad 1\le j\lt d;$$$$f(dn+j)=cf(n)+\beta_j,\qquad0\le j\lt d,n\ge1</script><p>基数是 $d$ 的数着手，产生的值是用基数 $c$ 表示。给出了如下解：<br><strong><script type="math/tex">f((b_mb_{m-1}…b_1b_0)_d)=(\alpha_{b_m} \beta_{b_{m-1}}\beta_{b_{m-2}}…\beta_{b_1}\beta_{b_0})_c</script></strong><br><img src="https://i.loli.net/2020/02/10/Dsyw5mfWA3V67JB.jpg" alt="举个栗子"><br><a href="https://zhuanlan.zhihu.com/p/35820332" target="_blank" rel="noopener">不怎么相关的阅读资料</a></p>
<h2 id="习题选取"><a href="#习题选取" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="和式"><a href="#和式" class="headerlink" title="和式"></a>和式</h1><h2 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h2><p><kbd>Notation</kbd><br>$\sum$ 大写的（$\sigma$）</p>
<h2 id="和式和递归式"><a href="#和式和递归式" class="headerlink" title="和式和递归式"></a>和式和递归式</h2><p><kbd>Sums And Recurrences</kbd></p>
<h2 id="和式的处理"><a href="#和式的处理" class="headerlink" title="和式的处理"></a>和式的处理</h2><p><kbd>Manipulation of Sums</kbd></p>
<h2 id="多重和式"><a href="#多重和式" class="headerlink" title="多重和式"></a>多重和式</h2><p><kbd>Multiple Sums</kbd></p>
<h2 id="一般性的方法"><a href="#一般性的方法" class="headerlink" title="一般性的方法"></a>一般性的方法</h2><p><kbd></kbd></p>
<h2 id="有限微积分和无限微积分"><a href="#有限微积分和无限微积分" class="headerlink" title="有限微积分和无限微积分"></a>有限微积分和无限微积分</h2><p><kbd></kbd></p>
<h2 id="无限和式"><a href="#无限和式" class="headerlink" title="无限和式"></a>无限和式</h2><p><kbd></kbd></p>
<h2 id="习题选取-1"><a href="#习题选取-1" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="整值函数"><a href="#整值函数" class="headerlink" title="整值函数"></a>整值函数</h1><h2 id="底和顶"><a href="#底和顶" class="headerlink" title="底和顶"></a>底和顶</h2><p><kbd></kbd></p>
<h2 id="底和顶的应用"><a href="#底和顶的应用" class="headerlink" title="底和顶的应用"></a>底和顶的应用</h2><p><kbd></kbd></p>
<h2 id="底和顶的递归式"><a href="#底和顶的递归式" class="headerlink" title="底和顶的递归式"></a>底和顶的递归式</h2><p><kbd></kbd></p>
<h2 id="mod：二元运算"><a href="#mod：二元运算" class="headerlink" title="mod：二元运算"></a>mod：二元运算</h2><p><kbd></kbd></p>
<h2 id="底和顶的和式"><a href="#底和顶的和式" class="headerlink" title="底和顶的和式"></a>底和顶的和式</h2><p><kbd></kbd></p>
<h2 id="习题选取-2"><a href="#习题选取-2" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="整除性"><a href="#整除性" class="headerlink" title="整除性"></a>整除性</h2><p><kbd></kbd></p>
<h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p><kbd></kbd></p>
<h2 id="素数的例子"><a href="#素数的例子" class="headerlink" title="素数的例子"></a>素数的例子</h2><p><kbd></kbd></p>
<h2 id="阶乘的因子"><a href="#阶乘的因子" class="headerlink" title="阶乘的因子"></a>阶乘的因子</h2><p><kbd></kbd></p>
<h2 id="互素"><a href="#互素" class="headerlink" title="互素"></a>互素</h2><p><kbd></kbd></p>
<h2 id="mod：同余关系"><a href="#mod：同余关系" class="headerlink" title="mod：同余关系"></a>mod：同余关系</h2><p><kbd></kbd></p>
<h2 id="独立剩余"><a href="#独立剩余" class="headerlink" title="独立剩余"></a>独立剩余</h2><p><kbd></kbd></p>
<h2 id="进一步的应用"><a href="#进一步的应用" class="headerlink" title="进一步的应用"></a>进一步的应用</h2><p><kbd></kbd></p>
<h2 id="varphi-函数和-mu-的应用"><a href="#varphi-函数和-mu-的应用" class="headerlink" title="$\varphi$函数和$\mu$的应用"></a>$\varphi$函数和$\mu$的应用</h2><p><kbd></kbd></p>
<h2 id="习题选取-3"><a href="#习题选取-3" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="二项式系数"><a href="#二项式系数" class="headerlink" title="二项式系数"></a>二项式系数</h1><h2 id="基本恒等式"><a href="#基本恒等式" class="headerlink" title="基本恒等式"></a>基本恒等式</h2><p><kbd></kbd></p>
<h2 id="基本联系"><a href="#基本联系" class="headerlink" title="基本联系"></a>基本联系</h2><p><kbd></kbd></p>
<h2 id="处理的技巧"><a href="#处理的技巧" class="headerlink" title="处理的技巧"></a>处理的技巧</h2><p><kbd></kbd></p>
<h2 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h2><p><kbd></kbd></p>
<h2 id="超几何函数"><a href="#超几何函数" class="headerlink" title="超几何函数"></a>超几何函数</h2><p><kbd></kbd></p>
<h2 id="超几何变换"><a href="#超几何变换" class="headerlink" title="超几何变换"></a>超几何变换</h2><p><kbd></kbd></p>
<h2 id="部分超几何和式"><a href="#部分超几何和式" class="headerlink" title="部分超几何和式"></a>部分超几何和式</h2><p><kbd></kbd></p>
<h2 id="机械求和法"><a href="#机械求和法" class="headerlink" title="机械求和法"></a>机械求和法</h2><p><kbd></kbd></p>
<h2 id="习题选取-4"><a href="#习题选取-4" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="特殊的数"><a href="#特殊的数" class="headerlink" title="特殊的数"></a>特殊的数</h1><h2 id="斯特林数"><a href="#斯特林数" class="headerlink" title="斯特林数"></a>斯特林数</h2><p><kbd></kbd></p>
<h2 id="欧拉数"><a href="#欧拉数" class="headerlink" title="欧拉数"></a>欧拉数</h2><p><kbd></kbd></p>
<h2 id="调和数"><a href="#调和数" class="headerlink" title="调和数"></a>调和数</h2><p><kbd></kbd></p>
<h2 id="调和求和数"><a href="#调和求和数" class="headerlink" title="调和求和数"></a>调和求和数</h2><p><kbd></kbd></p>
<h2 id="伯努利数"><a href="#伯努利数" class="headerlink" title="伯努利数"></a>伯努利数</h2><p><kbd></kbd></p>
<h2 id="斐波那契数"><a href="#斐波那契数" class="headerlink" title="斐波那契数"></a>斐波那契数</h2><p><kbd></kbd></p>
<h2 id="连项式"><a href="#连项式" class="headerlink" title="连项式"></a>连项式</h2><p><kbd></kbd></p>
<h2 id="习题选取-5"><a href="#习题选取-5" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="生成函数-1"><a href="#生成函数-1" class="headerlink" title="生成函数"></a>生成函数</h1><h2 id="多米诺理论与换零线"><a href="#多米诺理论与换零线" class="headerlink" title="多米诺理论与换零线"></a>多米诺理论与换零线</h2><p><kbd></kbd></p>
<h2 id="基本策略"><a href="#基本策略" class="headerlink" title="基本策略"></a>基本策略</h2><p><kbd></kbd></p>
<h2 id="解递归式"><a href="#解递归式" class="headerlink" title="解递归式"></a>解递归式</h2><p><kbd></kbd></p>
<h2 id="特殊的生成函数"><a href="#特殊的生成函数" class="headerlink" title="特殊的生成函数"></a>特殊的生成函数</h2><p><kbd></kbd></p>
<h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p><kbd></kbd></p>
<h2 id="指数生成函数"><a href="#指数生成函数" class="headerlink" title="指数生成函数"></a>指数生成函数</h2><p><kbd></kbd></p>
<h2 id="狄利克雷生成函数"><a href="#狄利克雷生成函数" class="headerlink" title="狄利克雷生成函数"></a>狄利克雷生成函数</h2><p><kbd></kbd></p>
<h2 id="习题选取-6"><a href="#习题选取-6" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="离散概率"><a href="#离散概率" class="headerlink" title="离散概率"></a>离散概率</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><kbd></kbd></p>
<h2 id="均值与方差"><a href="#均值与方差" class="headerlink" title="均值与方差"></a>均值与方差</h2><p><kbd></kbd></p>
<h2 id="概率生成函数"><a href="#概率生成函数" class="headerlink" title="概率生成函数"></a>概率生成函数</h2><p><kbd></kbd></p>
<h2 id="抛掷硬币"><a href="#抛掷硬币" class="headerlink" title="抛掷硬币"></a>抛掷硬币</h2><p><kbd></kbd></p>
<h2 id="散列法"><a href="#散列法" class="headerlink" title="散列法"></a>散列法</h2><p><kbd></kbd></p>
<h2 id="习题选取-7"><a href="#习题选取-7" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h1><h2 id="量的等级"><a href="#量的等级" class="headerlink" title="量的等级"></a>量的等级</h2><p><kbd></kbd></p>
<h2 id="大-O-记号"><a href="#大-O-记号" class="headerlink" title="大$O$记号"></a>大$O$记号</h2><p><kbd></kbd></p>
<h2 id="O-运算规则"><a href="#O-运算规则" class="headerlink" title="$O$运算规则"></a>$O$运算规则</h2><p><kbd></kbd></p>
<h2 id="两个渐进技巧"><a href="#两个渐进技巧" class="headerlink" title="两个渐进技巧"></a>两个渐进技巧</h2><p><kbd></kbd></p>
<h2 id="欧拉求和公式"><a href="#欧拉求和公式" class="headerlink" title="欧拉求和公式"></a>欧拉求和公式</h2><p><kbd></kbd></p>
<h2 id="最后的求和法"><a href="#最后的求和法" class="headerlink" title="最后的求和法"></a>最后的求和法</h2><p><kbd></kbd></p>
<h2 id="习题选取-8"><a href="#习题选取-8" class="headerlink" title="习题选取"></a>习题选取</h2><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><blockquote>
<p>“有两种推广，一种没有什么价值，另一种则是有价值的。没什么思想，仅凭唬人的专门术语做推广是很容易做到的。颇为困难的是从若干好的素材中提取除一份精致凝练的精品。” ——波利亚</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>具体数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Daenerys Stormborn of the House Targaryen.</title>
    <url>/2020/02/07/Team2019/</url>
    <content><![CDATA[<h1 id="Daenerys-Stormborn-of-the-House-Targaryen-2019"><a href="#Daenerys-Stormborn-of-the-House-Targaryen-2019" class="headerlink" title="Daenerys Stormborn of the House Targaryen.(2019)"></a><font color="black" size="6" face="宋体">Daenerys Stormborn of the House Targaryen.(2019)</font></h1><h1 id="坦格利安家族风暴降生丹妮莉丝"><a href="#坦格利安家族风暴降生丹妮莉丝" class="headerlink" title="坦格利安家族风暴降生丹妮莉丝"></a><font color="black" size="6" face="kaiti">坦格利安家族风暴降生丹妮莉丝</font></h1><hr>
<h1 id="Members"><a href="#Members" class="headerlink" title="Members"></a><font color="black" size="7" face="Source Code Pro">Members</font></h1><hr>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">ID</th>
<th style="text-align:center">Grade</th>
<th style="text-align:center">Profession</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Duanwei Xue</td>
<td style="text-align:center">Wqr_</td>
<td style="text-align:center">2018</td>
<td style="text-align:center">Computer Science and Technology</td>
</tr>
<tr>
<td style="text-align:center">Qiaoyang Deng</td>
<td style="text-align:center">dqy_</td>
<td style="text-align:center">2018</td>
<td style="text-align:center">Data Science and Big Data Technology</td>
</tr>
<tr>
<td style="text-align:center">Changtao Lou</td>
<td style="text-align:center">miniLCT</td>
<td style="text-align:center">2018</td>
<td style="text-align:center">Data Science and Big Data Technology</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Onsite"><a href="#Onsite" class="headerlink" title="Onsite"></a><font color="black" size="7" face="Source Code Pro">Onsite</font></h1><hr>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Time</th>
<th style="text-align:center">Name</th>
<th style="text-align:center">Award</th>
<th style="text-align:center">Rank</th>
<th style="text-align:center">Solved</th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
<th style="text-align:center">F</th>
<th style="text-align:center">G</th>
<th style="text-align:center">H</th>
<th style="text-align:center">I</th>
<th style="text-align:center">J</th>
<th style="text-align:center">K</th>
<th style="text-align:center">L</th>
<th style="text-align:center">M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2019.10.27</td>
<td style="text-align:center">2019 ICPC Nanjing Onsite</td>
<td style="text-align:center">None</td>
<td style="text-align:center">305/334</td>
<td style="text-align:center">1/11  &ensp;37</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
</tr>
<tr>
<td style="text-align:center">2019.11.10</td>
<td style="text-align:center">2019 ICPC Nanchang Onsite</td>
<td style="text-align:center">None</td>
<td style="text-align:center">231/332</td>
<td style="text-align:center">3/13  &ensp;  429</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Trainings"><a href="#Trainings" class="headerlink" title="Trainings"></a><font color="black" size="7" face="Source Code Pro">Trainings</font></h1><hr>
<h1 id="Complete-Status-Team-Sessions-Only"><a href="#Complete-Status-Team-Sessions-Only" class="headerlink" title="Complete Status (Team Sessions Only)"></a><font color="black" size="4" face="Fira">Complete Status (Team Sessions Only)</font></h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Origin</th>
<th style="text-align:center">Solved</th>
<th style="text-align:center">Upsolved</th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
<th style="text-align:center">F</th>
<th style="text-align:center">G</th>
<th style="text-align:center">H</th>
<th style="text-align:center">I</th>
<th style="text-align:center">J</th>
<th style="text-align:center">K</th>
<th style="text-align:center">L</th>
<th style="text-align:center">M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">#1</td>
<td style="text-align:center"><a href="/2019/09/15/TeamRound1/" title="2019 USP-ICMC">2019 USP-ICMC</a></td>
<td style="text-align:center">6/11</td>
<td style="text-align:center">2/5</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#2</td>
<td style="text-align:center"><a href="/2019/09/20/TeamRound2/" title="2018 CCPC吉林站">2018 CCPC吉林站</a></td>
<td style="text-align:center">4/12</td>
<td style="text-align:center">2/8</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#3</td>
<td style="text-align:center"><a href="/2019/09/21/TeamRound3/" title="2017 ICPC沈阳站">2017 ICPC沈阳站</a></td>
<td style="text-align:center">3/13</td>
<td style="text-align:center">1/10</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">！</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#4</td>
<td style="text-align:center"><a href="/2019/10/01/TeamRound4/" title="2017 JUST Programming Contest 2.0">2017 JUST Programming Contest 2.0</a></td>
<td style="text-align:center">9/13</td>
<td style="text-align:center">0/4</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#5</td>
<td style="text-align:center"><a href="/2019/10/07/TeamRound5/" title="2018 mid central">2018 mid central</a></td>
<td style="text-align:center">8/11</td>
<td style="text-align:center">0/3</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#6</td>
<td style="text-align:center"><a href="/2019/10/09/TeamRound6/" title="2017 ACM-ICPC EC-Final ShangHai">2017 ACM-ICPC EC-Final ShangHai</a></td>
<td style="text-align:center">4/13</td>
<td style="text-align:center">1/9</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#7</td>
<td style="text-align:center"><a href="/2019/10/20/TeamRound7/" title="2018-2019 ACM-ICPC, Asia Seoul Regional Contest">2018-2019 ACM-ICPC, Asia Seoul Regional Contest</a></td>
<td style="text-align:center">3/12</td>
<td style="text-align:center">1/9</td>
<td style="text-align:center">!</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
<td style="text-align:center">!Ø</td>
</tr>
<tr>
<td style="text-align:center">#8</td>
<td style="text-align:center"><a href="/2019/11/18/TeamRound8/" title="2019 ICPC Malaysia National">2019 ICPC Malaysia National</a></td>
<td style="text-align:center">9/11</td>
<td style="text-align:center">0/2</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#9</td>
<td style="text-align:center"><a href="/2019/11/25/TeamRound9/" title="2019Multi-University Training Contest10">2019Multi-University Training Contest10</a></td>
<td style="text-align:center">3/11</td>
<td style="text-align:center">1/9</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!</td>
</tr>
<tr>
<td style="text-align:center">#10</td>
<td style="text-align:center"><a href="/2019/11/30/TeamRound10/" title="2019Multi-University Training Contest 5">2019Multi-University Training Contest 5</a></td>
<td style="text-align:center">1/10</td>
<td style="text-align:center">0/9</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">#11</td>
<td style="text-align:center"><a href="/2019/12/07/TeamRound11/" title="第十六届浙江大学宁波理工学院程序设计大赛重现赛">第十六届浙江大学宁波理工学院程序设计大赛重现赛</a></td>
<td style="text-align:center">6/11</td>
<td style="text-align:center">4/5</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#12</td>
<td style="text-align:center"><a href="/2020/01/06/TeamRound12/" title="2016-2017 ACM-ICPC Asia-Bangkok Regional Contest">2016-2017 ACM-ICPC Asia-Bangkok Regional Contest</a></td>
<td style="text-align:center">3/12</td>
<td style="text-align:center">6/9</td>
<td style="text-align:center">!</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#13</td>
<td style="text-align:center"><a href="/2020/01/23/TeamRound13/" title="2016 Multi-University Training Contest 6">2016 Multi-University Training Contest 6</a></td>
<td style="text-align:center">3/11</td>
<td style="text-align:center">3/8</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#14</td>
<td style="text-align:center"><a href="/2020/01/30/TeamRound14/" title="The 16th Zhejiang Provincial Collegiate Programming Contest">The 16th Zhejiang Provincial Collegiate Programming Contest</a></td>
<td style="text-align:center">8/13</td>
<td style="text-align:center">3/5</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#15</td>
<td style="text-align:center"><a href="/2020/02/04/TeamRound15/" title="2019 Multi-University Training Contest 9">2019 Multi-University Training Contest 9</a></td>
<td style="text-align:center">3/11</td>
<td style="text-align:center">2/8</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
</tr>
<tr>
<td style="text-align:center">#16</td>
<td style="text-align:center"><a href="/2020/02/09/TeamRound16/" title="2019 Multi-University Training Contest 8">2019 Multi-University Training Contest 8</a></td>
<td style="text-align:center">4/11</td>
<td style="text-align:center">3/8</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#17</td>
<td style="text-align:center"><a href="/2020/02/14/TeamRound17/" title="ICPC 2019-2020 North-Western Russia Regional Contest">ICPC 2019-2020 North-Western Russia Regional Contest</a></td>
<td style="text-align:center">5/13</td>
<td style="text-align:center">3/8</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">#18</td>
<td style="text-align:center"><a href="/2020/02/19/TeamRound18/" title="2019 Multi-University Training Contest 4">2019 Multi-University Training Contest 4</a></td>
<td style="text-align:center">2/10</td>
<td style="text-align:center">3/7</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">Ø</td>
<td style="text-align:center">!</td>
</tr>
<tr>
<td style="text-align:center">#19</td>
<td style="text-align:center"><a href="/2020/02/26/TeamRound19/" title="2019 icpc online ShenYang">2019 icpc online ShenYang</a></td>
<td style="text-align:center">5/11</td>
<td style="text-align:center">1/6</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
</tr>
</tbody>
</table>
</div>
<p>Comment:</p>
<ul>
<li><p>O&ensp; for passing during the contest</p>
</li>
<li><p>Ø&ensp; for passing after the contest</p>
</li>
<li><p>! &ensp;for attempted but failed</p>
</li>
<li><p>● &ensp;for having not attempted yet</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Team</category>
      </categories>
      <tags>
        <tag>Team Round（2020）</tag>
        <tag>Team Round（2019）</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #15: 2019 Multi-University Training Contest 9</title>
    <url>/2020/02/04/TeamRound15/</url>
    <content><![CDATA[<p>这一场是在 2020-02-04 13:00 CST 开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>hdu</tag>
      </tags>
  </entry>
  <entry>
    <title>数论函数学习笔记</title>
    <url>/2020/02/03/Number-theory-Function/</url>
    <content><![CDATA[<blockquote>
<p>我真的好想你<br><br>在每一个雨季<br><br>你选择遗忘的<br><br>是我最不舍的 </p>
</blockquote>
<p>如果发现本文有任何错误，欢迎留言指正或者联系 920861971@qq.com</p>
<p><a href="https://blog.csdn.net/skywalkert/article/details/50500009" target="_blank" rel="noopener">tls的博客!</a></p>
<p><a href="http://jiruyi910387714.is-programmer.com/posts/195270.html" target="_blank" rel="noopener">jls的博客!</a></p>
<p><a href="https://www.cnblogs.com/Robert-JYH/articles/11181750.html" target="_blank" rel="noopener">莫比乌斯函数学习笔记</a></p>
<p><a href="https://www.cnblogs.com/zhouzhendong/p/Number-theory-Function.html" target="_blank" rel="noopener">学军巨佬的博客</a></p>
<p><a href="https://oi-wiki.org/math/mobius/" target="_blank" rel="noopener">OI-WIKI-Mobius</a></p>
<p><a href="http://nanoape.is-programmer.com/posts/192516.html" target="_blank" rel="noopener">nanoape的博客！</a></p>
<h2 id="前前置："><a href="#前前置：" class="headerlink" title="前前置："></a>前前置：</h2><p>引入两个概念：</p>
<h3 id="卷积：Convolution"><a href="#卷积：Convolution" class="headerlink" title="卷积：Convolution"></a>卷积：Convolution</h3><p>是通过两个函数 $f$ 和 $g$ 生成第三个函数的一种数学算子。<a href="https://zh.wikipedia.org/zh-hk/%E5%8D%B7%E7%A7%AF" target="_blank" rel="noopener">wiki</a></p>
<h3 id="反演：Inversion"><a href="#反演：Inversion" class="headerlink" title="反演：Inversion"></a>反演：Inversion</h3><p>假设有两个函数$f$ 和 $g$ 满足:</p>
<script type="math/tex; mode=display">f(n) = \sum_k a_{n,k} \ g(k)</script><p>已知 $g$ 求 $f$ 还是很水的。已知 $f$ 求$g$ 的过程称为反演。<br>现在反演一波（乱写），此处可以跳到<a href="#jump">前置：整除分块</a>  &emsp;很杂乱而且不是很清晰。</p>
<h4 id="二项式反演："><a href="#二项式反演：" class="headerlink" title="二项式反演："></a>二项式反演：</h4><script type="math/tex; mode=display">f(n)=\sum_{k=0}^n\binom nkg(k)</script><script type="math/tex; mode=display">g(n)=\sum_{k=0}^n(-1)^{n-k}\binom nkf(k)</script><h2 id="前置：整除分块"><a href="#前置：整除分块" class="headerlink" title="前置：整除分块"></a><span id="jump">前置：整除分块</span></h2><h3 id="引入："><a href="#引入：" class="headerlink" title="引入："></a>引入：</h3><p>整除分块是用来处理形如<script type="math/tex">\sum_{i=1}^n\lfloor \frac{n}{i}\rfloor</script><br>的式子的方法。<br>当数据加强到$10^{10}$以上时，我们需要低于$O(n)$的更优秀的解法。<br>通过打表或者<del>理性感知</del>，我们可以发现，对于某些$\lfloor \frac{n}{i}\rfloor$，他们的值是相同的，并且呈<strong>块状分布</strong>。<br>由前任的经验，或者自己打表，发现对于一个块，假设它的起始位置的下标为 <strong>$l$</strong> ，那么可以得到的是，它的结束位置的下标为  <strong>$\lfloor\frac{n}{\lfloor\frac{n}{l}\rfloor}\rfloor$</strong><br>再写程序时候，要注意<strong>除法除0</strong>的情况，一般是会判断一下n/l的。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求\sum_&#123;i=1&#125;^n n/i </span></span><br><span class="line"><span class="comment">//枚举左端点和右端点，右端点n/(n/l)</span></span><br><span class="line"><span class="comment">//右端点要想清楚，注意除数除0的情况，一般是会判断一下n/l的。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">    r=n/(n/l);</span><br><span class="line">    ans+=(n/l)*(r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果求\sum_&#123;i=1&#125;^n n/i A[i]</span></span><br><span class="line"><span class="comment">//树状数组访问前缀和。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l = r+<span class="number">1</span>)&#123;</span><br><span class="line">    r = n / (n/l);</span><br><span class="line">    ans += query(n/l)*(r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h3><ol>
<li><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1257" target="_blank" rel="noopener">bzoj1257整除分块</a><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4>给定n，k。求$\sum_{i=1}^{n} k \ mod\  i。$<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4>首先有$k \bmod i = k - \lfloor \frac{k}{i}\rfloor*i$</li>
</ol>
<p>原式等价于求 $n*k-\sum_{i=1}^{n}( \lfloor \frac{k}{i}\rfloor \times i)$</p>
<p>对于每个区间的 $(l,r)$ ，等差数列搞一搞，得到公式为 $(k/l)\times (r-l+1) \times (l+r)/2$ </p>
<ol>
<li><a href="https://www.luogu.com.cn/problem/P2424" target="_blank" rel="noopener">P2424 约数和</a><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4>$f(x)=\sum<em>{d|x} d$ &emsp;求$\sum</em>{i=X}^Y f(i)$</li>
</ol>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>首先想到前缀和。$1\rightarrow y$ 的 减去 $1 \rightarrow  (x-1)$ 的。<br>那么在$1 \rightarrow n$中会出现的约数显然有n个（即1→n每个数都可作为约数），则对于约数 $d,d\in [1,n]$ ，其对约数和的贡献为$ d\times \lfloor n/d \rfloor$，即$ans=\sum_{i=1}^n(i\times\lfloor \frac{n}{i}\rfloor)$。</p>
<p>然后对于$(i\times\lfloor \frac{n}{i}\rfloor)$直接数论分块套上等差数列求和就好了。<br> $s=(n/l)\times (l+r)\times(r-l+1)/2;$</p>
<ol>
<li><a href="https://loj.ac/problem/124" target="_blank" rel="noopener">loj124除数函数求和1</a></li>
</ol>
<h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>给定$1\le n,k\le 1e7$，求$\sum<em>{i=1}^n\sum</em>{d|n}d^k \ mod \ 1e9+7$的值</p>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p> $\sum<em>{i=1}^n\sum</em>{d|n}d^k = \sum_{i=1}^n(i^k\times \lfloor \frac{n}{i} \rfloor)$  &emsp; $\because i^k$不同 所以不能数论分块。观察到数据范围，叉掉$n \ logn$做法，考虑线性筛。<br> 令$f(i) = i ^ k$,不难发现这个是积性函数。于是有$f(a\cdot b)=f(a)\cdot f(b)$线性筛递推，$O(n)$复杂度。</p>
<ol>
<li><a href="https://www.luogu.com.cn/problem/P2260" target="_blank" rel="noopener">P2260 [清华集训2012]模积和</a></li>
</ol>
<h4 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h4><p>$\sum<em>{i=1}^n\sum</em>{j=1}^m(n \ mod \ i) \times (m \ mod \ j), i\neq j \  mod\ 19940417$的值。</p>
<h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><ul>
<li>做这种题，看到不熟悉的模数，先看看他是不是质数，能不能因式分解。发现$19940417 = 7 \times 2848631$。不管有没有用 ，都先分解出来。</li>
<li>开始推式子：先不管$i\neq j$的条件。</li>
</ul>
<p>原式 $= \sum<em>{i=1}^n(n-i\cdot \lfloor n/i\rfloor) \sum</em>{j=1}^m(m-j\times\lfloor m/j\rfloor)=(n^2-\sum<em>{i=1}^n(i\times\lfloor n/i\rfloor))(m^2-\sum</em>{j=1}^m(j\times\lfloor m/j\rfloor))$ </p>
<p>老套路分块等差数列求和 ，这一步可以解决</p>
<ul>
<li>下面考虑$i == j$的情况，</li>
</ul>
<p>$jianqu = \sum<em>{i=1}^{min(n,m)}(n-i\times\lfloor n/i\rfloor)\times(m-i\times\lfloor m/i\rfloor) = \sum</em>{i=1}^{min(n,m)}(n\times m+i^2\times\lfloor n/i\times m/i\rfloor-n\times i\times \lfloor m/ i \rfloor - m\times i\times \lfloor n/ i \rfloor )$</p>
<p>对于$n\times m $ 累加，对于$n\times i\times \lfloor m/i\rfloor $和$m\times i\times \lfloor n/i\rfloor $ 还是老套路，数论分块套等差数列。<br>对于比较难求的 $i^2\times \lfloor n/i \times m/i \rfloor$此时应用平方求和公式$1^2+2^2+……+n^2=\frac{n(n+1)(2n+1)}{6}$前缀搞一搞就行了</p>
<ul>
<li>这道题取模，发现6与模数互质，ex_gcd 求一下逆元。<h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3></li>
</ul>
<ol>
<li><p><a href="https://paste.ubuntu.com/p/STDx6frf4d/" target="_blank" rel="noopener">bzoj1257参考代码</a></p>
</li>
<li><p><a href="https://paste.ubuntu.com/p/VdfDsWMByg/" target="_blank" rel="noopener">洛谷P2424参考代码</a></p>
</li>
<li><p><a href="https://loj.ac/submission/737850" target="_blank" rel="noopener">loj124除数函数求和1</a></p>
</li>
<li><a href="https://paste.ubuntu.com/p/jCYgRyzm9T/" target="_blank" rel="noopener">P2260 [清华集训2012]模积和</a><h2 id="数论函数基础知识"><a href="#数论函数基础知识" class="headerlink" title="数论函数基础知识"></a>数论函数基础知识</h2><h3 id="几个定义"><a href="#几个定义" class="headerlink" title="几个定义"></a>几个定义</h3></li>
</ol>
<ul>
<li>数论函数:定义域为正整数的函数。（没特殊提及情况下以下函数均为数论函数）</li>
<li>积性函数:如果a,b满足$gcd(a,b) = 1$;则有$f(ab) = f(a)(b)$</li>
<li>完全积性函数:$\forall a,b$ ，满足$f(ab) = f(a)(b)$<h3 id="几个性质和例子"><a href="#几个性质和例子" class="headerlink" title="几个性质和例子"></a>几个性质和例子</h3></li>
</ul>
<ol>
<li>欧拉函数:$\varphi(n) = \sum_{i=1}^n[gcd(i,n)==1]$，是积性函数。</li>
<li>莫比乌斯函数：$\mu$,当n有平方因子的时候，$\mu(n)=0$，否则设 $n$ 为 $k$ 个不同质因子的乘积。$\mu(n) = (-1)^k$。</li>
<li>除数函数:这不是完全积性函数，$\sigma<em>a n = \sum</em>{d|n} d^a$。其中$d(n) = \sigma_0{n}$为n的因数个数，$\sigma_1(n) = \sigma(n)$为$n$的约数之和。</li>
<li>幂函数:完全积性函数。$id_k(n)$,表示$n^k$</li>
<li>单位函数:完全积性函数。$e(n) = [n = 1]$    </li>
</ol>
<p><img src="https://i.loli.net/2020/02/03/L1iMOWjCGSAe6U4.png" alt="from tls %%%"> </p>
<script type="math/tex; mode=display">\sum_{d|n}\mu(d)=
\begin{cases}
1, & \text{ $n=1$ } \\
0, & \text{ $n\gt1$}
\end{cases}</script><p><img src="https://i.loli.net/2020/02/03/4IpTtvueoShWFiX.png" alt="from tls %%%"></p>
<h2 id="Dirichlet卷积"><a href="#Dirichlet卷积" class="headerlink" title="Dirichlet卷积"></a>Dirichlet卷积</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>函数$f$与$g$的Dirichlet卷积定义如下：</p>
<script type="math/tex; mode=display">(f*g)(n) = \sum_{d|n}f(d)\times g(\frac{n}{d})</script><p>等价于</p>
<script type="math/tex; mode=display">(f*g)(n) = \sum_{i*j = n}f(i)\times g(j)</script><p>类似的，不难得出</p>
<script type="math/tex; mode=display">(f*g*h)(n)=\sum_{i*j*k=n}f(i)\times g(j) \times h(k)</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质:"></a>性质:</h3><ul>
<li>交换律，结合律：略</li>
<li>分配律：$f<em>(g+h)=f</em>g+g*h$<br>证明如下：<script type="math/tex; mode=display">(g+h)\times f=\sum_{d|n}(g(d)+h(d))f(\frac{n}{d})
\\=\sum_{d|n}g(d)f(\frac{n}{d})+\sum_{d|n}h(d)f(\frac{n}{d})
\\=g\times f+h\times f</script></li>
<li><p>单位元：$f*e=f$<br>证明如下：</p>
<script type="math/tex; mode=display">(f\times e)(n)=\sum_{d|n}f(d)e(\frac{n}{d})\\=\sum_{d|n}f(d)[\frac{n}{d}==1]\\=\sum_{d|n}f(d)[n==d]=f(n)</script></li>
<li><p>如果$f,g$都为积性函数，那么$f*g$也是积性函数。<br>证明如下：</p>
<script type="math/tex; mode=display">h=f\times g=\sum_{d|n}f(d)g(\frac{n}{d})</script><p>对于$h$，有</p>
<script type="math/tex; mode=display">h(x)h(y)=(\sum_{d_1|x}f(d_1)g(\frac{x}{d_1}))(\sum_{d_2|y}f(d_2)g(\frac{y}{d_2}))
\\=\sum_{d_1|x,d_2|y}f(d_1d_2)g(\frac{xy}{d_1d_2})\\=\sum_{d|xy}f(d)g(\frac{xy}{d})=h(xy)</script></li>
</ul>
<p>对于任意一个函数$f$,则一定存在一个函数$g$满足$f*g=e$,则$g$叫做$f$的Dirichlet逆。</p>
<h3 id="计算Dirichlet卷积"><a href="#计算Dirichlet卷积" class="headerlink" title="计算Dirichlet卷积"></a>计算Dirichlet卷积</h3><p>设$h=f*g$<br>计算$h(n)$:根据定义，枚举因数，时间复杂度为$O(\sqrt n)$<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">h(n)=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (n%i)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    h(n)+=f(i)*g(n/i);</span><br><span class="line">    <span class="keyword">if</span> (i*i!=n)</span><br><span class="line">        h(n)+=f(n/i)*g(i);</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">计算$h$，其中h的定义域为<span class="number">1</span>~n,类似筛法，不难得到$O(n\ <span class="built_in">log</span>\ n)$</span><br><span class="line">```cpp</span><br><span class="line"><span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;i*j&lt;=n;j++)</span><br><span class="line">        h(i*j)+=f(i)*g(j);</span><br></pre></td></tr></table></figure></p>
<h3 id="几个Dirichlet卷积"><a href="#几个Dirichlet卷积" class="headerlink" title="几个Dirichlet卷积"></a>几个Dirichlet卷积</h3><ul>
<li>除数函数卷上1。$(1 = id_0)$</li>
</ul>
<script type="math/tex; mode=display">d(n) = \sum_{d|n}1\Rightarrow  d = 1*1</script><script type="math/tex; mode=display">\sigma(n)=\sum_{d|n}d\Rightarrow \sigma=id*1</script><ul>
<li>莫比乌斯函数与1的卷积：很重要!<br>其中 $k$ 为 $n$ 不同种类的质因数个数。<br>$\sum<em>{d|n}\mu(n)=\sum</em>{i=0}^{k}(-1)^i\times \binom{k}{i}=(1-1)^{k}=0^{k}$<br>其中，对于$0^0$没有定义，考虑到$k = 0$的只有$n = 1$,而$\mu (1)  = 1$，所以有</li>
</ul>
<p>$\sum_{d|n}\mu(n)=[n=1]=e(n)$  [P]表示P成立时候为1，否则为0。</p>
<p>所以就会有:$e = \mu * 1 $ &emsp;这里可以看出 $\mu$ 和 $1$在Dirichlet卷积的意义下互为逆元。记住这个式子！！这个对于莫比乌斯反演非常非常非常的重要！！！</p>
<ul>
<li>常用的卷积：<script type="math/tex; mode=display">\varphi*1=??</script> 考虑到，若d为n的因数，则$φ(d)$即与n的最大公约数为$\frac{n}{d}$的数的个数。所以：<script type="math/tex; mode=display">\sum_{d|n}\varphi(d)=n \quad \Longrightarrow \varphi*1=id</script></li>
<li>关于幂函数<script type="math/tex; mode=display">id_k\times(a*b)=(id_k\times a)*(id_k\times b)</script><script type="math/tex; mode=display">(\varphi\times id_k)*id_k=id_{k+1}</script></li>
</ul>
<h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><h3 id="一些题目-1"><a href="#一些题目-1" class="headerlink" title="一些题目"></a>一些题目</h3><ol>
<li><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1101" target="_blank" rel="noopener">bzoj1101Zap反演经典题目</a><h4 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h4></li>
</ol>
<h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><ol>
<li><p><a href="https://codeforces.com/gym/101982" target="_blank" rel="noopener">gym101982Coprime Integers</a></p>
<h4 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h4><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4></li>
<li><p><a href="https://www.luogu.com.cn/problem/P5572" target="_blank" rel="noopener">P5572 [CmdOI2019]简单的数论题</a></p>
<h3 id="参考代码-1"><a href="#参考代码-1" class="headerlink" title="参考代码"></a>参考代码</h3></li>
<li><p><a href="https://loj.ac/problem/2185" target="_blank" rel="noopener">2015SDOI约数个数和</a></p>
<h4 id="题意：-5"><a href="#题意：-5" class="headerlink" title="题意："></a>题意：</h4><h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><h4 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h4><p><a href="https://loj.ac/submission/757692" target="_blank" rel="noopener">分块的预处理（慢一些）</a><br><a href="https://loj.ac/submission/757693" target="_blank" rel="noopener">优化预处理d</a></p>
</li>
</ol>
<h2 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h2><p>利用Dirichlet卷积来构造递推式，从而对一些数论函数进行快速求和的方法。</p>
<p>杜教筛不像是传统的筛法（雾）</p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>快速求$$</p>
<h2 id="洲阁筛"><a href="#洲阁筛" class="headerlink" title="洲阁筛"></a>洲阁筛</h2><h2 id="MIN-25筛"><a href="#MIN-25筛" class="headerlink" title="MIN_25筛"></a>MIN_25筛</h2><h2 id="一些阅读资料"><a href="#一些阅读资料" class="headerlink" title="一些阅读资料"></a>一些阅读资料</h2><p>我可能有些一些也没读过…(羞愧.jpg)<br><a href="https://enkerewpo.github.io/files/THE_XUANKU_INVERSION_MAGIC.pdf" target="_blank" rel="noopener">炫酷反演魔术       —VFleaKing</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>莫比乌斯函数与莫比乌斯反演</tag>
        <tag>杜教筛</tag>
        <tag>Number Theory Function</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CCPC Wannafly Winter Camp</title>
    <url>/2020/02/02/2020CCPCWannaflyWinterCamp/</url>
    <content><![CDATA[<blockquote>
<p>我们需要想象。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—-wls</p>
</blockquote>
<p>非常感谢$wls$。同时这也是$Daenerys\ Stormborn\ of \ the \ House\ Targaryen.$ 最后一次面对面的合作了。[沉思]</p>
<h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><h2 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h2>]]></content>
      <categories>
        <category>Wannafly</category>
      </categories>
      <tags>
        <tag>Wannafly</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #14: The 16th Zhejiang Provincial Collegiate Programming Contest</title>
    <url>/2020/01/30/TeamRound14/</url>
    <content><![CDATA[<p>这一场是在 2020-01-30 13:00 CST 开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>xxPCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Fibonacci的一些性质</title>
    <url>/2020/01/28/fibonacci/</url>
    <content><![CDATA[<h3 id="序论-杂论"><a href="#序论-杂论" class="headerlink" title="序论(杂论)"></a>序论(杂论)</h3><p>心血来潮想整理一下。</p>
<p>Fibonacci 还是很著名的  <a href="https://oeis.org/A000045" target="_blank" rel="noopener">oeis A000045</a></p>
<blockquote>
<p>斐波那契数与三角形关系<br><img src="https://i.loli.net/2020/01/28/qsY5QliUhoJtNH3.png" alt="from wikipedia"><br><img src="https://i.loli.net/2020/01/28/jnzeJh7xZKvaIA9.png" alt="带有色彩的，此处说与杨辉三角"></p>
</blockquote>
<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><ol>
<li>初等代数解法&emsp; 略</li>
<li>线性代数解法&emsp; 暂时略</li>
<li>数论解法&emsp; &emsp;&emsp;暂时略</li>
<li>组合数解法&emsp;&emsp; 暂时略</li>
<li>近似值解法&emsp;&emsp; 暂时略 </li>
<li>计算机 ：矩阵快速幂优化<br>这个由于写mathjax本地可以之后部署可能还会有锅就很懒就不想写一大堆式子。之前也遇到过一部分用过这个的题目，贴一下<a href="https://paste.ubuntu.com/p/3wg9tnPfkY/" target="_blank" rel="noopener">矩阵快速幂板子</a>吧。用矩阵快速幂一定一定一定要想清楚，开数组啊，清零啊什么的。<h3 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a><a href="https://www.shs.edu.tw/works/essay/2014/03/2014032310331517.pdf" target="_blank" rel="noopener">一些性质</a></h3><blockquote>
<ul>
<li>这里的前提是$f<em>1 = f_2 = 1，f</em>{n+2} = f<em>{n+1}+f</em>{n} \quad(n\ge 1)$</li>
<li>$F<em>{m+n}=F</em>{m-1} \cdot F<em>n+F_m \cdot F</em>{n+1}$</li>
<li>上式令$m=n$，得到$F<em>{2n} = F_n(F</em>{n+1}+F_{n-1})$</li>
<li>由上 归纳证明可得，$\mathsf{\forall} k \in \mathbb{N}, \quad F<em>n | F</em>{nk}$ </li>
<li>$F<em>1+F_3+\dots +F</em>{2n-1} = F<em>{2n},F_2 + F_4 + \dots + F</em>{2n} = F_{2n + 1} - 1$</li>
<li>$\sum<em>{i=1}^n F_i = F</em>{n+2} - 1$</li>
<li>$\sum<em>{i=1}^n F_i^2 = F_n \cdot F</em>{n+1}$</li>
<li>$\sum<em>{i=1}^n k\cdot F_k = n\cdot f</em>{n+2}-f_{n+3}+2， n\ge 1$</li>
<li><a href="http://www.mathsgreat.com/fibon/fibon_109.pdf" target="_blank" rel="noopener">卡西尼性质(Cassini’s identity)</a> : $F<em>n^2=(-1)^{n-1} + F</em>{n-1} \cdot F_{n+1}$</li>
<li>$F<em>n^2+F</em>{n-1}^2 = F_{2n-1}$ </li>
<li>$gcd(F<em>a, F_b)=F</em>{gcd(a, b)}$</li>
<li>齐肯多夫定理:<strong>任何</strong>正整数都可以表示成若干个不连续的斐波那契数之和。利用贪心的算法可以每回都找到最大可能的斐波那契数。</li>
<li>以斐波那契数列相邻两项作为输入会使欧几里德算法达到最坏复杂度</li>
<li>任意取连续的k项，其$\sum$不会出现在数列中</li>
<li>在Fibonacci数列中，每一项模K后（K为正整数）所形成的数列一定会循环，下面会讨论一下这个性质。<br><img src="https://i.loli.net/2020/01/28/x1En5yRdfFuDcap.png" alt="from 知乎"></li>
</ul>
</blockquote>
</li>
</ol>
<p>相关数列：lucas数列，卢卡斯数列和斐波那契数列的一些关系，组合数学上的一些恒等式 &emsp;&emsp;    反费波那西数列，巴都万数列，佩尔数列 等等 &emsp; 在此就不一一赘述。</p>
<h3 id="模意义下的周期性"><a href="#模意义下的周期性" class="headerlink" title="模意义下的周期性"></a>模意义下的周期性</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>对于任意整数$n$,数列{$f_i (mod\quad n)$}为周期数列，皮萨诺周期$\pi(n)$记作该数列的周期，例如模3的斐波那契数列前若干项是$0, 1, 1, 2, 0, 2, 2, 1, 0, 1, 1, 2, 0, 2, 2, 1, 0, 1, 1, 2, 0, 2, 2, 1, 0…………$<br><a href="https://oeis.org/A082115" target="_blank" rel="noopener">oeisA082115</a>&emsp;这一数列的周期是8，即$\pi(3)=8$</p>
<h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><ol>
<li>有趣的一个点是除了$\pi(2) = 3$ 以外，皮萨诺周期都是偶数。</li>
<li>模$n$意义下的Pisano numbers总是不超过$6n$，并且只有在$n=2 \times 5^k$时猜取得等号。 <blockquote>
<p>模 $n$ 周期（皮萨诺周期）<br>$\pi(p^k) = p^{k-1} \pi(p)$<br>$\pi(nm) = lcm(\pi(n), \pi(m)), \forall n \perp m$<br>$\pi(2)=3, \pi(3)=8, \pi(5)=20$<br>$\forall p \equiv \pm 1\pmod {10}, \pi(p)|p-1$<br>$\forall p \equiv \pm 2\pmod {5}, \pi(p)|2p+2$</p>
</blockquote>
</li>
</ol>
<h4 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h4><p>problem 计算$F(n) mod \ P \quad(n\le10^{30000000},P\le10^{12})$<br><a href="https://gradprogram.math.arizona.edu/~ura-reports/071/Campbell.Charles/Final.pdf" target="_blank" rel="noopener">论文 &emsp;The Period of the Fibonacci Sequence Modulo j</a></p>
<p><a href="https://www.cnblogs.com/cjoierShiina-Mashiro/p/11385287.html" target="_blank" rel="noopener">中文证明的博客</a> &emsp;好像前置技能是会二次剩余。<br><img src="https://i.loli.net/2020/01/29/pb8TJwXWzqMs6vh.png" alt="from Shiina_Mashiro博客"><br>以下是我的理解：求F mod n的循环节长度<br>step1： 把n进行素因子分解，$n = p_1^{a_1}\cdot p_2^{a_2}…p_k^{a_k}$<br>step2： 分别计算 F 数模每个$P_m$的循环节长度，假设长度分别为$x_1,x_2,…x_k$。<br>step3： 那么 F 模n的循环节长度为$L = lcm(x_1,x_2…x_k)$</p>
<p>如此，便可求出循环节长度。那么第二步是关键，如何求 F 模 $p_m$的循环节长度。</p>
<p>这里用了个定理， F 模数字$p_m$的最小循环节长度等于$\pi(p)\times p^{m-1}$，其中$\pi(p)$表示 F 模素数 p 的最小循环节长度。如此只要求出$\pi(p)$.</p>
<p>用以下定理便可以求出$\pi(p)$:<br>如果5是模p的二次剩余（$p\equiv\pm 1(mod \ 5)$），那么循环节长度是$p-1$的因子，否则($p\equiv\pm 2 (mod \ 5)$)是$2(p+1)$的因子。对于小于等于5的素数。$\pi(2)=3, \pi(3)=8, \pi(5)=20$<br><img src="https://i.loli.net/2020/01/29/xKrhqONWysjVBQR.png" alt="欧拉判定准则，此处写一个check函数"></p>
<h3 id="一些代码："><a href="#一些代码：" class="headerlink" title="一些代码："></a>一些代码：</h3><ol>
<li><p>java求小于1000项的f（from claris）连注释都打上了qwq</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BigInteger f[] = <span class="keyword">new</span> BigInteger[<span class="number">1005</span>];<span class="comment">//数组用法和c++类似</span></span><br><span class="line">        <span class="comment">//二维数组BigInteger[][] f = new BigInteger[1005][1005]</span></span><br><span class="line">        f[<span class="number">1</span>] = BigInteger.valueOf(<span class="number">1</span>);f[<span class="number">2</span>] = BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">1000</span>;i++)f[i]=f[i-<span class="number">2</span>].add(f[i-<span class="number">1</span>]);</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n , t;</span><br><span class="line">        <span class="comment">//用for(...;t−−;)替代会报错，因为要求第二个表达式必须返回bool</span></span><br><span class="line">        <span class="keyword">for</span>(t=input.nextInt();t&gt;<span class="number">0</span>;t--)&#123;</span><br><span class="line">            n=input.nextInt();</span><br><span class="line">            System.out.println(f[n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>快速倍增法<br>由等式 </p>
</li>
</ol>
<script type="math/tex; mode=display">F_{2k} = F_k(2F_{k+1}-F{k})</script><script type="math/tex; mode=display">F_{2k+1}=F_{k+1}^2+F_k^2</script><p>于是可以通过这样的方法快速计算两个相邻的斐波那契数（常数比矩乘小）。代码如下，返回值是一个二元组$（F<em>n，F</em>{n+1}）$。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//from oi-wiki</span></span><br><span class="line">pair&lt;int, int&gt; fib(int n) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">auto</span> p = fib(n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> c = p.first * (<span class="number">2</span> * p.second - p.first);</span><br><span class="line">  <span class="keyword">int</span> d = p.first * p.first + p.second * p.second;</span><br><span class="line">  <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;d, c + d&#125;;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> &#123;c, d&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>求循环节长度 51nod1195<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//others</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tr1/unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FT first </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">tr1::<span class="built_in">unordered_map</span>&lt;ll,ll&gt;S;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">power</span><span class="params">(ll a,ll b,ll mod)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rs=<span class="number">1</span>;a=a%mod;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=<span class="number">1l</span>l*a*a%mod)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)rs=<span class="number">1l</span>l*rs*a%mod;</span><br><span class="line">    <span class="keyword">return</span> rs;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll x,ll y)</span></span>&#123;<span class="keyword">return</span> y?(gcd(y,x%y)):x;&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">namespace</span> SP1&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt;fac;</span><br><span class="line">    ll nowlen,M;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll *b,ll mod)</span></span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> bd=a[<span class="number">0</span>]*b[<span class="number">0</span>],bc=a[<span class="number">0</span>]*b[<span class="number">1</span>],ad=a[<span class="number">1</span>]*b[<span class="number">0</span>],ac=a[<span class="number">1</span>]*b[<span class="number">1</span>];</span><br><span class="line">        a[<span class="number">1</span>]=(bc+ad+ac)%mod,a[<span class="number">0</span>]=(bd+ac)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">power_p</span><span class="params">(ll *a,ll b,ll mod)</span></span>&#123;</span><br><span class="line">        ll c[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,mul(a,a,mod))</span><br><span class="line">            <span class="keyword">if</span>(b&amp;<span class="number">1</span>)mul(c,a,mod);</span><br><span class="line">        a[<span class="number">0</span>]=c[<span class="number">0</span>];a[<span class="number">1</span>]=c[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll sum)</span></span>&#123;</span><br><span class="line">        ll b[<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        power_p(b,sum,M);</span><br><span class="line">        <span class="keyword">return</span> b[<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;b[<span class="number">0</span>]==<span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,ll sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos==fac.size())&#123;</span><br><span class="line">            (sum!=<span class="number">1</span>&amp;&amp;check(sum))?(nowlen=min(nowlen,sum)):<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll rs=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=fac[pos].SD;++i)&#123;</span><br><span class="line">            dfs(pos+<span class="number">1</span>,sum*rs);</span><br><span class="line">            rs*=fac[pos].FT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">getlen</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">2</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">3</span>)<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">5</span>)<span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">if</span>(S.find(x)!=S.end())<span class="keyword">return</span> S[x];</span><br><span class="line">        ll base=(power(<span class="number">5</span>,(x<span class="number">-1</span>)/<span class="number">2</span>,x)==<span class="number">1</span>)?(x<span class="number">-1</span>):(<span class="number">2</span>*x+<span class="number">2</span>);</span><br><span class="line">        fac.clear();nowlen=INF;M=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=base;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(base%i))&#123;</span><br><span class="line">                pii t=MP(i,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">while</span>(!(base%i))base/=i,++t.SD;</span><br><span class="line">                fac.PB(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(base!=<span class="number">1</span>)fac.PB(MP(base,<span class="number">1</span>));</span><br><span class="line">        dfs(<span class="number">0</span>,<span class="number">1</span>);<span class="keyword">return</span> S[x]=nowlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt;fac;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">"1"</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">    fac.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(n%i))&#123;</span><br><span class="line">            pii t=MP(i,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(!(n%i))n/=i,++t.SD;</span><br><span class="line">            fac.PB(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>)fac.PB(MP(n,<span class="number">1</span>)); </span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;fac.size();++i)&#123;</span><br><span class="line">        ll l=SP1::getlen(fac[i].FT);</span><br><span class="line">        l=l*power(fac[i].first,fac[i].second<span class="number">-1</span>,INF);</span><br><span class="line">        ans=(ans*l)/gcd(ans,l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        solve(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="一些题目："><a href="#一些题目：" class="headerlink" title="一些题目："></a>一些题目：</h3><p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1195" target="_blank" rel="noopener">51nod1195斐波那契数列的循环节</a><br><a href="https://www.51nod.com/Challenge/Problem.html#problemId=1263" target="_blank" rel="noopener">51nod1263</a><br><a href="https://www.luogu.com.cn/problem/P4000" target="_blank" rel="noopener">洛谷P4000</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Fibonacci</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>Matrix-Tree 基尔霍夫矩阵树定理及一些题目</title>
    <url>/2020/01/27/Matrix-Tree/</url>
    <content><![CDATA[<blockquote>
<p>对于一张图，建立矩阵$C$，$C[i][i]$ = $i$的度数，若i，j之间有边，那么$C[i][j] = -1$,否则为0。这张图的生成树等于C的$n-1$阶行列式的值。</p>
</blockquote>
<h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><p><a href="https://codeforces.com/contest/53/problem/E" target="_blank" rel="noopener">容斥+基尔霍夫矩阵</a> 这道题也可用状压dp，没弄懂qwq<br><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1002" target="_blank" rel="noopener">[FJOI2007]轮状病毒</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Matrix-Tree</tag>
        <tag>计数</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #13:2016 Multi-University Training Contest 6</title>
    <url>/2020/01/23/TeamRound13/</url>
    <content><![CDATA[<p>这一场是在2020-01-23 12:30 CST开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
        <tag>Team Round（2020）</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式学习笔记</title>
    <url>/2020/01/09/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>十六岁没能送你玫瑰，二十六岁请你喝一次勇闯天涯叭。  <kb><br>[toc]</kb></p>
</blockquote>
<p>目前想完成的任务是：多项式之快速傅里叶变换（FFT）/数论变换（NTT）</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><p>对复数和复平面有一定的了解</p>
</li>
<li><p>了解逆元，原根，中国剩余定理</p>
</li>
<li><p>对多项式有一定认识，能写$O（n^2）$的高精乘</p>
</li>
<li><p><del>对分治很了解</del></p>
</li>
<li><p>UPD:本文之前只是介绍$FFT$，后来慢慢扩展得有点多，似乎前置知识有点多。</p>
<h2 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>定义<kbd>多项式</kbd>为形如下式的<kbd>代数表达式</kbd>。</p>
<script type="math/tex; mode=display">P(x) = \sum_{i=0}^n a_ix^i = a_0+a_1x+a_2x^2+…a_nx^n</script><p>其中$a_0,a_1,a_2……a_n$称为多项式的系数。<br>最高项的指数n叫做多项式的<kbd>度</kbd>，$Degree ,n = deg P$,也可以说是多项式的系数。<strong>本文没特殊说明情况下默认$n = deg\ F$</strong></p>
<h3 id="多项式的卷积形式"><a href="#多项式的卷积形式" class="headerlink" title="多项式的卷积形式"></a>多项式的卷积形式</h3><p>设有两个多项式$g(x), f(x)$,设他们的度数分别为$n , m$，则卷积具有如下形式：</p>
<script type="math/tex; mode=display">h(x) = g(x)f(x)=\sum_{i=0}^{n}\sum_{j=0}^m \ g_i\ f_j\ x^{i+j}=\sum_{i=0}^{n+m}\sum_{j=0}^{i}g_j\ f_{i-j}\ x^i</script></li>
</ul>
<p>基础的，我们可以通过$O(n*m)$来获得卷积结果。</p>
<h2 id="Karatsuba乘法"><a href="#Karatsuba乘法" class="headerlink" title="Karatsuba乘法"></a>Karatsuba乘法</h2><p>值得一提的是，$Karatsuba$ 算法是<strong>第一个</strong>比小学二次乘法算法渐进快速的算法。</p>
<p>对于上面的卷积，$Karatsuba$ 提出如下方法：<br>对于多项式 $F$ ,不妨设$n = deg \ F+1$,此时有：<script type="math/tex">F(x)=\sum_{i=0}^{n-1}a_ix^i</script><br>令$F(x) = F_0(x)+x^{\frac{n}{2}}F_1(x),G(x)=G_0(X)+x^{\frac{n}{2}}G_1(x)$<br>其中有:$deg\ F_0=deg\ F_1=deg\ G_0=deg\ G_1=\frac n2$<br>那么得到：<script type="math/tex">(F\times G)(x)=(F_0\times G_0)(x)+x^{\frac n2}(F_0\times G_1+F_1\times G_0)(x)+x^n(F_1\times G_1)(x)</script><br>不让令$M(x)=((F_0+F_1)\times(G_0+G_1))(x)$<br>不难发现：</p>
<script type="math/tex; mode=display">(F_0\times G_1+F_1\times G_0)(x)=M(x)-(F_0\times G_0)(x)-(F_1\times G_1)(x)</script><p>至此，我们只需要三个多项式的卷积 $M(x),(F_0\times G_0)(x)-(F_1\times G_1)(x)$ 即可。</p>
<p>采用分治的做法。时间复杂度为：<script type="math/tex">T(n)=3T(\frac n2)+O(n)=n^{\log_23}\approx n^{1.585}</script></p>
<p>$python$ 的代码实现<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 2 and 3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">karatsuba</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    num1Str, num2Str = str(num1), str(num2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1Str[<span class="number">0</span>] == <span class="string">'-'</span>: <span class="keyword">return</span> -karatsuba(-num1, num2)</span><br><span class="line">    <span class="keyword">if</span> num2Str[<span class="number">0</span>] == <span class="string">'-'</span>: <span class="keyword">return</span> -karatsuba(num1, -num2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1 &lt; <span class="number">10</span> <span class="keyword">or</span> num2 &lt; <span class="number">10</span>: <span class="keyword">return</span> num1 * num2</span><br><span class="line">    </span><br><span class="line">    maxLength = max(len(num1Str), len(num2Str))</span><br><span class="line">    num1Str = <span class="string">''</span>.join(list(<span class="string">'0'</span> * maxLength)[:-len(num1Str)] + list(num1Str))</span><br><span class="line">    num2Str = <span class="string">''</span>.join(list(<span class="string">'0'</span> * maxLength)[:-len(num2Str)] + list(num2Str))</span><br><span class="line">    </span><br><span class="line">    splitPosition = maxLength // <span class="number">2</span></span><br><span class="line">    high1, low1 = int(num1Str[:-splitPosition]), int(num1Str[-splitPosition:])</span><br><span class="line">    high2, low2 = int(num2Str[:-splitPosition]), int(num2Str[-splitPosition:])</span><br><span class="line">    z0, z2 = karatsuba(low1, low2), karatsuba(high1, high2)</span><br><span class="line">    z1 = karatsuba((low1 + high1), (low2 + high2))</span><br><span class="line">    <span class="keyword">return</span> z2 * <span class="number">10</span> ** (<span class="number">2</span> * splitPosition) + (z1 - z2 - z0) * <span class="number">10</span> ** (splitPosition) + z0</span><br></pre></td></tr></table></figure></p>
<p>此外，<a href="https://en.wikipedia.org/wiki/Toom%E2%80%93Cook_multiplication" target="_blank" rel="noopener">Toom–Cook multiplication</a>是此算法更快速的泛型。对于$n$足够大时还有<a href="https://en.wikipedia.org/wiki/Sch%C3%B6nhage%E2%80%93Strassen_algorithm" target="_blank" rel="noopener">Schönhage–Strassen algorithm</a>算法是更快的，它的时间复杂度为$O(n\ log \ n\ log\  log n)$.</p>
<h2 id="多项式的系数表示与点值表示"><a href="#多项式的系数表示与点值表示" class="headerlink" title="多项式的系数表示与点值表示"></a>多项式的系数表示与点值表示</h2><h3 id="系数表示"><a href="#系数表示" class="headerlink" title="系数表示"></a>系数表示</h3><p>对于多项式<script type="math/tex">f(x)=a_0+a_1x+a_2x^2+\cdots a_nx^n</script><br>我们将 $\mathbf{a}$ 数组看作$n+1$维向量 $\vec{a} = (a_0,a_1,\cdots,a_n)$，其<strong>系数表示</strong>就是向量$\vec a$。 </p>
<h3 id="点值表示"><a href="#点值表示" class="headerlink" title="点值表示"></a>点值表示</h3><p><del>由小学知识可知</del>，$n$ 个点$(x_i,y_i)$便可以唯一确定一个多项式$y=F(x)$</p>
<p>现在取任意$n+1$个点</p>
<h2 id="拉格朗日插值法（Lagrange）"><a href="#拉格朗日插值法（Lagrange）" class="headerlink" title="拉格朗日插值法（Lagrange）"></a>拉格朗日插值法（Lagrange）</h2><p><a href="https://www.zhihu.com/question/58333118/answer/262507694" target="_blank" rel="noopener">在知乎学数学.jpg</a> &emsp;有点想吐槽一下最近知乎越来越…了，钓鱼问题乱飞。。</p>
<h3 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h3><h3 id="重心拉格朗日插值法"><a href="#重心拉格朗日插值法" class="headerlink" title="重心拉格朗日插值法"></a>重心拉格朗日插值法</h3><h2 id="复数与单位根"><a href="#复数与单位根" class="headerlink" title="复数与单位根"></a>复数与单位根</h2><h2 id="FFT-快速傅里叶变换"><a href="#FFT-快速傅里叶变换" class="headerlink" title="FFT(快速傅里叶变换)"></a>FFT(快速傅里叶变换)</h2><h3 id="为什么引入FFT"><a href="#为什么引入FFT" class="headerlink" title="为什么引入FFT"></a>为什么引入FFT</h3><p>两个多项式相乘朴素算法的复杂度是$O(n^2)$而使用FFT优化之后可以把复杂度降为$O(nlogn)$</p>
<h2 id="NTT-数论变换"><a href="#NTT-数论变换" class="headerlink" title="NTT(数论变换)"></a>NTT(数论变换)</h2><h2 id="分治FFT"><a href="#分治FFT" class="headerlink" title="分治FFT"></a>分治FFT</h2><h2 id="拆系数FFT与三模数FFT"><a href="#拆系数FFT与三模数FFT" class="headerlink" title="拆系数FFT与三模数FFT"></a>拆系数FFT与三模数FFT</h2><h2 id="一些题目及其思路"><a href="#一些题目及其思路" class="headerlink" title="一些题目及其思路"></a>一些题目及其思路</h2><h3 id="1-【模板】多项式乘法"><a href="#1-【模板】多项式乘法" class="headerlink" title="1. 【模板】多项式乘法"></a>1. <a href="https://www.luogu.com.cn/problem/P3803" target="_blank" rel="noopener">【模板】多项式乘法</a></h3><p>$FFT$:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> LD PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    LD r, i;</span><br><span class="line">    C(LD r = <span class="number">0</span>, LD i = <span class="number">0</span>) : r(r), i(i) &#123;&#125;</span><br><span class="line">&#125; A[MAXN], B[MAXN];</span><br><span class="line">C <span class="keyword">operator</span>+(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r + b.r, a.i + b.i); &#125;</span><br><span class="line">C <span class="keyword">operator</span>-(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r - b.r, a.i - b.i); &#125;</span><br><span class="line">C <span class="keyword">operator</span>*(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(C x[], <span class="keyword">int</span> n, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; t)</span><br><span class="line">            swap(x[i], x[t]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n &gt;&gt; <span class="number">1</span>; (t ^= j) &lt; j; j &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= n; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">C <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(p * <span class="number">2</span> * PI / h), <span class="built_in">sin</span>(p * <span class="number">2</span> * PI / h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += h) &#123;</span><br><span class="line">            C w(1, 0), u;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = h &gt;&gt; <span class="number">1</span>; j &lt; i + k; ++j) &#123;</span><br><span class="line">                u = x[j + k] * w;</span><br><span class="line">                x[j + k] = x[j] - u;</span><br><span class="line">                x[j] = x[j] + u;</span><br><span class="line">                w = w * wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">-1</span>)</span><br><span class="line">        FOR(i, <span class="number">0</span>, n)</span><br><span class="line">    x[i].r /= n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conv</span><span class="params">(C a[], C b[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    FFT(a, n, <span class="number">1</span>);</span><br><span class="line">    FFT(b, n, <span class="number">1</span>);</span><br><span class="line">    FOR(i, <span class="number">0</span>, n)</span><br><span class="line">    a[i] = a[i] * b[i];</span><br><span class="line">    FFT(a, n, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a, b, n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; A[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= b; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; B[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a + b &gt;= n) &#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    conv(A, B, n);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "n ==== " &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a + b; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(A[i].r + <span class="number">0.5</span>) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>$NTT$<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) for (decay<span class="meta-string">&lt;decltype(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span> ;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> G = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">LL wn[N &lt;&lt; <span class="number">2</span>], rev[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function">LL <span class="title">bin</span><span class="params">(LL x, LL n, LL MOD)</span> </span>&#123;</span><br><span class="line">    LL ret = MOD != <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (x %= MOD; n; n &gt;&gt;= <span class="number">1</span>, x = x * x % MOD)</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = ret * x % MOD;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">get_inv</span><span class="params">(LL x, LL p)</span> </span>&#123; <span class="keyword">return</span> bin(x, p - <span class="number">2</span>, p); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NTT_init</span><span class="params">(<span class="keyword">int</span> n_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>; <span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; n &lt;= n_; n &lt;&lt;= <span class="number">1</span>) ++step;</span><br><span class="line">    FOR (i, <span class="number">1</span>, n)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (step - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> g = bin(G, (MOD - <span class="number">1</span>) / n, MOD);</span><br><span class="line">    wn[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        wn[i] = wn[i - <span class="number">1</span>] * g % MOD;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(LL a[], <span class="keyword">int</span> n, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    FOR (i, <span class="number">0</span>, n) <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">        <span class="built_in">std</span>::swap(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += (k &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = n / (k &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            FOR (j, <span class="number">0</span>, k) &#123;</span><br><span class="line">                LL w = f == <span class="number">1</span> ? wn[t * j] : wn[n - t * j];</span><br><span class="line">                LL x = a[i + j];</span><br><span class="line">                LL y = a[i + j + k] * w % MOD;</span><br><span class="line">                a[i + j] = (x + y) % MOD;</span><br><span class="line">                a[i + j + k] = (x - y + MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="number">-1</span>) &#123;</span><br><span class="line">        LL ninv = get_inv(n, MOD);</span><br><span class="line">        FOR (i, <span class="number">0</span>, n)</span><br><span class="line">            a[i] = a[i] * ninv % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n , m, a[maxn], b[maxn],limit = <span class="number">1</span>, L;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)<span class="built_in">cin</span> &gt;&gt; b[j];</span><br><span class="line">    <span class="keyword">while</span>(limit &lt;= n+m)limit++,L++;</span><br><span class="line">    limit = NTT_init(m+n);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; "limit === "&lt;&lt;limit &lt;&lt; endl;</span></span><br><span class="line">    NTT(a,limit , <span class="number">1</span>);NTT(b , limit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limit; i++) a[i] = (a[i] * b[i]) % MOD;</span><br><span class="line">    NTT(a,limit , <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n+m; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (a[i] + mod) % mod &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;<span class="comment">//cout &lt;&lt; '\n';</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-【模板】A-B-Problem升级版（FFT快速傅里叶）"><a href="#2-【模板】A-B-Problem升级版（FFT快速傅里叶）" class="headerlink" title="2.【模板】A*B Problem升级版（FFT快速傅里叶）"></a>2.<a href="https://www.luogu.com.cn/problem/P1919" target="_blank" rel="noopener">【模板】A*B Problem升级版（FFT快速傅里叶）</a></h3><p>给定两个大整数$A,B$,求$A\times B$<br>把$A$看作$A=\sum_{i=0}^{n-1}a_i*10^i$<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fft不同位数的乘法。A*B 看作A = 累加a*10^Pi</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) \</span></span><br><span class="line">    <span class="keyword">for</span> (decay&lt;<span class="keyword">decltype</span>(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, x, y) \</span></span><br><span class="line">    <span class="keyword">for</span> (decay&lt;<span class="keyword">decltype</span>(x)&gt;::type i = (x), _##i = (y); i &gt; _##i; --i)</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> LD PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C</span> &#123;</span></span><br><span class="line">    LD r, i;</span><br><span class="line">    C(LD r = <span class="number">0</span>, LD i = <span class="number">0</span>) : r(r), i(i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">C <span class="keyword">operator</span>+(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r + b.r, a.i + b.i); &#125;</span><br><span class="line">C <span class="keyword">operator</span>-(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123; <span class="keyword">return</span> C(a.r - b.r, a.i - b.i); &#125;</span><br><span class="line">C <span class="keyword">operator</span>*(<span class="keyword">const</span> C&amp; a, <span class="keyword">const</span> C&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> C(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(C x[], <span class="keyword">int</span> n, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; t) swap(x[i], x[t]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n &gt;&gt; <span class="number">1</span>; (t ^= j) &lt; j; j &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">2</span>; h &lt;= n; h &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">C <span class="title">wn</span><span class="params">(<span class="built_in">cos</span>(p * <span class="number">2</span> * PI / h), <span class="built_in">sin</span>(p * <span class="number">2</span> * PI / h))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += h) &#123;</span><br><span class="line">            C w(1, 0), u;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = h &gt;&gt; <span class="number">1</span>; j &lt; i + k; ++j) &#123;</span><br><span class="line">                u = x[j + k] * w;</span><br><span class="line">                x[j + k] = x[j] - u;</span><br><span class="line">                x[j] = x[j] + u;</span><br><span class="line">                w = w * wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="number">-1</span>) FOR(i, <span class="number">0</span>, n)</span><br><span class="line">    x[i].r /= n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conv</span><span class="params">(C a[], C b[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    FFT(a, n, <span class="number">1</span>);</span><br><span class="line">    FFT(b, n, <span class="number">1</span>);</span><br><span class="line">    FOR(i, <span class="number">0</span>, n)</span><br><span class="line">    a[i] = a[i] * b[i];</span><br><span class="line">    FFT(a, n, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> limit = <span class="number">1</span>, bit = <span class="number">0</span>;  <span class="comment">// limit为最终扩充的长度 limit = 1&lt;&lt;bit</span></span><br><span class="line"><span class="keyword">int</span> wz[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> re[maxn &lt;&lt; <span class="number">2</span>];  <span class="comment">//存储结果</span></span><br><span class="line">C a[maxn &lt;&lt; <span class="number">2</span>], b[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> s1[maxn], s2[maxn];  <span class="comment">//存储两个整数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s1, s2);</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(s1), len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="keyword">while</span> (limit &lt;= len1 + len2) &#123;</span><br><span class="line">        limit &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        bit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; "limit === "  &lt;&lt; limit &lt;&lt; endl &lt;&lt; "bit ==== " &lt;&lt; bit &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len1 - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">        a[j].r = s1[i] - <span class="number">48</span>;</span><br><span class="line">        a[j].i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len2 - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">        b[j].r = s2[i] - <span class="number">48</span>;</span><br><span class="line">        b[j].i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i=0;i&lt;limit;i++)</span></span><br><span class="line">    <span class="comment">// wz[i]=(wz[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(bit-1));</span></span><br><span class="line">    conv(a, b, limit);</span><br><span class="line">    <span class="built_in">memset</span>(re, <span class="number">0</span>, <span class="keyword">sizeof</span>(re));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= limit; i++) &#123;</span><br><span class="line">        re[i] += (<span class="keyword">int</span>)(a[i].r + <span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">if</span> (re[i] &gt;= <span class="number">10</span>)  <span class="comment">//进位</span></span><br><span class="line">        &#123;</span><br><span class="line">            re[i + <span class="number">1</span>] += re[i] / <span class="number">10</span>;</span><br><span class="line">            re[i] %= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == limit) ++limit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!re[limit] &amp;&amp; limit &gt;= <span class="number">1</span>)  <span class="comment">//去除高位的0</span></span><br><span class="line">        limit--;</span><br><span class="line">    <span class="keyword">while</span> (limit &gt;= <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, re[limit--]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #12:2016-2017 ACM-ICPC Asia-Bangkok Regional Contest</title>
    <url>/2020/01/06/TeamRound12/</url>
    <content><![CDATA[<p>这一场是在2020-01-06 13:00 CST开始的。</p>
]]></content>
      <categories>
        <category>Team Round（2020）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2020）</tag>
        <tag>Official ICPC Contest</tag>
      </tags>
  </entry>
  <entry>
    <title>Introductory Combinatorics</title>
    <url>/2020/01/05/Introductory%20Combinatorics1/</url>
    <content><![CDATA[<p><kbd>一日总有七八千的杂念 </kbd></p>
<p><kbd>每一秒都很可耻 </kbd></p>
<p><kbd>下一秒亦然</kbd></p>
<h3 id="第一章：什么是组合数学"><a href="#第一章：什么是组合数学" class="headerlink" title="第一章：什么是组合数学"></a>第一章：什么是组合数学</h3><h4 id="碎碎念："><a href="#碎碎念：" class="headerlink" title="碎碎念："></a>碎碎念：</h4><p>组合数学关心的问题就是把某个集合中的对象排列成某种模式，使其满足一些指定的规则。<br>以下是两种反复出现的通用问题:</p>
<ul>
<li>排列的存在性</li>
<li>排列的分类或枚举<br>以下是另外两种常常出现的组合问题:</li>
<li>研究已知的排列</li>
<li>构造最优排列<h4 id="棋盘的完美覆盖"><a href="#棋盘的完美覆盖" class="headerlink" title="棋盘的完美覆盖"></a>棋盘的完美覆盖</h4></li>
</ul>
<ol>
<li>对于8 $\times$ 8的标准棋盘，通常把方格交替着染上黑色和白色。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;31<kbd>B</kbd><kbd>W</kbd>$ \neq$32 <kbd> B</kbd>+30<kbd>W</kbd><br><a href="https://codeforces.com/contest/1269/problem/D" target="_blank" rel="noopener">color diagram into two colors as a chessboard</a></li>
<li>m $\times$ n 的标准棋盘完美覆盖b格牌(连续b个1$\times1的方格并排连接而成$)的条件是：<br><strong>当且仅当b是m或者n的一个因子。</strong></li>
<li>轮廓线dp：<br>用2格牌覆盖n$\times$m的棋盘，有多少种方案。<br><a href="https://vjudge.net/problem/UVA-11270" target="_blank" rel="noopener">UVA11270经典轮廓线dp,可配合刘汝佳蓝书</a> </li>
<li>断层线：<br>4$\times$4的棋盘的多米诺骨牌的完美覆盖不可能不产生断层线。</li>
</ol>
<h4 id="幻方"><a href="#幻方" class="headerlink" title="幻方"></a>幻方</h4><p>1.定义:<br>一个n阶幻方就是由整数$1, 2, 3, ……,n^2$按照某种方式构成的$n\times n$的矩阵:他的每一行每一列以及对角线上的数字总和总是相等。都等于某个整数S。S称为这个幻方的<kbd>幻和</kbd>。</p>
<script type="math/tex; mode=display">
  \begin{bmatrix}
  8 & 1 & 6 \\
  3 & 5 & 7 \\
  4 & 9 & 2 \\
  \end{bmatrix}</script><script type="math/tex; mode=display">
  \begin{bmatrix}
  16 & 3 & 2  & 13 \\
  5 & 10 & 11 & 8 \\
  9 & 6 & 7 & 14 \\
  4 & 15 & 14 & 1\\
  \end{bmatrix}</script><p>以上是幻和为15的三阶幻方和幻和为34的四阶幻方。<br>2.幻和:<br>由定义，我们可以得到关系式$nS=\frac{n^2(n^2+1)}{2}\rightarrow S =\frac{n(n^2+1)}{2}$<br>3.构造幻方的一般方法：<br>①不存在2阶幻方。<br>②对于其他n阶的幻方，我们总能构造出n阶幻方。<a href="https://www.ixueshu.com/document/a5954ad38f6e7f0f.html" target="_blank" rel="noopener">构造方法</a><br>4.对于幻方体（三维）：<br>$S = \frac{n^4+n}{2}$<br>不存在2阶幻方体，3阶幻方体。</p>
<h4 id="四色问题"><a href="#四色问题" class="headerlink" title="四色问题"></a>四色问题</h4><blockquote>
<p>四色问题的内容是“任何一张地图只用四种颜色就能使具有共同边界的国家着上不同的颜色”。</p>
<p>用数学语言表示即“将平面任意地细分为不相重叠的区域，每一个区域总可以用1234这四个数字之一来标记而不会使相邻的两个区域得到相同的数字。”这里所指的相邻区域是指有一整段边界是公共的。如果两个区域只相遇于一点或有限多点就不叫相邻的。因为用相同的颜色给它们着色不会引起混淆。</p>
<h4 id="36军官问题"><a href="#36军官问题" class="headerlink" title="36军官问题"></a>36军官问题</h4><p>欧拉曾提出一个问题：即从不同的6个军团各选6种不同军阶的6名军官共36人，排成一个6行6列的方队，使得各行各列的6名军官恰好来自不同的军团而且军阶各不相同，应如何排这个方队？如果用(1，1)表示来自第一个军团具有第一种军阶的军官，用(1，2)表示来自第一个军团具有第二种军阶的军官，用(6，6)表示来自第六个军团具有第六种军阶的军官，则欧拉的问题就是如何将这36个数对排成方阵，使得每行每列的数无论从第一个数看还是从第二个数看，都恰好是由1、2、3、4、5、6组成。历史上称这个问题为三十六军官问题。</p>
</blockquote>
<p>以下以九名军官分别来自3个不同的军衔和三个不同的军团为例。<br>$<br>  \begin{bmatrix}<br>  1 &amp; 2 &amp; 3 \<br>  3 &amp; 1 &amp; 2 \<br>  2 &amp; 3 &amp; 1 \<br>  \end{bmatrix}<br>$  $<br>  \begin{bmatrix}<br>  1 &amp; 2 &amp; 3 \<br>  2 &amp; 3 &amp; 1 \<br>  3 &amp; 1 &amp; 2 \<br>  \end{bmatrix}<br>$ $\rightarrow$$<br>  \begin{bmatrix}<br>  (1,1) &amp; (2,2) &amp; (3,3) \<br>  (3,2) &amp; (1,3) &amp; (2,1) \<br>  (2,3) &amp; (3,1) &amp; (1,2) \<br>  \end{bmatrix}<br>$<br> <strong>军衔矩阵</strong> &emsp;&emsp;&emsp;<strong>军团矩阵</strong>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>并置矩阵</strong></p>
<p>1.不存在二阶正交拉丁方。不存在六阶正交拉丁方。<br>2.欧拉猜想4k+2不存在（k=2，3，…，n）正交拉丁方是错误的。对于$n\gt6 $ 存在正交拉丁方。<br>3.数独是特殊的九阶拉丁方。</p>
<h4 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h4><p>From ZJU JingBang Chen 2020Wannafly Winter Camp Div1 Graph Theory ppt </p>
<p>由于参加的是Div2所以未能听到他的讲课内容，先挂上图，以后有时间要研究的。<br><img src="https://i.loli.net/2020/01/25/CH6Y3Eqo7QvhtTe.png" alt="Author"></p>
<p><img src="https://i.loli.net/2020/01/25/OQuR5mIw7kSVZa9.png" alt="Basics"></p>
<p><img src="https://i.loli.net/2020/01/25/PAd31fgzteohOwF.png" alt="Difference Constraints System"></p>
<p><img src="https://i.loli.net/2020/01/25/ILo6Y53bJg917uR.png" alt="Dijkstra"></p>
<p><img src="https://i.loli.net/2020/01/25/eqD7v4PmuSZwI8y.png" alt="Shortest Path Graph/Tree"></p>
<p><img src="https://i.loli.net/2020/01/25/G7B9ZwuN5tQmdaD.png" alt="K-Shortest Path"></p>
<h4 id="相互重叠的圆"><a href="#相互重叠的圆" class="headerlink" title="相互重叠的圆"></a>相互重叠的圆</h4><p>考虑平面上以普通位置相互重叠的$n$个圆，他们相互重叠(这里指的是每一对圆之间交于两个不同的点，也就是不允许相交和相切的圆)这$n$个圆在平面内构成的数量是$h(n)$ ，以下求$h(n)$的值。</p>
<blockquote>
<p>解决这一类计数问题的一个方法就是尝试着确定当从$n-1$个圆$\gamma<em>1,\gamma_2,…,\gamma</em>{n-1}$变到n个圆$\gamma<em>1,\gamma_2,…,\gamma</em>{n}$时出现的区域变化。用更一般的语言表述如下：我们尝试着确定$h(n)$的一个递推关系，即用前面的值表示$h(n)$。</p>
<p>我们假设$n \ge 2$而且在平面上已经画出普通位置下相互重叠的圆$\gamma<em>1,\gamma_2,…,\gamma</em>{n-1}$，它们构建了$h<em>{n-1}$个区域。然后加入第$n$个圆$\gamma_n$使得在普通位置下有n个相互重叠的圆。前$n-1$个圆中的每一个圆都与第n个圆相交出两个点，因为这些圆都处于普通位置上，所以我们得到$2(n-1)$个不同点$P_1，P_2,…，P</em>{2(n-1)}$。这$2(n-1)$个点把圆$\gamma<em>n$分割成$2(n-1)$条弧：$P_1和P_2$之间的弧，$P_2$和$P_3$之间的弧,…，$P</em>{2(n-1)-1}和P<em>{2(n-1)}$之间的弧，以及$P</em>{2(n-1)}与P<em>1$之间的弧。这2(n-1)条弧中的每一条弧都把由前面$n-1$个圆$\gamma_1,\gamma_2,…,\gamma</em>{n-1}$构成的区域分成两个区域，创建出额外$2(n-1)$个区域。因此，$h(n)$满足下面的关系：<br>$h(n) = h(n-1) + 2(n-1)\quad\quad   (n\ge2)$<br>利用递推关系和$\sum i$的求和公式可以得到 $h(n) = n^2-n+2 \quad (n\ge2)$</p>
</blockquote>
<h4 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h4><p>if &emsp;SG = 0 先手必败<br>else &emsp; 先手必胜<br>Attention：是公平组合游戏，有些游戏是不公平的。</p>
<h3 id="第二章-排列与组合"><a href="#第二章-排列与组合" class="headerlink" title="第二章 排列与组合"></a>第二章 排列与组合</h3><h4 id="四个基本的计数定理"><a href="#四个基本的计数定理" class="headerlink" title="四个基本的计数定理"></a>四个基本的计数定理</h4><ol>
<li>加法原理：<br>运用加法原理的技巧是把集合S划分成少量容易处理的部分。</li>
<li>乘法原理：<br>乘法原理是加法原理的一个推论。<br>eg.正因素个数的确定：<br><img src="https://i.loli.net/2020/01/25/eypmIJaTiX4htDf.png" alt="正整数因子的个数计算"></li>
<li><p>减法原理：</p>
</li>
<li><p>除法原理：</p>
</li>
</ol>
<h4 id="集合的排列"><a href="#集合的排列" class="headerlink" title="集合的排列"></a>集合的排列</h4><h4 id="集合的组合（子集）"><a href="#集合的组合（子集）" class="headerlink" title="集合的组合（子集）"></a>集合的组合（子集）</h4><h4 id="多重集合的排列"><a href="#多重集合的排列" class="headerlink" title="多重集合的排列"></a>多重集合的排列</h4><h4 id="多重集合的组合"><a href="#多重集合的组合" class="headerlink" title="多重集合的组合"></a>多重集合的组合</h4><h4 id="有限概率"><a href="#有限概率" class="headerlink" title="有限概率"></a>有限概率</h4><h3 id="第三章-鸽巢原理"><a href="#第三章-鸽巢原理" class="headerlink" title="第三章 鸽巢原理"></a>第三章 鸽巢原理</h3><h4 id="鸽巢原理：简单形式"><a href="#鸽巢原理：简单形式" class="headerlink" title="鸽巢原理：简单形式"></a>鸽巢原理：简单形式</h4><h4 id="鸽巢原理：加强版"><a href="#鸽巢原理：加强版" class="headerlink" title="鸽巢原理：加强版"></a>鸽巢原理：加强版</h4><h4 id="Ramsey定理"><a href="#Ramsey定理" class="headerlink" title="Ramsey定理"></a>Ramsey定理</h4><ol>
<li>Ramsey定理的最流行且容易理解的例子是:<br>在6个（甚至更多的）人中，或者有三个人，他们每两个人都相互认识，或者有三个人，他们每两个人都相互不认识。</li>
<li>定理内容：<br>如果$m \ge 2 \quad\&amp;\&amp;\quad n \ge 2$是两个整数，则存在正整数p，使得<script type="math/tex; mode=display">K_p \rightarrow K_m,K_n</script>语言描述：Ramsey定理说的是给定 m 和 n，存在正整数p，使得当把$K_p$的边着成红色或者蓝色时，或者存在一个红色$K_m$，或者存在一个蓝色$K_n$。无论$K_p$如何染色，都保证红色$K_m$或者蓝色$K_n$的存在性。如果$K_p\rightarrow K_m,K_n$，那么对于任何满足$q\ge p$的整数q，$K_q\rightarrow K_m,K_n$都成立。用$r(m,n)$表示使得$K_p\rightarrow K_m,K_n$，成立的最小整数p。<br>证明略。</li>
<li>Ramsey(拉姆塞)定理只给出了Ramsey数的存在性问题，并没有给出求解Ramsey数的有效方法。确定Ramsey数是一个NP难题。</li>
<li>$r(m,n) = r(n,m)  \quad r(2,n) = n$</li>
<li>以下是目前已知的二色经典的非平凡的Ramsey数$r(m,n)$<br>ps:表中两个取等$40\le r(3,10) \le 43$表示$K<em>{43} \rightarrow K_3,K</em>{10} $ 而 $K<em>{39} \nrightarrow K_3,K</em>{10} $<script type="math/tex; mode=display">
\begin{array}{|l|l|l|l|l|l|l|l|l|l}
\hline
\quad m & \text{3}  & \text{4} & \text{5} & \text{6}& \text{7}& \text{8}& \text{9}& \text{10} \\
n\\
\hline
3 & 6 & 9 & 14 & 18 & 23 & 28 & 36 & 40\\
&&&&&&&&43 \\
\hline
4&&18&25&35&49&56&73&92\\
&&&&41&61&84&115&149\\
\hline
5&&&43&58&80&101&125&143\\
&&&49&87&143&216&316&442\\
\hline
6&&&&102&113&127&169&179\\
&&&&165&198&495&780&1171\\
\hline
\end{array}</script></li>
<li>Ramsey定理可以扩展到任意多种颜色的情况，已知$r(3,3,3) = 17$。</li>
<li>Ramsey还有更一般的形式。。。此处等待填坑。<br>$r_1(q_1,q_2 ……q_k) = q_1+q_2+……+q_k-k+1$ &emsp;此处说明Ramsey是鸽巢原理的加强版的扩展。<br>求一般的$r_t(q_1,q_2 ……q_k) $就很难求，目前已知很少。<h3 id="第四章：生成组合和排列"><a href="#第四章：生成组合和排列" class="headerlink" title="第四章：生成组合和排列"></a>第四章：生成组合和排列</h3></li>
</ol>
<blockquote>
<p>我们的宇宙，在某种意义上是上帝所创造的最好的一个。<br>      &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp;——戈特弗里德·威廉·莱布尼茨</p>
</blockquote>
<h4 id="生成排列"><a href="#生成排列" class="headerlink" title="生成排列"></a>生成排列</h4><h4 id="排列中的逆序"><a href="#排列中的逆序" class="headerlink" title="排列中的逆序"></a>排列中的逆序</h4><h4 id="生成组合"><a href="#生成组合" class="headerlink" title="生成组合"></a>生成组合</h4><h4 id="生成r子集"><a href="#生成r子集" class="headerlink" title="生成r子集"></a>生成r子集</h4><h4 id="偏序和等价关系"><a href="#偏序和等价关系" class="headerlink" title="偏序和等价关系"></a>偏序和等价关系</h4><h3 id="第五章：二项式系数"><a href="#第五章：二项式系数" class="headerlink" title="第五章：二项式系数"></a>第五章：二项式系数</h3><h4 id="帕斯卡三角形"><a href="#帕斯卡三角形" class="headerlink" title="帕斯卡三角形"></a>帕斯卡三角形</h4><h4 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h4><h4 id="二项式系数的单峰性"><a href="#二项式系数的单峰性" class="headerlink" title="二项式系数的单峰性"></a>二项式系数的单峰性</h4><h4 id="多项式定理"><a href="#多项式定理" class="headerlink" title="多项式定理"></a>多项式定理</h4><h4 id="牛顿二项式定理"><a href="#牛顿二项式定理" class="headerlink" title="牛顿二项式定理"></a>牛顿二项式定理</h4><h4 id="再论偏序集"><a href="#再论偏序集" class="headerlink" title="再论偏序集"></a>再论偏序集</h4><h3 id="容斥原理及应用"><a href="#容斥原理及应用" class="headerlink" title="容斥原理及应用"></a>容斥原理及应用</h3><h4 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h4><h4 id="带重复的组合"><a href="#带重复的组合" class="headerlink" title="带重复的组合"></a>带重复的组合</h4><h4 id="错位排列"><a href="#错位排列" class="headerlink" title="错位排列"></a>错位排列</h4><h4 id="带有禁止位置的排列"><a href="#带有禁止位置的排列" class="headerlink" title="带有禁止位置的排列"></a>带有禁止位置的排列</h4><h4 id="另一个带有禁止位置的问题"><a href="#另一个带有禁止位置的问题" class="headerlink" title="另一个带有禁止位置的问题"></a>另一个带有禁止位置的问题</h4><h4 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h4><h3 id="第七章-递推关系和生成函数"><a href="#第七章-递推关系和生成函数" class="headerlink" title="第七章 递推关系和生成函数"></a>第七章 递推关系和生成函数</h3><h4 id="若干数列"><a href="#若干数列" class="headerlink" title="若干数列"></a>若干数列</h4><h4 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h4><h4 id="指数生成函数"><a href="#指数生成函数" class="headerlink" title="指数生成函数"></a>指数生成函数</h4><h4 id="求解线性齐次递推关系"><a href="#求解线性齐次递推关系" class="headerlink" title="求解线性齐次递推关系"></a>求解线性齐次递推关系</h4><h4 id="非齐次递推关系"><a href="#非齐次递推关系" class="headerlink" title="非齐次递推关系"></a>非齐次递推关系</h4><h4 id="一个几何例子"><a href="#一个几何例子" class="headerlink" title="一个几何例子"></a>一个几何例子</h4><h3 id="第八章-特殊计数序列"><a href="#第八章-特殊计数序列" class="headerlink" title="第八章 特殊计数序列"></a>第八章 特殊计数序列</h3><h4 id="Catalan数"><a href="#Catalan数" class="headerlink" title="Catalan数"></a>Catalan数</h4><h4 id="差分序列和Stirling数"><a href="#差分序列和Stirling数" class="headerlink" title="差分序列和Stirling数"></a>差分序列和Stirling数</h4><h4 id="分拆数"><a href="#分拆数" class="headerlink" title="分拆数"></a>分拆数</h4><h4 id="一个几何问题"><a href="#一个几何问题" class="headerlink" title="一个几何问题"></a>一个几何问题</h4><h4 id="格路径和Schroder数"><a href="#格路径和Schroder数" class="headerlink" title="格路径和Schroder数"></a>格路径和Schroder数</h4><h3 id="第九章-相异代表系"><a href="#第九章-相异代表系" class="headerlink" title="第九章 相异代表系"></a>第九章 相异代表系</h3><h4 id="问题表述"><a href="#问题表述" class="headerlink" title="问题表述"></a>问题表述</h4><h4 id="SDR的存在性"><a href="#SDR的存在性" class="headerlink" title="SDR的存在性"></a>SDR的存在性</h4><h4 id="区组设计"><a href="#区组设计" class="headerlink" title="区组设计"></a>区组设计</h4><h4 id="Steiner三元系"><a href="#Steiner三元系" class="headerlink" title="Steiner三元系"></a>Steiner三元系</h4><h4 id="拉丁方"><a href="#拉丁方" class="headerlink" title="拉丁方"></a>拉丁方</h4><h3 id="第十一章-图论导引"><a href="#第十一章-图论导引" class="headerlink" title="第十一章 图论导引"></a>第十一章 图论导引</h3><h4 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h4><h4 id="欧拉迹"><a href="#欧拉迹" class="headerlink" title="欧拉迹"></a>欧拉迹</h4><h4 id="哈密顿路径和哈密顿圈"><a href="#哈密顿路径和哈密顿圈" class="headerlink" title="哈密顿路径和哈密顿圈"></a>哈密顿路径和哈密顿圈</h4><h4 id="二分多重图"><a href="#二分多重图" class="headerlink" title="二分多重图"></a>二分多重图</h4><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><h4 id="Shannon开关游戏"><a href="#Shannon开关游戏" class="headerlink" title="Shannon开关游戏"></a>Shannon开关游戏</h4><h4 id="再论树"><a href="#再论树" class="headerlink" title="再论树"></a>再论树</h4><h3 id="第十二章-再论图论"><a href="#第十二章-再论图论" class="headerlink" title="第十二章 再论图论"></a>第十二章 再论图论</h3><h4 id="色数"><a href="#色数" class="headerlink" title="色数"></a>色数</h4><h4 id="平面和平面图"><a href="#平面和平面图" class="headerlink" title="平面和平面图"></a>平面和平面图</h4><h4 id="无色定理"><a href="#无色定理" class="headerlink" title="无色定理"></a>无色定理</h4><h4 id="独立数和团数"><a href="#独立数和团数" class="headerlink" title="独立数和团数"></a>独立数和团数</h4><h4 id="匹配数"><a href="#匹配数" class="headerlink" title="匹配数"></a>匹配数</h4><h4 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h4><h3 id="有向图和网络"><a href="#有向图和网络" class="headerlink" title="有向图和网络"></a>有向图和网络</h3><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><h4 id="回顾二分图匹配"><a href="#回顾二分图匹配" class="headerlink" title="回顾二分图匹配"></a>回顾二分图匹配</h4><h3 id="Polya计数"><a href="#Polya计数" class="headerlink" title="Polya计数"></a>Polya计数</h3><h4 id="置换群和对称群"><a href="#置换群和对称群" class="headerlink" title="置换群和对称群"></a>置换群和对称群</h4><h4 id="Burnside定理"><a href="#Burnside定理" class="headerlink" title="Burnside定理"></a>Burnside定理</h4><h4 id="Polya计数公式"><a href="#Polya计数公式" class="headerlink" title="Polya计数公式"></a>Polya计数公式</h4>]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #11: 第十六届浙江大学宁波理工学院程序设计大赛重现赛</title>
    <url>/2019/12/07/TeamRound11/</url>
    <content><![CDATA[<p>这一场是在2019-12-07 13:00:00 至 2019-12-07 17:00:00打的。</p>
<p>宁波理工的题 个人觉得还是很好的。总能学到一些东西！而不是都是模拟题搞人心态让人自闭。</p>
<p>队伍第一次实施分题目补题，在语雀上进行共同编辑。这样方便大家学习。<br>事实上，语雀的md用不太习惯，或许是我一直以来用VSC写md的原因，没用typora。。直接搬过来还是有点格式上的问题。不过也由于懒只是稍微fix一下…</p>
<p>• <a href="https://ac.nowcoder.com/acm/contest/2995" target="_blank" rel="noopener">传送门</a><br>• <a href="https://ac.nowcoder.com/discuss/352625?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">题解链接</a></p>
<h3 id="E-雷顿女士与平衡树"><a href="#E-雷顿女士与平衡树" class="headerlink" title="E. 雷顿女士与平衡树"></a>E. 雷顿女士与平衡树</h3><blockquote>
<p>首先题目显然可以将最大值和最小值分为两部分分别计算。<br>求最大值的方法：从小到大将每个点与相连的点用并查集合并，同时维护每个联通块的size，此时显然可以计算此点作为最大值的路径条数。</p>
</blockquote>
<p>• 分成最大值和与最小值和分别进行求解, 然后相减得到答案</p>
<p><strong>求最大值方法</strong></p>
<ol>
<li>首先node中储存边的两个点编号x, y, 两点权值的最大值v </li>
<li>读入所有边, 储存在 maxNode</li>
<li>按 v 从小到大遍历 maxNode , 保证当前为最大值, 以下为循环中内容:<br>a. 分为左右两个连通块, 联通块的size用 并查集 维护<br>• 两连通块的size设为 a 和 b<br>b. 以当前 node.v 为最大值的所有路径的数量为<br>• a <em> b<br>c. 最大值的和为<br>• (a </em> b) * v<br>d. 合并两个连通块<br>e. 不断进行累加即可得到所需要的最大值</li>
<li>最小值同理<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll nmax = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll x, y, v;</span><br><span class="line">&#125;maxNode[nmax], minNode[nmax];</span><br><span class="line">ll n, e;</span><br><span class="line">ll a[nmax];</span><br><span class="line"><span class="keyword">int</span> fa[nmax];</span><br><span class="line"><span class="keyword">int</span> cnt[nmax];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">        cnt[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x] ? x : fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    fa[x] = y;</span><br><span class="line">    cnt[y] += cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        e = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            x--;</span><br><span class="line">            y--;</span><br><span class="line">            maxNode[i] = node&#123;x, y, max(a[x], a[y])&#125;;</span><br><span class="line">            minNode[i] = node&#123;x, y, min(a[x], a[y])&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(maxNode, maxNode + e, [](node&amp; a, node&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.v &lt; b.v;</span><br><span class="line">        &#125;);</span><br><span class="line">        sort(minNode, minNode + e, [](node&amp; a, node&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.v &gt; b.v;</span><br><span class="line">        &#125;);</span><br><span class="line">        init();</span><br><span class="line">        ll maxsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> curx = find(maxNode[i].x);</span><br><span class="line">            <span class="keyword">int</span> cury = find(maxNode[i].y);</span><br><span class="line">            maxsum = (maxNode[i].v * cnt[curx] % mod * cnt[cury] % mod + maxsum) % mod;</span><br><span class="line">            uni(curx, cury);</span><br><span class="line">        &#125;</span><br><span class="line">        init();</span><br><span class="line">        ll minsum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> curx = find(minNode[i].x);</span><br><span class="line">            <span class="keyword">int</span> cury = find(minNode[i].y);</span><br><span class="line">            minsum = (minNode[i].v * cnt[curx] % mod * cnt[cury] % mod + minsum) % mod;</span><br><span class="line">            uni(curx, cury);</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = (maxsum - minsum + mod) % mod;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="G-雷顿女士与多米诺骨牌"><a href="#G-雷顿女士与多米诺骨牌" class="headerlink" title="G. 雷顿女士与多米诺骨牌"></a>G. 雷顿女士与多米诺骨牌</h3><p>题解方法有点迷，分成两个图后上我的想法是两层图后都将所有点都拆开，并且按照题解的意思，对于（i+j)&amp;1的点第一层点后第二层当前点对应的点的入点相连，而同一层，遍历四个方向，若不是<em>则该点出点连接那个点的入点，而对于!((i+j)&amp;1)的点，对于第二层的点按照之前同样的操作与第一层对应的点的入点和自身周围的点相连，随后建立超级源点S和每一个第一层(i+j)&amp;1和第二层!((i+j)&amp;1)的入点相连，并且建立超级汇点T让所有每层没有与超级源点相连的点的出点连接T，对于#的点不建立竖直方向的边，对于</em>的点只建立竖直方向的边，随后费用流，得到的结果应该与题解意思一样是两倍的答案，但。。。spfa给卡死循环了（可能写出了负环。。。），至此不知道哪出问题了。<br>随后学习全场唯一一个过的代码，首先建图，由于是要跑最大费用流，因此将所有点的权值取反是肯定的，其次对于#的点是必须要覆盖的点，所以可以将它的权值减去inf，他的优先级在跑spfa时是可以体现出来的，是一定可以松弛从S到T路径的（除非这条路不连通），若这条路不连通，或者是由于流量的限制导致无法完全将所有#都覆盖，这时给必过点权值减inf又带来了第二个好处-&gt;所跑出的minMaxflowCost的结果加上cnt（必过点个数）<em>inf是大于1000</em>n*m的（一个inf足够大）。</p>
<p>但这远远不能解这个题，因为这个题并不需要跑出maxflow，仅仅需要求得覆盖的最大权重和，因此在题解中给出了建立双层的图，因为通过双层图可以保证一定跑出maxflow（最差所有点连接与自身相对应的点），所以产生了取消费用流流量优先的性质，而这个代码中第二重要的关键部分就是这个dist[t]&gt;=0即返回不可松弛，因为在spfa中判断时是第一满足当前边不满流，第二满足路径可以松弛，可以设想一种情况就是流是没有满，但是由于在spfa初始化的时候默认所有的dist都是inf，因此可以用很多正边去松弛他，但若此时再去跑minMaxflowCost则会导致流量可以变大，但是结果反而变小了，因此在此之前就必须退出得到结果。当然这不用去担心必经点没法跑完，因为在必经点拆点时将其设成-inf，一定满足可以松弛，并且保证松弛后dist<0。所以在流充足的前提下，必经点是一定可以跑完的（除非由于第一个限制因素（流cap不足）就卡掉）。 拆点方式可以学一手（二维数组直接记录）。 （网络流板子from kuangbin） <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">rbtree</span>:</span> tree&lt;T,null_type,less&lt;T&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;&#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, cap, flow, cost;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tol;</span><br><span class="line"><span class="keyword">int</span> pre[maxn], dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tol = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">    e[tol].to = v;</span><br><span class="line">    e[tol].cap = cap;</span><br><span class="line">    e[tol].cost = cost;</span><br><span class="line">    e[tol].flow = <span class="number">0</span>;</span><br><span class="line">    e[tol].next = head[u];</span><br><span class="line">    head[u] = tol++;</span><br><span class="line">    e[tol].to = u;</span><br><span class="line">    e[tol].cap = <span class="number">0</span>;</span><br><span class="line">    e[tol].cost = -cost;</span><br><span class="line">    e[tol].flow = <span class="number">0</span>;</span><br><span class="line">    e[tol].next = head[v];</span><br><span class="line">    head[v] = tol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">            <span class="keyword">if</span>(e[i].cap &gt; e[i].flow &amp;&amp; dis[v]&gt;dis[u]+e[i].cost)&#123;</span><br><span class="line">                dis[v] = dis[u] + e[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dis[t]&gt;=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//1！！！</span></span><br><span class="line">    <span class="keyword">return</span> pre[t] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minCostMaxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;cost)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(spfa(s, t))&#123;</span><br><span class="line">        <span class="keyword">int</span> Min = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[t]; i != <span class="number">-1</span>; i = pre[e[i^<span class="number">1</span>].to])&#123;</span><br><span class="line">            <span class="keyword">if</span>(Min &gt; e[i].cap - e[i].flow)</span><br><span class="line">                Min = e[i].cap - e[i].flow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[t]; i != <span class="number">-1</span>; i = pre[e[i^<span class="number">1</span>].to])&#123;</span><br><span class="line">            e[i].flow += Min;</span><br><span class="line">            e[i^<span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += e[i].cost*Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> now[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="comment">//IN;</span></span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> S = cnt++, T = cnt++;</span><br><span class="line">        <span class="keyword">int</span> n, m; <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;now[i][j] = cnt++, fa[i][j] = cnt++;&#125;</span><br><span class="line">        init(cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) <span class="built_in">cin</span>&gt;&gt;b[i][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == <span class="string">'*'</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == <span class="string">'#'</span>)&#123;</span><br><span class="line">                    c++;</span><br><span class="line">                    addedge(now[i][j], fa[i][j], <span class="number">1</span>, -b[i][j]-inf);<span class="comment">//2！！！</span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i][j] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    addedge(now[i][j], fa[i][j], <span class="number">1</span>, -b[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((i+j)&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                    addedge(S, now[i][j], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">4</span>; z++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> xx = dx[z]+i, yy = dy[z]+j;</span><br><span class="line">                        <span class="keyword">if</span>(xx &gt;= <span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; a[xx][yy]!=<span class="string">'*'</span>)&#123;</span><br><span class="line">                            addedge(fa[i][j], now[xx][yy], <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> addedge(fa[i][j], T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        minCostMaxflow(S, T, ans);</span><br><span class="line">        ans += c*inf;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(ans) &gt;= n*m*<span class="number">10000</span>)&#123;<span class="comment">//3！！！</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"no solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;-ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></0。所以在流充足的前提下，必经点是一定可以跑完的（除非由于第一个限制因素（流cap不足）就卡掉）。></p>
<h3 id="F-Lady-Layton-with-Math"><a href="#F-Lady-Layton-with-Math" class="headerlink" title="F. Lady Layton with Math"></a>F. Lady Layton with Math</h3><p><img src="https://i.loli.net/2020/02/04/WZObv62gCpBm1Hd.png" alt="反演过程"><br>第一个等号的地方不知道，剩下都是套路的操作，可以学的是在maxn~1e9范围内mu，phi的求法。<br>反演式子是很重要很重要的操作，这方面能力还远远不够，寒假时候要尽量做一些题，这些东西真的是知道就知道，不知道的话就是死活也不会了。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment"># @Author:      miniLCT</span></span><br><span class="line"><span class="comment"># @DateTime:    2019-12-09 08:35:54</span></span><br><span class="line"><span class="comment"># @Description: You build it. You run it </span></span><br><span class="line"><span class="comment"># @More: Once lots of AC, try Brute-force,dynamic programming </span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn], mu[maxn], phi[maxn], v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[i])&#123;  <span class="comment">//质数</span></span><br><span class="line">            prime[cnt++] = i;</span><br><span class="line">            phi[i] = i<span class="number">-1</span>;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k = i * prime[j];</span><br><span class="line">            <span class="keyword">if</span>(k &gt;= maxn)<span class="keyword">break</span>;</span><br><span class="line">            v[k] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                phi[k] = phi[i] * prime[j]; <span class="comment">// Euler函数性质</span></span><br><span class="line">                mu[k] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                phi[k] = phi[i] * (prime[j] - <span class="number">1</span>);</span><br><span class="line">                mu[k] = -mu[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;  <span class="comment">//在1~maxn这个就是前缀和了</span></span><br><span class="line">        phi[i] = phi[i<span class="number">-1</span>] + phi[i];</span><br><span class="line">        mu[i] = mu[i<span class="number">-1</span>] + mu[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> , <span class="keyword">int</span> &gt;musum;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span> , <span class="keyword">int</span> &gt;phisum;</span><br><span class="line"><span class="comment">/*int get_mu(int x)&#123;</span></span><br><span class="line"><span class="comment">    if(x &lt; maxn) return mu[x];</span></span><br><span class="line"><span class="comment">    if(musum[x])return musum[x];</span></span><br><span class="line"><span class="comment">    int ans = 1;</span></span><br><span class="line"><span class="comment">    for(int l = 2, r; l &lt;= x;l = r+1)&#123;</span></span><br><span class="line"><span class="comment">        r = x/(x/l);</span></span><br><span class="line"><span class="comment">        ans -= 1ll*(r-l+1)*get_mu(x/l);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return musum[x] = ans;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_phi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; maxn) <span class="keyword">return</span> phi[x] % mod;</span><br><span class="line">    <span class="keyword">if</span>(phisum[x]) <span class="keyword">return</span> phisum[x] % mod;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(x &amp; <span class="number">1</span>)&#123;</span><br><span class="line">        ans = (x+<span class="number">1</span>) / <span class="number">2</span> % mod * x % mod;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ans = x/<span class="number">2</span>%mod*(x+<span class="number">1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">2</span>,r;l &lt;= x;l = r + <span class="number">1</span>)&#123;</span><br><span class="line">        r = x/(x/l);</span><br><span class="line">        ans = (ans - (r-l+<span class="number">1</span>) % mod*get_phi(x/l) % mod);</span><br><span class="line">        ans = (ans + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> phisum[x] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    sieve();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n ;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r ; l &lt;= n; l = r+<span class="number">1</span>)&#123;</span><br><span class="line">            r = n/(n/l);</span><br><span class="line">            ans += (get_phi(r)-get_phi(l<span class="number">-1</span>)+mod)%mod*(get_phi(n/l)*<span class="number">2</span><span class="number">-1</span>+mod)%mod;</span><br><span class="line">            ans = (ans + mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************************************************************</span></span><br><span class="line"><span class="comment"> *stuff you should look for</span></span><br><span class="line"><span class="comment"> *int overflow, array bounds</span></span><br><span class="line"><span class="comment"> *special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment"> *do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">***************************************************************************/</span></span><br></pre></td></tr></table></figure></p>
<h3 id="D-雷顿女士与分队（hard-version）"><a href="#D-雷顿女士与分队（hard-version）" class="headerlink" title="D.雷顿女士与分队（hard version）"></a>D.雷顿女士与分队（hard version）</h3><p>挂下这个DP。。。<br>还是挺常见的转移<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, k; <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i] = <span class="number">0</span>, <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k<span class="number">-1</span>; i++) dp[i] = inf;</span><br><span class="line">        sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%k==<span class="number">0</span>) dp[i] = dp[i-k]+a[i]-a[i-k+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; k) dp[i] = min(dp[i<span class="number">-1</span>]+a[i]-a[i<span class="number">-1</span>], dp[i-k]+a[i]-a[i-k+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dp[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
        <tag>School Championship</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #10: 2019 Multi-University Training Contest 5</title>
    <url>/2019/11/30/TeamRound10/</url>
    <content><![CDATA[<p>Begin: 2019-11-30 13:45 CST</p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
        <tag>GYM Training</tag>
        <tag>hdu</tag>
        <tag>Team Round（2019）</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #9:2019 Multi-University Training Contest 10</title>
    <url>/2019/11/25/TeamRound9/</url>
    <content><![CDATA[<p>这一场是在 2019-11-24 13:30 CST 开始的。</p>
<p>Team Round第一次选到多校，解了IEC三道题，三道题rank跨越在147—-406。我们解题较慢+罚时多。总的来说是挺符合队伍现状的，这样做一次尝试可能是一种好事。</p>
<p>有几个点这次特别有感触</p>
<ul>
<li><p>我又双叒叕像以前一样在卡题时候给队友读算法名字，这真的真的真的是一种很糟糕的习惯，谢谢队友不杀之恩，我在今后练习中一定要注意这个点。</p>
</li>
<li><p>在卡题我瞎bb算法名称时候dqy说了这些：你说这个算法，你要怎么处理。你说线段树，你可以跟我说怎么维护，怎么处理，什么时候query，不要老是突然蹦出来算法名字，你要落实到代码上，你不会写，我帮你写，可你要告诉我你的想法，怎么一步步处理。看到题目，理解题目，转化题意，建立模型，落实代码。 </p>
</li>
<li><p>在卡题我瞎bb算法名称时候wqr翻白眼。。。</p>
</li>
<li><p>还有一个点被一些我自己认为这个题目的性质所迷惑，，，，，这个就很糟糕，，，，难顶</p>
</li>
</ul>
<h3 id="I-Block-Breaker"><a href="#I-Block-Breaker" class="headerlink" title="I - Block Breaker"></a>I - Block Breaker</h3><h4 id="按题意模拟，dfs"><a href="#按题意模拟，dfs" class="headerlink" title="按题意模拟，dfs"></a>按题意模拟，dfs</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   _ _ _                     </span></span><br><span class="line"><span class="comment">    | | | | ___  ___           </span></span><br><span class="line"><span class="comment">    | | | || . ||  _|          </span></span><br><span class="line"><span class="comment">    |_____||_  ||_|  _____     </span></span><br><span class="line"><span class="comment">             |_|    |_____|  */</span></span><br><span class="line"><span class="comment">// Time : 19/11/24</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nmax = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> mapp[nmax][nmax];</span><br><span class="line"><span class="keyword">int</span> mx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> my[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifbi</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; <span class="number">0</span> || x == n || y &lt; <span class="number">0</span> || y == m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ifman</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ifbi(x, y)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> mapp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">silp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sx = <span class="number">0</span>, zy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) <span class="keyword">if</span>(ifman(x + mx[i], y + my[i])) sx++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">4</span>; i++) <span class="keyword">if</span>(ifman(x + mx[i], y + my[i])) zy++;</span><br><span class="line">    <span class="keyword">if</span>(sx != <span class="number">2</span> &amp;&amp; zy != <span class="number">2</span>)&#123;</span><br><span class="line">        mapp[x][y] = <span class="number">0</span>;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + mx[i];</span><br><span class="line">            <span class="keyword">int</span> ny = y + my[i];</span><br><span class="line">            <span class="keyword">if</span>(ifbi(nx, ny)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(mapp[nx][ny]) ans += silp(nx, ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ope</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(mapp[x][y])&#123;</span><br><span class="line">        mapp[x][y] = <span class="number">0</span>;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + mx[i];</span><br><span class="line">            <span class="keyword">int</span> ny = y + my[i];</span><br><span class="line">            <span class="keyword">if</span>(ifbi(nx, ny)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(mapp[nx][ny]) ans += silp(nx, ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wqr_</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">                mapp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ope(x - <span class="number">1</span>, y - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-Welcome-Party"><a href="#E-Welcome-Party" class="headerlink" title="E - Welcome Party"></a>E - Welcome Party</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h4><p>每个人有两个属性 ai 和 bi ，将人分为两类，使得 |$\max(a_i)$−$\max(b_i)$| 最小。</p>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p>dqy写的，他可能是这样处理的：&ensp;  对 ai 排序，枚举每一个 ai 作为 a 属性上限的时候的情况，显然比当前 ai 大的一定是 b ，然后可以选择在比他小的或者相等（不能是自己）中挑一个和 ai 最接近的且能称为最大值的。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">pll a[N];</span><br><span class="line"><span class="built_in">set</span>&lt;ll&gt; s1;</span><br><span class="line"><span class="built_in">set</span>&lt;pll&gt; S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        S.clear();</span><br><span class="line">        s1.clear();</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i].fi&gt;&gt;a[i].se;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n, greater&lt;pll&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            S.insert(&#123;a[i].se, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n)&#123;</span><br><span class="line">                ans = min(ans, <span class="built_in">abs</span>(a[i].fi - *s1.rbegin()));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> p;</span><br><span class="line">            <span class="keyword">if</span>(s1.empty()) p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p = *s1.rbegin();</span><br><span class="line">                ans = min(ans, <span class="built_in">abs</span>(p-a[i].fi));</span><br><span class="line">            &#125;</span><br><span class="line">            S.erase(&#123;a[i].se, i&#125;);</span><br><span class="line">            <span class="keyword">auto</span> it = S.lower_bound(make_pair(a[i].fi, <span class="number">0</span>));</span><br><span class="line">            <span class="keyword">if</span>(it != S.end()) &#123;</span><br><span class="line">                ll a1 = (*it).fi;</span><br><span class="line">                <span class="keyword">if</span>(a1 &gt;= p) ans = min(ans, <span class="built_in">abs</span>(a1 - a[i].fi));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(it != S.begin())&#123;</span><br><span class="line">                ll a2 = (*--it).fi;</span><br><span class="line">                <span class="keyword">if</span>(a2 &gt;= p) ans = min(ans, <span class="built_in">abs</span>(a[i].fi-a2));</span><br><span class="line">            &#125;</span><br><span class="line">            s1.insert(a[i].se);</span><br><span class="line">            S.insert(&#123;a[i].se, i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="C-Valentine’s-Day"><a href="#C-Valentine’s-Day" class="headerlink" title="C - Valentine’s Day"></a>C - Valentine’s Day</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>有 n 个礼物，每个礼物有 Pi 的概率让女友开心，要选出一些礼物，最大化让女友开心恰好一次的概率，求这个概率。</p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>拆一下$\prod$,遍历一次，取max，也有人说这有一个性质。（做的时候一直以为和0.5有关系，一直跳不出自己假想的性质，其实是不对的。）<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-11-24 14:08:11</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> # @More: If lots of AC,try BF,dfs,DP</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="comment">/*void dabiao(double a, double b)&#123;</span></span><br><span class="line"><span class="comment">    double ans = a+b-a*b*2;</span></span><br><span class="line"><span class="comment">    printf("a ======= %.9f  b ======== %.9f   a+b-2*a*b ===== %.9f \n",a, b , ans );</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">double</span> p[maxn],zcj[maxn], zb[maxn];</span><br><span class="line"><span class="comment">//zcj 都是不开心的  zb 那一次开心的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*freopen("out.txt","w",stdout);</span></span><br><span class="line"><span class="comment">    double x = 0.0, y = 0.0;</span></span><br><span class="line"><span class="comment">    for(int i = 0; i &lt;= 1e6;i += 1000)&#123;</span></span><br><span class="line"><span class="comment">        for(int j = 0; j &lt;= 1e6;j += 1000)&#123;</span></span><br><span class="line"><span class="comment">            dabiao(x+1.0*i*(1e-6),y+1.0*j*(1e-6));</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">int</span> t , n ;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="comment">//memset(zcj , 0 ,sizeof (zcj));</span></span><br><span class="line">        <span class="comment">//memset(zb , 0 , sizeof (zb));</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n;i++)&#123;</span><br><span class="line">            zb[i] = zcj[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p,p+n,greater&lt;<span class="keyword">double</span>&gt;());</span><br><span class="line">        <span class="comment">/*for(int i = 0; i &lt; n;i++)&#123;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; p[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span>(p[<span class="number">0</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, p[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//reverse(p.begin(), p.end());</span></span><br><span class="line">        <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                zcj[i] = <span class="number">1</span> - p[i];</span><br><span class="line">                zb[i] = p[i] / (<span class="number">1</span>-p[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                zcj[i] = zcj[i - <span class="number">1</span>] * (<span class="number">1</span> -p[i]);</span><br><span class="line">                zb[i] = zb[i<span class="number">-1</span>] + p[i] / (<span class="number">1.0</span>-p[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = max(zcj[i] * zb[i],  ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure></p>
<h3 id="补题："><a href="#补题：" class="headerlink" title="补题："></a>补题：</h3><h4 id="H-Coins"><a href="#H-Coins" class="headerlink" title="H - Coins"></a>H - Coins</h4><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意:"></a>题意:</h5><p>每一组两个硬币，分别价值 ai 、 bi ，每一组有三个选择：取 ai ，取 ai 和 bi ，不取，求恰好取 k(k$\in$1~2n) 个硬币的时候的最大价值。</p>
<h5 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h5><p>贪心的思想，用线段树或者四个优先队列去维护。或者用决策单调性优化dp。</p>
<p>有很多优秀的做法：</p>
<p>n-2推得n。。。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//others</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,j,k) for(int i = (int)j;i &lt;= (int)k;i ++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">":"</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="keyword">int</span>)<span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line">priority_queue&lt;pi&gt; se[<span class="number">2</span>],sb[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> ans[MAXN];</span><br><span class="line"><span class="keyword">int</span> mark[<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T --) &#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!se[i].empty()) se[i].pop();</span><br><span class="line">            <span class="keyword">while</span> (!sb[i].empty()) sb[i].pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> N;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">5</span>*N) mark[<span class="number">0</span>][i] = mark[<span class="number">1</span>][i] = ans[i] = a[i] = b[i] = <span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,N) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a[i],&amp;b[i]);</span><br><span class="line">            c[i] = a[i]+b[i];</span><br><span class="line">            se[<span class="number">0</span>].push(make_pair(a[i],i));</span><br><span class="line">            se[<span class="number">1</span>].push(make_pair(a[i],i));</span><br><span class="line">            sb[<span class="number">0</span>].push(make_pair(c[i],i));</span><br><span class="line">            sb[<span class="number">1</span>].push(make_pair(c[i],i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>,id,now1,now2;</span><br><span class="line">        pi tmp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1</span></span><br><span class="line">        tmp = se[<span class="number">1</span>].top();</span><br><span class="line">        ans[<span class="number">1</span>] = tmp.first;</span><br><span class="line">        mark[<span class="number">1</span>][tmp.second] = <span class="number">1</span>;</span><br><span class="line">        se[<span class="number">1</span>].push(make_pair(b[tmp.second],tmp.second+N));</span><br><span class="line"></span><br><span class="line">        rep(i,<span class="number">2</span>,<span class="number">2</span>*N) &#123;</span><br><span class="line">            now1 = <span class="number">0</span>,now2 = <span class="number">0</span>;</span><br><span class="line">            pi s1,s2,s3;</span><br><span class="line">            <span class="keyword">while</span> (!se[f].empty() &amp;&amp; mark[f][se[f].top().second] == <span class="number">1</span>) se[f].pop();</span><br><span class="line">            <span class="keyword">while</span> (!sb[f].empty() &amp;&amp; mark[f][sb[f].top().second] == <span class="number">1</span>) sb[f].pop();</span><br><span class="line">            <span class="keyword">if</span> (!se[f].empty()) &#123;</span><br><span class="line">                s1 = se[f].top();se[f].pop();</span><br><span class="line">                <span class="keyword">while</span> (!se[f].empty() &amp;&amp; mark[f][se[f].top().second] == <span class="number">1</span>) se[f].pop();</span><br><span class="line">                <span class="keyword">if</span> (se[f].empty()) &#123;</span><br><span class="line">                    se[f].push(s1);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    s2 = se[f].top();se[f].pop();</span><br><span class="line">                    now1 = (s1.first+s2.first);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!sb[f].empty()) &#123;</span><br><span class="line">                s3 = sb[f].top();sb[f].pop();</span><br><span class="line">                now2 = s3.first;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (now1 &gt;= now2) &#123;</span><br><span class="line">                ans[i] = ans[i<span class="number">-2</span>] + now1;</span><br><span class="line">                <span class="keyword">int</span> id1 = s1.second;</span><br><span class="line">                <span class="keyword">int</span> id2 = s2.second;</span><br><span class="line">                mark[f][id1] = <span class="number">1</span>;</span><br><span class="line">                mark[f][id2] = <span class="number">1</span>;</span><br><span class="line">                se[f].push(make_pair(b[id1],id1+N));</span><br><span class="line">                se[f].push(make_pair(b[id2],id2+N));</span><br><span class="line">                <span class="keyword">if</span> (now2) &#123;</span><br><span class="line">                    sb[f].push(s3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ans[i] = ans[i<span class="number">-2</span>] + now2;</span><br><span class="line">                mark[f][s3.second] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (now1) &#123;</span><br><span class="line">                    se[f].push(s1);</span><br><span class="line">                    se[f].push(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            f = f^<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">2</span>*N<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[<span class="number">2</span>*N]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>2019 Multi-University Training Contest</tag>
        <tag>GYM Training</tag>
        <tag>hdu</tag>
        <tag>Team Round（2019）</tag>
      </tags>
  </entry>
  <entry>
    <title>类欧几里得算法</title>
    <url>/2019/11/23/similar-Euclid/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/Code92007/article/details/97396823" target="_blank" rel="noopener">参考博客</a><br><a href="https://blog.csdn.net/VictoryCzt/article/details/86099938?utm_source=app" target="_blank" rel="noopener">参考博客</a></p>
<p>说是类欧几里得,其实和欧几里得关系不大。只是形式上有点像 ,O(log n)的复杂度。</p>
<p>类欧几里得几何性质:<br>等价于求y=(ax+b)/c这条直线与x=0和x=n y=0围成的直角梯形上的整点的个数,在直线上的统计在内，在x=0和x=n上的统计在内，在y=0上的不统计</p>
<h3 id="begin"><a href="#begin" class="headerlink" title="begin:"></a>begin:</h3><p>首先定义三个函数：<br>$f(a,b,c,n) = \sum_{i=0}^n{\lfloor\frac{ai+b}{c}\rfloor}$</p>
<p>$g(a,b,c,n) = \sum_{i=0}^{n} i {\lfloor\frac{ai+b}{c}\rfloor}$</p>
<p>$h(a,b,c,n) = \sum_{i=0}^n{\lfloor\frac{ai+b}{c}\rfloor^2}$ &ensp;&ensp;&ensp;以上三式都有 &ensp;<script type="math/tex">0\leq a, b, c, n\leq10^{9}</script></p>
<p>为了方便，我们令<script type="math/tex">m = \lfloor \frac{an+b}{c} \rfloor</script></p>
<h3 id="一些不等式："><a href="#一些不等式：" class="headerlink" title="一些不等式："></a>一些不等式：</h3><p>$a \leq \lfloor \frac{b}{c} \rfloor \Leftrightarrow ac \leq b$</p>
<p>$a \lt \lceil \frac{b}{c} \rceil \Leftrightarrow ac \lt b$</p>
<p>$a \ge \lceil \frac{b}{c} \rceil \Leftrightarrow ac \ge b$</p>
<p>$a \gt \lfloor \frac{b}{c} \rfloor \Leftrightarrow ac \gt b$</p>
<p>$\lceil \frac{b}{c} \rceil  = \lfloor \frac{b+c-1}{c}\rfloor $</p>
<p>$\lfloor \frac{b}{c} \rfloor = \lceil \frac{b-c+1}{c}\rceil $</p>
<h3 id="求f"><a href="#求f" class="headerlink" title="求f:"></a>求f:</h3><h4 id="①-a-ge-c-或-b-ge-c"><a href="#①-a-ge-c-或-b-ge-c" class="headerlink" title="① $a\ge c 或 b \ge c$"></a>① $a\ge c 或 b \ge c$</h4><p>$\lfloor\frac{ai+b}{c}\rfloor \Leftrightarrow \lfloor \frac{(a \% c)i+b\%c]}{c} \rfloor + \lfloor \frac{a}{c} \rfloor i + \lfloor \frac{b}{c}\rfloor$</p>
<p>$f(a,b,c,n) \Leftrightarrow f(a\%b,b\%c,c,n)$ + $\frac{n(n+1)}{2}\lfloor \frac{a}{c}\rfloor$ + $(n+1)\lfloor \frac{b}{c}\rfloor$</p>
<h4 id="②-a-lt-c-ensp-and-ensp-b-lt-c"><a href="#②-a-lt-c-ensp-and-ensp-b-lt-c" class="headerlink" title="②$a\lt c $ &ensp;and &ensp;$ b \lt c $"></a>②$a\lt c $ &ensp;and &ensp;$ b \lt c $</h4><p>若a = 0 $\Rightarrow$ $f(a,b,c,n) = 0$</p>
<p>若a $\neq$ 0:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(a,b,c,n) = \sum_{i = 0}^{n} \sum_{j = 1}^{m}[\lfloor \frac{ai+b}{c} \ge j\rfloor] 
&=\sum_{i = 0}^{n} \sum_{j = 0}^{m-1}[\lfloor \frac{ai+b}{c} \ge j+1\rfloor]\\
&=\sum_{i = 0}^{n} \sum_{j = 0}^{m-1}[ai \ge cj+c-b]\\
&=\sum_{i = 0}^{n} \sum_{j = 0}^{m-1}[ai \gt cj+c-b-1]\\
&=\sum_{i = 0}^{n} \sum_{j = 0}^{m-1}[i \gt \frac{cj+c-b-1}{a}]\\
&=\sum_{i = 0}^{n} \sum_{j = 0}^{m-1}[n - \lfloor \frac{cj+c-b-1}{a} \rfloor]\\
&=n*m-f(c,c-b-1,a,m-1)
\end{aligned}</script><h3 id="求g："><a href="#求g：" class="headerlink" title="求g："></a>求g：</h3><h4 id="①-a-ge-c-或-b-ge-c-1"><a href="#①-a-ge-c-或-b-ge-c-1" class="headerlink" title="①$a\ge c 或 b \ge c$"></a>①$a\ge c 或 b \ge c$</h4><p>$g(a,b,c,n) = g(a\%c,b\%c,c,n) + \frac{n(n+1)(2n+1)}{6}\lfloor\frac{a}{c}\rfloor + \frac{n(n+1)}{2}\lfloor\frac{b}{c}\rfloor$</p>
<h4 id="②-a-lt-c-ensp-and-ensp-b-lt-c-1"><a href="#②-a-lt-c-ensp-and-ensp-b-lt-c-1" class="headerlink" title="②$a\lt c $ &ensp;and &ensp;$ b \lt c $"></a>②$a\lt c $ &ensp;and &ensp;$ b \lt c $</h4><script type="math/tex; mode=display">
\begin{aligned}
g(a,b,c,n) &= \sum_{i=0}^{n}i\sum_{j=1}^{m}[\lfloor \frac {ai+b}{c}\rfloor \ge j ] \\
&=\sum_{i=0}^{n}i\sum_{j=0}^{m-1}[i\gt \frac{jc+c-b-1}{a}]\\
对于\forall j,满足i至少为\lfloor \frac{jc+c-b-1}{a}+1\rfloor,上限为n,可得到一个等差数列\\
&=\sum_{j=0}^{m-1}\frac{(n-\lfloor\frac{jc+c-b-1}{a} \rfloor)(n+\lfloor \frac{jc+c-b-a}{a} \rfloor+1)}{2}\\
&=\frac{1}{2}\sum_ {j=0}^{m-1}(n(n+1)-\lfloor \frac{jc+c-b-1}{a}\rfloor-\lfloor\frac{jc+c-b-1}{a}\rfloor^2)\\
&=\frac{mn(n+1)-f(c,c-b-1,a,m-1)-h(c,c-b-1,a,m-1)}{2}
\end{aligned}</script><h3 id="求h"><a href="#求h" class="headerlink" title="求h:"></a>求h:</h3><h4 id="①-a-ge-c-或-b-ge-c-2"><a href="#①-a-ge-c-或-b-ge-c-2" class="headerlink" title="①$a\ge c 或 b \ge c$"></a>①$a\ge c 或 b \ge c$</h4><p>$h(a,b,c,n)=h(a\%c,b\%c,c,n)+ \frac{n(n+1)(2n+1)}{6}(\frac{a}{c})^2 +(n+1)(\frac{b}{c})^2+2g(a \% c,b \% c,c,n)(\frac{a}{c})+2f(a \% c,b \% c,c,n)(\frac{b}{c})+n(n+1)(\frac{a}{c})(\frac{b}{c})$</p>
<h4 id="②-a-lt-c-ensp-and-ensp-b-lt-c-2"><a href="#②-a-lt-c-ensp-and-ensp-b-lt-c-2" class="headerlink" title="②$a\lt c $ &ensp;and &ensp;$ b \lt c $"></a>②$a\lt c $ &ensp;and &ensp;$ b \lt c $</h4><p>tips:为了方便,把$n^{2}$拆成$n^2 = 2*\frac{n(n+1)}{2}-n =( 2\sum_{i=0}^{n}i)-n$ 这样做的目的是不会出现$\sum x \sum$的形式</p>
<p>令t$=\lfloor \frac{jc+c-b-1}{a} \rfloor$</p>
<script type="math/tex; mode=display">h(a,b,c,n) = \sum_{i=0}^{n}(2*\sum_{j=1}^{\frac{ai+b}{c}}j-\frac{ai+b}{c})</script><script type="math/tex; mode=display">=(2*\sum_{i=0}^{n}\sum_{j=1}^{\frac{ai+b}{c}}j)-f(a,b,c,n)</script><script type="math/tex; mode=display">\sum_{i=0}^{n}\sum_{j=1}^{\frac{ai+b}{c}}j=\sum_{i=0}^{n}\sum_{j=0}^{\frac{ai+b}{c}-1}(j+1)</script><script type="math/tex; mode=display">=\sum_{j=0}^{m-1}(j+1)\sum_{i=0}^{n}[j \lt \lfloor \frac{ai+b}{c} \rfloor]</script><script type="math/tex; mode=display">=\sum_{j=0}^{m-1}(j+1)\sum_{i=0}^{n}[i \gt \frac{jc+c-b-1}{a}]</script><script type="math/tex; mode=display">=\sum_{j=0}^{m-1}(j+1)(n-t)</script><script type="math/tex; mode=display">=\frac{1}{2}nm(m+1)-\sum_{j=0}^{m-1}\lfloor \frac{jc+c-b-1}{a}\rfloor</script><script type="math/tex; mode=display">=\frac{1}{2}nm(m+1)-g(c,c-b-1,a,m-1)-f(c,c-b-1,a,m-1)</script><p>所以有$h(a,b,c,n)=nm(m+1)-2g(c,c-b-1,a,m-1)-2f(c,c-b-1,a,m-1)-f(a,b,c,n)$</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码中的h,g的意义对换了一下，懒得改了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll Mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> ll inv2=<span class="number">499122177</span>,inv6=<span class="number">166374059</span>;</span><br><span class="line"><span class="function">ll <span class="title">S1</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">if</span>(x&gt;=Mod)x%=Mod;<span class="keyword">return</span> (x*(x+<span class="number">1</span>)%Mod)*inv2%Mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">S2</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">if</span>(x&gt;=Mod)x%=Mod;<span class="keyword">return</span> (x*(x+<span class="number">1</span>)%Mod*(x+x+<span class="number">1</span>)%Mod)*inv6%Mod;&#125;</span><br><span class="line"><span class="function">ll <span class="title">Sqr</span><span class="params">(ll x)</span></span>&#123;<span class="keyword">return</span> x*x%Mod;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	ll f,g,h;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;f=g=h=<span class="number">0</span>;&#125;</span><br><span class="line">	node()&#123;&#125;</span><br><span class="line">	node(ll a,ll b,ll c):f(a),g(b),h(c)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,f,g,h);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node <span class="title">calc</span><span class="params">(ll a,ll b,ll c,ll n)</span></span>&#123;</span><br><span class="line">	node ans,res;ans.clear();</span><br><span class="line">	ll m,t1,t2,s1,s2;</span><br><span class="line">	<span class="keyword">if</span>(!n)&#123;ans.f=b/c;ans.g=Sqr(b/c);<span class="keyword">return</span> ans;&#125;</span><br><span class="line">	<span class="keyword">if</span>(!a)&#123;</span><br><span class="line">		t1=b/c;</span><br><span class="line">		ans.f=(n+<span class="number">1l</span>l)*t1%Mod;</span><br><span class="line">		ans.g=(n+<span class="number">1l</span>l)*Sqr(t1)%Mod;</span><br><span class="line">		ans.h=S1(n)*t1%Mod;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;=c||b&gt;=c)&#123;</span><br><span class="line">		t1=a/c;t2=b/c;</span><br><span class="line">		res=calc(a%c,b%c,c,n);</span><br><span class="line">		s1=S1(n);s2=S2(n);</span><br><span class="line">		ans.f=(((s1*t1%Mod)+(n+<span class="number">1l</span>l)*t2%Mod)%Mod+res.f)%Mod;</span><br><span class="line">		ans.g=(((Sqr(t1)*s2%Mod+(n+<span class="number">1l</span>l)*Sqr(t2)%Mod)%Mod)+((t1*t2%Mod)*<span class="number">2l</span>l*s1%Mod+(t1*<span class="number">2l</span>l*res.h%Mod))%Mod+(res.g+t2*<span class="number">2l</span>l*res.f%Mod)%Mod)%Mod;</span><br><span class="line">		ans.h=((s2*t1%Mod+s1*t2%Mod)+res.h)%Mod;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	m=(n*a+b)/c<span class="number">-1</span>;</span><br><span class="line">	res=calc(c,c-b<span class="number">-1</span>,a,m);</span><br><span class="line">	ll w1=n*(m+<span class="number">1</span>)%Mod,w2=n*(n+<span class="number">1</span>)%Mod,w3=m+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(w3&gt;=Mod)w3%=Mod;</span><br><span class="line">	ans.f=(w1-res.f)%Mod;<span class="keyword">if</span>(ans.f&lt;<span class="number">0</span>)ans.f+=Mod;</span><br><span class="line">	ans.g=((w1*w3)%Mod-((res.h*<span class="number">2l</span>l%Mod+res.f)%Mod))%Mod;<span class="keyword">if</span>(ans.g&lt;<span class="number">0</span>)ans.g+=Mod;</span><br><span class="line">	ans.h=((w2*w3)%Mod-(res.f+res.g)%Mod)%Mod*inv2%Mod;<span class="keyword">if</span>(ans.h&lt;<span class="number">0</span>)ans.h+=Mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b,c,n,T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);T--;)&#123;<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;a,&amp;b,&amp;c);calc(a,b,c,n).out();&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目: </p>
<p>1.<a href="https://www.luogu.com.cn/problem/P5170" target="_blank" rel="noopener">洛谷模板题</a><br>2.<a href="https://loj.ac/problem/138" target="_blank" rel="noopener">loj 一般形式的类欧</a><br>3.<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3817" target="_blank" rel="noopener">BZOJ3817</a><br>4.[GDOI2018模拟8.8]超级绵羊异或<br>5.[JZOJ3327]陶陶的难题<br>6.bzoj2852 vijos1504 强大的区间<br>7.【JZOJ 3492】【NOIP2013模拟联考12】数数(count)<br>8.<a href="https://loj.ac/problem/6440" target="_blank" rel="noopener">loj6440万能欧几里得</a><br>参考代码：<br>2.<a href="https://blog.csdn.net/VictoryCzt/article/details/86099938" target="_blank" rel="noopener">https://blog.csdn.net/VictoryCzt/article/details/86099938</a></p>
<p><a href="https://loj.ac/submission/333642" target="_blank" rel="noopener">万能欧几里得</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>类欧</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #8:2019 ICPC Malaysia National</title>
    <url>/2019/11/18/TeamRound8/</url>
    <content><![CDATA[<p>这一场是在 2019-11-17 13:39 CST 打的</p>
<p>是打完南京南昌回来后的第一场Team Round,当然了,选题性质是恢复信心训练。</p>
<p>一共解了BKICJAEFH九道题。</p>
<p>有一个小插曲就是我a了第一个水题的时候wqr_和dqy已经切了四道题😭(我神经病了用scanf输入字符,ljlct不会)</p>
<h3 id="B-SpongeBob-SquarePants"><a href="#B-SpongeBob-SquarePants" class="headerlink" title="B - SpongeBob SquarePants"></a>B - SpongeBob SquarePants</h3><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   _ _ _                     </span></span><br><span class="line"><span class="comment">    | | | | ___  ___           </span></span><br><span class="line"><span class="comment">    | | | || . ||  _|          </span></span><br><span class="line"><span class="comment">    |_____||_  ||_|  _____     </span></span><br><span class="line"><span class="comment">             |_|    |_____|  */</span></span><br><span class="line"><span class="comment">// Time : 19/11/17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wqr_</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);<span class="comment">/*   _ _ _                     </span></span><br><span class="line"><span class="comment">    | | | | ___  ___           </span></span><br><span class="line"><span class="comment">    | | | || . ||  _|          </span></span><br><span class="line"><span class="comment">    |_____||_  ||_|  _____     </span></span><br><span class="line"><span class="comment">             |_|    |_____|  */</span></span><br><span class="line"><span class="comment">// Time : 19/11/17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wqr_</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a == b) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a == b) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="K-Help-The-Support-Lady"><a href="#K-Help-The-Support-Lady" class="headerlink" title="K - Help The Support Lady"></a>K - Help The Support Lady</h3><h4 id="思路：dqy写的"><a href="#思路：dqy写的" class="headerlink" title="思路：dqy写的"></a>思路：dqy写的</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">rbtree</span>:</span> tree&lt;T,null_type,less&lt;T&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;&#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//IOS;</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> z = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt;= a[i])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                sum += a[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, z++, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-To-Crash-Or-Not-To-Crash"><a href="#I-To-Crash-Or-Not-To-Crash" class="headerlink" title="I - To Crash Or Not To Crash"></a>I - To Crash Or Not To Crash</h3><h4 id="思路：wqr写的"><a href="#思路：wqr写的" class="headerlink" title="思路：wqr写的"></a>思路：wqr写的</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   _ _ _                     </span></span><br><span class="line"><span class="comment">    | | | | ___  ___           </span></span><br><span class="line"><span class="comment">    | | | || . ||  _|          </span></span><br><span class="line"><span class="comment">    |_____||_  ||_|  _____     </span></span><br><span class="line"><span class="comment">             |_|    |_____|  */</span></span><br><span class="line"><span class="comment">// Time : 19/11/17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wqr_</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span> a[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[<span class="number">0</span>] &gt;&gt; a[<span class="number">1</span>] &gt;&gt; a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> str : a)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : str)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != <span class="string">'.'</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'='</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"You shall pass!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-I-Don’t-Want-To-Pay-For-The-Late-Jar"><a href="#C-I-Don’t-Want-To-Pay-For-The-Late-Jar" class="headerlink" title="C - I Don’t Want To Pay For The Late Jar!"></a>C - I Don’t Want To Pay For The Late Jar!</h3><h4 id="dqy写的"><a href="#dqy写的" class="headerlink" title="dqy写的"></a>dqy写的</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">rbtree</span>:</span> tree&lt;T,null_type,less&lt;T&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;&#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//IOS;</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> ans = -INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(y &lt;= s)ans = max(ans, x);</span><br><span class="line">            <span class="keyword">else</span> ans = max(ans, x-(y-s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, cnt++, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="J-Kitchen-Plates"><a href="#J-Kitchen-Plates" class="headerlink" title="J - Kitchen Plates"></a>J - Kitchen Plates</h3><h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>给你abcde五个盘子，给你五个关系，根据给的关系依此输出盘子（从小到大）</p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>确实可以暴力，然而我第一反应就是拓扑排序，然后敲完之后很长很长一段时间陷入很迷的状态，后来才发现是我用scanf用不对？？。。在我低迷的时候dqy和wqr说杀鸡焉用牛刀这不随便乱搞。。。btw，判断impossible就是有无环，检查序列a长度即可<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> ver[maxn], nxt[maxn], head[maxn], deg[maxn], a[maxn];</span><br><span class="line"><span class="keyword">int</span> tot , cnt, n, m;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    ver[++tot] = y,nxt[tot] = head[x],head[x] = tot;</span><br><span class="line">    deg[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span> &gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[i] == <span class="number">0</span>)q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q.size())&#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        a[++cnt] = x;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; "x ==== " &lt;&lt; x &lt;&lt; "     a["&lt;&lt; cnt &lt;&lt;  "] ===== " &lt;&lt;a[cnt] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i  = head[x]; i ; i = nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> y = ver[i];</span><br><span class="line">            <span class="keyword">if</span>(--deg[y] == <span class="number">0</span>)q.push(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = <span class="number">5</span>;</span><br><span class="line">    m = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, c);</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="number">1</span>] == <span class="string">'&lt;'</span>)add(c[<span class="number">0</span>] - <span class="string">'A'</span> + <span class="number">1</span>, c[<span class="number">2</span>] - <span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> add(c[<span class="number">2</span>] - <span class="string">'A'</span>+<span class="number">1</span>,c[<span class="number">0</span>]-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">/*int x, y;</span></span><br><span class="line"><span class="comment">        cin &gt;&gt; x &gt;&gt; y;</span></span><br><span class="line"><span class="comment">        add(x,y);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    topo();</span><br><span class="line">   <span class="comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; <span class="number">5</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">"impossible\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt;i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>)(<span class="string">'A'</span>+a[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="A-Mental-Rotation"><a href="#A-Mental-Rotation" class="headerlink" title="A - Mental Rotation"></a>A - Mental Rotation</h3><h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>给你一个方形图案，给一系列右旋转或者左旋转操作，要求输出操作后的图案</p>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>模拟，模拟带师wqr写的。观察到最多只有右旋90，180，270度这三种，处理完所有的操作后模拟旋转就行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   _ _ _                     </span></span><br><span class="line"><span class="comment">    | | | | ___  ___           </span></span><br><span class="line"><span class="comment">    | | | || . ||  _|          </span></span><br><span class="line"><span class="comment">    |_____||_  ||_|  _____     </span></span><br><span class="line"><span class="comment">             |_|    |_____|  */</span></span><br><span class="line"><span class="comment">// Time : 19/11/17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> tu[maxn][maxn];</span><br><span class="line"><span class="keyword">char</span> vs[<span class="number">4</span>] = &#123;<span class="string">'^'</span>, <span class="string">'&gt;'</span>, <span class="string">'v'</span>, <span class="string">'&lt;'</span>&#125;;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; vsmap;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">ch</span><span class="params">(<span class="keyword">char</span> in)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(in == <span class="string">'.'</span>) <span class="keyword">return</span> <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">return</span> vs[(vsmap[in] + <span class="number">1</span>) % <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ror</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp[maxn][maxn];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            tmp[j][n - <span class="number">1</span> - i] = ch(tu[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            tu[i][j] = tmp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rol</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ror();</span><br><span class="line">    ror();</span><br><span class="line">    ror();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wqr_</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    vsmap[<span class="string">'^'</span>] = <span class="number">0</span>;</span><br><span class="line">    vsmap[<span class="string">'&gt;'</span>] = <span class="number">1</span>;</span><br><span class="line">    vsmap[<span class="string">'v'</span>] = <span class="number">2</span>;</span><br><span class="line">    vsmap[<span class="string">'&lt;'</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; vs[(vsmap['^'] + 1) % 4] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; vs[(vsmap['&gt;'] + 1) % 4] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; vs[(vsmap['v'] + 1) % 4] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; vs[(vsmap['&lt;'] + 1) % 4] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> o;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; o;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; tu[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : o)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="string">'L'</span>) l++;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="string">'R'</span>) r++;</span><br><span class="line">    &#125;</span><br><span class="line">    l %= <span class="number">4</span>;</span><br><span class="line">    r %= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> tmpl = l, tmpr = r;</span><br><span class="line">    r = max(tmpl, tmpr) - tmpl;</span><br><span class="line">    l = max(tmpl, tmpr) - tmpr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)&#123;</span><br><span class="line">        rol();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)&#123;</span><br><span class="line">        ror();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; tu[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-Optimal-Slots"><a href="#E-Optimal-Slots" class="headerlink" title="E - Optimal Slots"></a>E - Optimal Slots</h3><h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>给一个总时间T，再给N个时间，要求选取一些时间ti，使得总和sum不超过T且尽量接近T，如果有多种方案，就输出输入顺序早的方案。</p>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p>dqy 写的  倒着遍历 set vector 组合技</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">rbtree</span>:</span> tree&lt;T,null_type,less&lt;T&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;&#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s, s1;</span><br><span class="line">VI v[<span class="number">3000</span>], vv[<span class="number">3000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="comment">//IN;</span></span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;t &amp;&amp; t)&#123;</span><br><span class="line">        s.clear();</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2600</span>; i++)v[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            s1.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it : s)&#123;</span><br><span class="line">                <span class="keyword">if</span>(it + a[i] &lt;= t)&#123;</span><br><span class="line">                    s1.insert(it+a[i]);</span><br><span class="line">                    ans = max(ans, it+a[i]);</span><br><span class="line">                    vv[it+a[i]] = v[it];</span><br><span class="line">                    vv[it+a[i]].pb(a[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it : s1)&#123;</span><br><span class="line">                s.insert(it);</span><br><span class="line">                v[it] = vv[it];</span><br><span class="line">                vv[it].clear();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt;= t) &#123;</span><br><span class="line">                s.insert(a[i]);</span><br><span class="line">                ans = max(ans, a[i]);</span><br><span class="line">                v[a[i]].clear();</span><br><span class="line">                v[a[i]].pb(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!v[ans].empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;v[ans].back()&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">            v[ans].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="题解2："><a href="#题解2：" class="headerlink" title="题解2："></a>题解2：</h4><p>转化成01背包的思想</p>
<h4 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h4><p>设d[i][j] 为能否从i到N这段中选取一些组成j,为1可行，为零不可行。考虑转移方程，从大到小枚举j,d[i][j] |= d[i+1][j-t[i]],找到一个最大的j，使得d[1][j] = 1, 那么ans = j。然后从大到小枚举i,如果由d[i+1][sum-t[i]] == 1,那么选取ti。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">24</span> * <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">52</span>][maxn], a[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">51</span>; i++)</span><br><span class="line">        d[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;T &amp;&amp; T) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= T; j++)</span><br><span class="line">            d[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= T; j++)</span><br><span class="line">            d[n + <span class="number">1</span>][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = T; j &gt;= a[i]; j--)</span><br><span class="line">                d[i][j] |= d[i + <span class="number">1</span>][j - a[i]];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = T; j; j--)</span><br><span class="line">                d[i][j] |= d[i + <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = T;</span><br><span class="line">        <span class="keyword">while</span> (!d[<span class="number">1</span>][sum])</span><br><span class="line">            sum--;</span><br><span class="line">        <span class="keyword">int</span> ans = sum;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">while</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[p] &lt;= sum) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[p + <span class="number">1</span>][sum - a[p]])</span><br><span class="line">                    q.push(a[p]), sum -= a[p];</span><br><span class="line">            &#125;</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, q.front());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//others：https://blog.csdn.net/ccsu_cat/article/details/93400147</span></span><br></pre></td></tr></table></figure></p>
<h3 id="F-Military-Class"><a href="#F-Military-Class" class="headerlink" title="F - Military Class"></a>F - Military Class</h3><h4 id="题意：-3"><a href="#题意：-3" class="headerlink" title="题意："></a>题意：</h4><p>有2N个士兵站成两排，现在要求上面一排的士兵和下面一排的士兵一一配对组成N队，要求配对的两个士兵，他们的位置相差不能超过e，而且有K队士兵互相讨厌，他们不能配对在一起。要求输出配对总方案数。</p>
<h4 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h4><p>观察到e很小，2e+1最大也就是9。考虑用状压dp。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n , e, kk , ans;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span> , <span class="keyword">int</span> &gt; P;</span><br><span class="line"><span class="built_in">set</span>&lt;P&gt; s;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="comment">/*int mul(int a , int b)&#123;</span></span><br><span class="line"><span class="comment">    int ret = 0;</span></span><br><span class="line"><span class="comment">    while(b)&#123;</span></span><br><span class="line"><span class="comment">        if(b &amp; 1)</span></span><br><span class="line"><span class="comment">            ret = (ret+a)%mod;</span></span><br><span class="line"><span class="comment">        a=(a &lt;&lt; 1)%mod;</span></span><br><span class="line"><span class="comment">        b = b &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return ret;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; e &gt;&gt; kk;</span><br><span class="line">    <span class="keyword">int</span> ee = <span class="number">2</span>*e+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> all = (ll(<span class="number">1</span>) &lt;&lt; ee);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kk;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="comment">//s.insert(make_pair(a, b));</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(a - b) &lt;= e)s.insert(make_pair(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; all; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; ee;k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i + k - e &lt;= <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(i + k - e &gt; n)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.find(P&#123;i, i+k-e&#125;) != s.end())<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> t = j &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(t &amp; (<span class="number">1l</span>l &lt;&lt; k))<span class="keyword">continue</span>;</span><br><span class="line">                dp[i][t | (<span class="number">1l</span>l &lt;&lt; k)] = (dp[i][t | (<span class="number">1l</span>l &lt;&lt; k)] + dp[i<span class="number">-1</span>][j] ) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all;i++)&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; "dp[n][" &lt;&lt; i &lt;&lt; "] ===== "&lt;&lt; dp[n][i] &lt;&lt; endl;</span></span><br><span class="line">        ans += dp[n][i];</span><br><span class="line">        ans %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="H-Are-You-Safe"><a href="#H-Are-You-Safe" class="headerlink" title="H - Are You Safe?"></a>H - Are You Safe?</h3><h4 id="题意：-4"><a href="#题意：-4" class="headerlink" title="题意："></a>题意：</h4><p>给定n个点，求出这些点构成的凸包，然后逆时针输出，另外还有q次询问，每次询问一个点是否在凸包里</p>
<h4 id="思路：wqr现学现卖，orz！"><a href="#思路：wqr现学现卖，orz！" class="headerlink" title="思路：wqr现学现卖，orz！"></a>思路：wqr现学现卖，orz！</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> x = <span class="number">0</span>, <span class="keyword">double</span> y = <span class="number">0</span>) : x(x), y(y) &#123;&#125;</span><br><span class="line">    Point <span class="keyword">operator</span>+(Point a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(a.x + x, a.y + y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span>-(Point a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x - a.x, y - a.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Point &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x == a.x)</span><br><span class="line">            <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">        <span class="keyword">return</span> x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector a, Vector b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector a, Vector b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isclock</span><span class="params">(Point p0, Point p1, Point p2)</span> </span>&#123;</span><br><span class="line">    Vector a = p1 - p0;</span><br><span class="line">    Vector b = p2 - p0;</span><br><span class="line">    <span class="keyword">if</span> (cross(a, b) &lt; -eps) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDistance</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(a.x - b.x, <span class="number">2</span>) + <span class="built_in">pow</span>(a.y - b.y, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;Point&gt; Polygon;</span><br><span class="line"><span class="function">Polygon <span class="title">andrewScan</span><span class="params">(Polygon s)</span> </span>&#123;</span><br><span class="line">    Polygon u, l;</span><br><span class="line">    <span class="keyword">if</span> (s.size() &lt; <span class="number">3</span>) <span class="keyword">return</span> s;</span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    u.push_back(s[<span class="number">0</span>]);</span><br><span class="line">    u.push_back(s[<span class="number">1</span>]);</span><br><span class="line">    l.push_back(s[s.size() - <span class="number">1</span>]);</span><br><span class="line">    l.push_back(s[s.size() - <span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = u.size(); n &gt;= <span class="number">2</span> &amp;&amp; isclock(u[n - <span class="number">2</span>], u[n - <span class="number">1</span>], s[i]) != <span class="literal">true</span>; n--) &#123;</span><br><span class="line">            u.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        u.push_back(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s.size() - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n = l.size(); n &gt;= <span class="number">2</span> &amp;&amp; isclock(l[n - <span class="number">2</span>], l[n - <span class="number">1</span>], s[i]) != <span class="literal">true</span>; n--) &#123;</span><br><span class="line">            l.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        l.push_back(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; u.size() - <span class="number">1</span>; i++) l.push_back(u[i]);</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PointOnSegment</span><span class="params">(Point p, Point s, Point t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cmp(cross(p-s, t-s)) == <span class="number">0</span> &amp;&amp; cmp(dot(p-s,p-t)) &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">polygon</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; a;</span><br><span class="line">    polygon(<span class="built_in">vector</span>&lt;Point&gt; in)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : in)&#123;</span><br><span class="line">            a.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        a.push_back(in.front());</span><br><span class="line">        n = in.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Point_In</span><span class="params">(Point t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>, i, d1, d2, k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(PointOnSegment(t, a[i], a[i+<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            k = cmp(cross(a[i+<span class="number">1</span>]-a[i], t-a[i]));</span><br><span class="line">            d1 = cmp(a[i].y-t.y);</span><br><span class="line">            d2 = cmp(a[i+<span class="number">1</span>].y-t.y);</span><br><span class="line">            <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; d1 &lt;= <span class="number">0</span> &amp;&amp; d2 &gt; <span class="number">0</span>) num++;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; <span class="number">0</span> &amp;&amp; d2 &lt;= <span class="number">0</span> &amp;&amp; d1 &gt; <span class="number">0</span>) num--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Wqr_</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= t; kase++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; kase &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> c, p;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c &gt;&gt; p;</span><br><span class="line">        <span class="keyword">double</span> a, b;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Point&gt; ps;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            ps.push_back(Point(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Point&gt; anstmp = andrewScan(ps);</span><br><span class="line">        <span class="built_in">vector</span>&lt;Point&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = anstmp.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            ans.push_back(anstmp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> minit = <span class="number">0</span>;</span><br><span class="line">        <span class="function">Point <span class="title">minP</span><span class="params">(<span class="number">1e5</span>, <span class="number">1e5</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i] &lt; minP)&#123;</span><br><span class="line">                minit = i;</span><br><span class="line">                minP = ans[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = (i + minit) % ans.size();</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[cur].x &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[cur].y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[minit].x &lt;&lt; <span class="string">" "</span> &lt;&lt; ans[minit].y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="function">polygon <span class="title">pol</span><span class="params">(ans)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">if</span>(pol.Point_In(Point(a, b)))&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; <span class="string">" is unsafe!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; <span class="string">" is safe!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(kase != t) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
        <tag>ICPC Region</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #7: 2018-2019 ACM-ICPC Asia Seoul Regional Contest</title>
    <url>/2019/10/20/TeamRound7/</url>
    <content><![CDATA[<p>Team Round(Training)系列：每周六12：15-17：15</p>
<p>这一场是在2019-10-13 13:30开始的。</p>
<p>打下来还是很吃力的，写了DFC。</p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
        <tag>ICPC Region</tag>
      </tags>
  </entry>
  <entry>
    <title>Probabilities and Expectations</title>
    <url>/2019/10/19/probabilities-expectations/</url>
    <content><![CDATA[<p>留着个坑位把，等哪一天有心情打mathjax在来补把</p>
<p>正好就在这里test一下mathjax把</p>
<script type="math/tex; mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon)=1, i=1,...,n</script><p>……</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Probabilitities</tag>
        <tag>Expectations</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #6:2017 ACM-ICPC EC-Final ShangHai</title>
    <url>/2019/10/09/TeamRound6/</url>
    <content><![CDATA[<p>这一场是在2019-10-07 12:15 开始的。</p>
<p>真正意识到了和axp他们的差距。<br><img src="https://i.loli.net/2019/11/22/oJYXP7zwpUQngeR.png" alt="orz 嗨呀好气呀"><br><img src="https://i.loli.net/2019/11/22/98wJ5QTaAZBsyVN.png" alt="他们那时候是怎么样的高度啊！难以企及啊..."></p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
        <tag>ICPC/CCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #5:2018 mid central</title>
    <url>/2019/10/07/TeamRound5/</url>
    <content><![CDATA[<p>这一场是在 2019-10-02 13:42 开始打的</p>
<p>写了BDHFEACK八道题(准确说应该是7道)</p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #4:2017 JUST Programming Contest 2.0</title>
    <url>/2019/10/01/TeamRound4/</url>
    <content><![CDATA[<p>Team Round(Training)系列：每周六12：15-17：15</p>
<p>这场比赛是在9月28日13：30 - 16：30打的，原标题为GYM#4 信心恢复训练（cloned from cls）</p>
<p>PS：LM在原先的比赛中是没有的，我随便找了div1的bc题，但是后面也没有去攻破他们。</p>
<p>信心恢复场嘛，做的题就会多一些，一共解了DIHGEFCKB九道题目</p>
<h3 id="D-Husam’s-Bug"><a href="#D-Husam’s-Bug" class="headerlink" title="D - Husam’s Bug"></a>D - Husam’s Bug</h3><h4 id="题解：模拟"><a href="#题解：模拟" class="headerlink" title="题解：模拟"></a>题解：模拟</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author : Wqr_</span></span><br><span class="line"><span class="comment">// Time : 19/09/28</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttl(x) cout &lt;&lt; <span class="meta-string">"#"</span> &lt;&lt; (x) &lt;&lt; <span class="meta-string">"#"</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttt(x) cout &lt;&lt; <span class="meta-string">"#"</span> &lt;&lt; (x) &lt;&lt; <span class="meta-string">"#"</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttn cout &lt;&lt; <span class="meta-string">"####"</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">string</span> in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">        <span class="keyword">int</span> cs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> di = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = in.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isalpha</span>(in[i])) cs++;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isdigit</span>(in[i])) di++;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">ispunct</span>(in[i])) sy++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cs &lt; <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The last character must be a letter."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(di &lt; <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The last character must be a digit."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sy &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The last character must be a symbol."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"The last character can be any type."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cs = <span class="number">0</span>;</span><br><span class="line">        di = <span class="number">0</span>;</span><br><span class="line">        sy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-Husam-and-the-Broken-Present-1"><a href="#I-Husam-and-the-Broken-Present-1" class="headerlink" title="I - Husam and the Broken Present 1"></a>I - Husam and the Broken Present 1</h3><h4 id="题解：主对角线开根号求解"><a href="#题解：主对角线开根号求解" class="headerlink" title="题解：主对角线开根号求解"></a>题解：主对角线开根号求解</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-28 13:58:53</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> # @More: If lots of AC,try BF,dfs,DP</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n ;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        b[i] = <span class="built_in">sqrt</span>(a[i][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<h3 id="H-Give-Me-This-Pizza"><a href="#H-Give-Me-This-Pizza" class="headerlink" title="H - Give Me This Pizza"></a>H - Give Me This Pizza</h3><h4 id="题解：单调栈经典问题？-dqy写的"><a href="#题解：单调栈经典问题？-dqy写的" class="headerlink" title="题解：单调栈经典问题？(dqy写的)"></a>题解：单调栈经典问题？(dqy写的)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//fdsfsaddgsadfkolahsduoibkjsadngflksadbgildsabnkijgasbkjlgb</span></span><br><span class="line"><span class="comment">//dfnkjasdbfijkasnbdlkfnsa</span></span><br><span class="line"><span class="comment">//nfolkjshfdkibsadkljf</span></span><br><span class="line"><span class="comment">//dnsojkfnkjsadfbksadbgl</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;pii&gt; s;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.empty())&#123;</span><br><span class="line">            s.push(&#123;a[i], i&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.empty())&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = s.top().fi;</span><br><span class="line">                <span class="keyword">if</span>(tmp &gt;= a[i])&#123;</span><br><span class="line">                    s.push(&#123;a[i], i&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    b[s.top().second] = a[i];</span><br><span class="line">                    s.pop();</span><br><span class="line">                    <span class="keyword">if</span>(s.empty()) s.push(&#123;a[i], i&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.empty())&#123;</span><br><span class="line">        b[s.top().second] = <span class="number">-1</span>;</span><br><span class="line">        s.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-In-the-Chairman’s-office"><a href="#G-In-the-Chairman’s-office" class="headerlink" title="G - In the Chairman’s office"></a>G - In the Chairman’s office</h3><h4 id="题解：可怕的是我当时wa-了两发？？"><a href="#题解：可怕的是我当时wa-了两发？？" class="headerlink" title="题解：可怕的是我当时wa 了两发？？"></a>题解：可怕的是我当时wa 了两发？？</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-28 14:15:21</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> # @More: If lots of AC,try BF,dfs,DP</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n , m ;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="comment">/*if(n == 1)&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; "YES" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">		return 0;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	if(__gcd(n,m) == 1 || n &gt; m)cout &lt;&lt; "NO" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	else cout &lt;&lt; "YES" &lt;&lt;endl;*/</span></span><br><span class="line">	<span class="keyword">if</span>(m/n*n==m)<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<h3 id="E-Abdalrahman-Ali-Bugs"><a href="#E-Abdalrahman-Ali-Bugs" class="headerlink" title="E - Abdalrahman Ali Bugs"></a>E - Abdalrahman Ali Bugs</h3><h4 id="题解：枚举"><a href="#题解：枚举" class="headerlink" title="题解：枚举"></a>题解：枚举</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime: 2019年09月28日 星期六 14时44分34秒</span></span><br><span class="line"><span class="comment"> # @Description: You build it. You run it </span></span><br><span class="line"><span class="comment"> # @More: Once lots of AC, try Brute-force,dynamic programming </span></span><br><span class="line"><span class="comment"> ****************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    close;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len;i++)&#123;</span><br><span class="line">        a[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">2</span>;</span><br><span class="line">    ll min = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100000</span>;i++)&#123;</span><br><span class="line">        ll cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>;j++)&#123;</span><br><span class="line">            cnt += a[j]*(a[j]%i)*a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt &lt; min)&#123;</span><br><span class="line">            min = cnt;</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*****************************************************************/</span></span><br></pre></td></tr></table></figure>
<h3 id="F-Certifications"><a href="#F-Certifications" class="headerlink" title="F - Certifications"></a>F - Certifications</h3><h4 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author : Wqr_</span></span><br><span class="line"><span class="comment">// Time : 19/09/28</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttl(x) cout &lt;&lt; <span class="meta-string">"#"</span> &lt;&lt; (x) &lt;&lt; <span class="meta-string">"#"</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttt(x) cout &lt;&lt; <span class="meta-string">"#"</span> &lt;&lt; (x) &lt;&lt; <span class="meta-string">"#"</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ttn cout &lt;&lt; <span class="meta-string">"####"</span> &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nmax = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[nmax], x[nmax];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>),<span class="built_in">cin</span>.tie(<span class="number">0</span>),<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">int</span> in;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">        <span class="keyword">int</span> it = lower_bound(a, a + n, in) - a;</span><br><span class="line">        <span class="keyword">if</span>(it != n)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[it] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Dr. Samer cannot take any offer :(."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-MRT-Map"><a href="#C-MRT-Map" class="headerlink" title="C - MRT Map"></a>C - MRT Map</h3><h4 id="题解：dqy写的最短路…甚至没看题"><a href="#题解：dqy写的最短路…甚至没看题" class="headerlink" title="题解：dqy写的最短路…甚至没看题"></a>题解：dqy写的最短路…甚至没看题</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[maxn][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qnode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    qnode(<span class="keyword">int</span> _v = <span class="number">0</span>, <span class="keyword">int</span> _c = <span class="number">0</span>): v(_v), c(_c)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> qnode &amp;r) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c &gt; r.c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, cost;</span><br><span class="line">    Edge(<span class="keyword">int</span> _v = <span class="number">0</span>, <span class="keyword">int</span> _cost = <span class="number">0</span>):v(_v), cost(_cost)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; E[MAXN];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> dist[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dist[i] = INF;</span><br><span class="line">    priority_queue&lt;qnode&gt; que;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())que.pop();</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    que.push(qnode(start, <span class="number">0</span>));</span><br><span class="line">    qnode tmp;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())&#123;</span><br><span class="line">        tmp = que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">int</span> u = tmp.v;</span><br><span class="line">        <span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[u].size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v = E[tmp.v][i].v;</span><br><span class="line">            <span class="keyword">int</span> cost = E[u][i].cost;</span><br><span class="line">            <span class="keyword">if</span>(!vis[v]&amp;&amp;dist[v]&gt;dist[u]+cost)&#123;</span><br><span class="line">                dist[v] = dist[u]+cost;</span><br><span class="line">                que.push(qnode(v, dist[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">    E[u].push_back(Edge(v, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xx[<span class="number">30</span>], yy[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++)&#123;</span><br><span class="line">            xx[j] = yy[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(a[x]), len2 = <span class="built_in">strlen</span>(a[y]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len1; j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> s = a[x][j];</span><br><span class="line">            <span class="keyword">if</span>(s &gt; <span class="string">'Z'</span>) s-=<span class="number">32</span>;</span><br><span class="line">            xx[s-<span class="string">'A'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len2; j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> s = a[y][j];</span><br><span class="line">            <span class="keyword">if</span>(s &gt; <span class="string">'Z'</span>) s-=<span class="number">32</span>;</span><br><span class="line">            yy[s-<span class="string">'A'</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">30</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xx[j]&amp;&amp;yy[j])res++;</span><br><span class="line">        &#125;</span><br><span class="line">        addedge(x, y, res);</span><br><span class="line">        addedge(y, x, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s, e; <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;e;</span><br><span class="line">    Dijkstra(n, s);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dist[e];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="K-Counting-Time"><a href="#K-Counting-Time" class="headerlink" title="K - Counting Time"></a>K - Counting Time</h3><h4 id="题意：给一个九宫格的初始状态-填完这个九宫格使得每个数字x能跳到x-1的方案有多少种-能跳到的区域为八连通-且x只能跳到x-1"><a href="#题意：给一个九宫格的初始状态-填完这个九宫格使得每个数字x能跳到x-1的方案有多少种-能跳到的区域为八连通-且x只能跳到x-1" class="headerlink" title="题意：给一个九宫格的初始状态 填完这个九宫格使得每个数字x能跳到x+1的方案有多少种 能跳到的区域为八连通 且x只能跳到x+1"></a>题意：给一个九宫格的初始状态 填完这个九宫格使得每个数字x能跳到x+1的方案有多少种 能跳到的区域为八连通 且x只能跳到x+1</h4><h4 id="题解：dfs"><a href="#题解：dfs" class="headerlink" title="题解：dfs"></a>题解：dfs</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">15</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; msk;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == vec.size())&#123;</span><br><span class="line">        <span class="keyword">bool</span> dj = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(b[i][j] == <span class="number">9</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; <span class="number">8</span>; z++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> xx = i+dx[z], yy = j+dy[z];</span><br><span class="line">                    <span class="keyword">if</span>(xx&lt;<span class="number">0</span> || xx&gt;=<span class="number">3</span> || yy&lt;<span class="number">0</span> || yy&gt;=<span class="number">3</span>)<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(b[xx][yy] == b[i][j]+<span class="number">1</span>)f=<span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!f) dj = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!dj)ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            vis[i]++;</span><br><span class="line">            b[vec[x].first][vec[x].second] = i;</span><br><span class="line">            dfs(x+<span class="number">1</span>);</span><br><span class="line">            vis[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]!=<span class="string">'0'</span>) vis[a[i][j]-<span class="string">'0'</span>]++;</span><br><span class="line">            <span class="keyword">else</span> vec.push_back(&#123;i,j&#125;);</span><br><span class="line">            b[i][j] = a[i][j]-<span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-So-You-Think-You-Can-Count"><a href="#B-So-You-Think-You-Can-Count" class="headerlink" title="B - So You Think You Can Count?"></a>B - So You Think You Can Count?</h3><h4 id="题意：把一个字符串分成若干段，每一段里面的字符不能重复，问有多少种分法"><a href="#题意：把一个字符串分成若干段，每一段里面的字符不能重复，问有多少种分法" class="headerlink" title="题意：把一个字符串分成若干段，每一段里面的字符不能重复，问有多少种分法"></a>题意：把一个字符串分成若干段，每一段里面的字符不能重复，问有多少种分法</h4><h4 id="题解：-动态规划，定义dp-表示字符串前n个字母的分法种数，先预处理字符串，对于每个字符，计算出以这个字符为结尾的无重复字符的一段最长的长度，第i个字符对应的长度记为f-i-然后可以得出递推式：dp-0-1-dp-i-dp-i-j-1-lt-j-lt-10"><a href="#题解：-动态规划，定义dp-表示字符串前n个字母的分法种数，先预处理字符串，对于每个字符，计算出以这个字符为结尾的无重复字符的一段最长的长度，第i个字符对应的长度记为f-i-然后可以得出递推式：dp-0-1-dp-i-dp-i-j-1-lt-j-lt-10" class="headerlink" title="题解： 动态规划，定义dp 表示字符串前n个字母的分法种数，先预处理字符串，对于每个字符，计算出以这个字符为结尾的无重复字符的一段最长的长度，第i个字符对应的长度记为f[i]然后可以得出递推式：dp[0]=1;dp[i]=dp[i-j] (1&lt;=j&lt;=10)"></a>题解： 动态规划，定义dp 表示字符串前n个字母的分法种数，先预处理字符串，对于每个字符，计算出以这个字符为结尾的无重复字符的一段最长的长度，第i个字符对应的长度记为f[i]然后可以得出递推式：dp[0]=1;dp[i]=dp[i-j] (1&lt;=j&lt;=10)</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000</span>*<span class="number">1000</span>*<span class="number">1000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn];<span class="keyword">int</span> vis[<span class="number">10</span>];<span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; str &lt;&lt;endl;</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &gt;= <span class="number">1</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[str[j] - <span class="string">'0'</span>])<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                vis[str[j] - <span class="string">'0'</span>] = <span class="number">1</span>;</span><br><span class="line">                dp[i] = (dp[i] + dp[j<span class="number">-1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="补题："><a href="#补题：" class="headerlink" title="补题："></a>补题：</h3><h4 id="A-On-The-Way-to-Lucky-Plaza"><a href="#A-On-The-Way-to-Lucky-Plaza" class="headerlink" title="A - On The Way to Lucky Plaza"></a>A - On The Way to Lucky Plaza</h4><h5 id="题意：m个店-每个店可以买一个小球的概率为p-求恰好在第m个店买到k个小球的概率"><a href="#题意：m个店-每个店可以买一个小球的概率为p-求恰好在第m个店买到k个小球的概率" class="headerlink" title="题意：m个店 每个店可以买一个小球的概率为p 求恰好在第m个店买到k个小球的概率"></a>题意：m个店 每个店可以买一个小球的概率为p 求恰好在第m个店买到k个小球的概率</h5><h5 id="思路：概率dp，利用了线性性。第i个店买到第k1个球是-由-第i-1个点买了k1-1个球乘p得到。两个点：逆元用一下，存在精度问题。"><a href="#思路：概率dp，利用了线性性。第i个店买到第k1个球是-由-第i-1个点买了k1-1个球乘p得到。两个点：逆元用一下，存在精度问题。" class="headerlink" title="思路：概率dp，利用了线性性。第i个店买到第k1个球是 由 第i-1个点买了k1-1个球乘p得到。两个点：逆元用一下，存在精度问题。"></a>思路：概率dp，利用了线性性。第i个店买到第k1个球是 由 第i-1个点买了k1-1个球乘p得到。两个点：逆元用一下，存在精度问题。</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, x, y) for (decay<span class="meta-string">&lt;decltype(y)&gt;::type i = (x), _##i = (y); i &lt; _##i; ++i)</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n, m ,k ,inv[maxn];</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(y)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>)res = res * x % mod;</span><br><span class="line">        x = x*x%mod;</span><br><span class="line">        y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn;i++)</span><br><span class="line">        inv[i] = pow_mod(i , mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">    ll P = (ll)(<span class="number">1000</span>*p+eps);</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    FOR(i ,<span class="number">1</span> , k)ans = ans * inv[i] % mod * (n-i) %mod;</span><br><span class="line">    FOR(i,<span class="number">1</span>,k+<span class="number">1</span>)ans = ans * P % mod;</span><br><span class="line">    FOR(i,<span class="number">1</span>,n-k+<span class="number">1</span>)ans = ans*(<span class="number">1000</span>-P)%mod;</span><br><span class="line">    FOR(i,<span class="number">1</span>,n+<span class="number">1</span>)ans=ans*inv[<span class="number">1000</span>]%mod;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #3：2017ICPC沈阳站</title>
    <url>/2019/09/21/TeamRound3/</url>
    <content><![CDATA[<p>Team Round(Training)系列：每周六12：15-17：15</p>
<p>这一场是在9月21日打的，是2017ICPC沈阳站(搬题人：Wqr_<del>(威威大毒瘤，dqy都自闭了)</del>)</p>
<p>写了KIF </p>
<p>就感觉思路不够开阔把，有点盲目自信，认为现场赛很多人过了就不难，把题目想的简单化。</p>
<h2 id="K-左右各扫一次"><a href="#K-左右各扫一次" class="headerlink" title="K:左右各扫一次"></a>K:左右各扫一次</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-21 12:17:21</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> t ;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n ;</span><br><span class="line">		<span class="built_in">cin</span>  &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//sort(a, a+n);</span></span><br><span class="line">		<span class="keyword">int</span> ans1 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i] - a[i<span class="number">-1</span>] &gt; <span class="number">1</span>)ans1 += (a[i] - a[i<span class="number">-1</span>] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">2</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i] - a[i<span class="number">-1</span>] &gt; <span class="number">1</span>)ans2 += (a[i] - a[i<span class="number">-1</span>] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans = max(ans1,ans2);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<h2 id="I：大数加法-求a-b-c-d-a-b-c-d在2-62范围内"><a href="#I：大数加法-求a-b-c-d-a-b-c-d在2-62范围内" class="headerlink" title="I：大数加法 求a+b+c+d a,b,c,d在2^62范围内"></a>I：大数加法 求a+b+c+d a,b,c,d在2^62范围内</h2><p>java代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        t--;</span><br><span class="line">        BigInteger a = sc.nextBigInteger();</span><br><span class="line">        BigInteger b = sc.nextBigInteger();</span><br><span class="line">        BigInteger c = sc.nextBigInteger();</span><br><span class="line">        BigInteger d = sc.nextBigInteger();</span><br><span class="line">        BigInteger out = BigInteger.ZERO;</span><br><span class="line">        out = out.add(a);</span><br><span class="line">        out = out.add(b);</span><br><span class="line">        out = out.add(c);</span><br><span class="line">        out = out.add(d);</span><br><span class="line">        System.out.println(out.toString());</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>事实上数据给的是ull范围，处理一下2^64就行了</p>
<p>cpp代码1：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ULL a, b, c, d, maxv = ((ULL)<span class="number">1</span> &lt;&lt; <span class="number">62</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%llu%llu%llu%llu"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        <span class="keyword">if</span>(a == maxv &amp;&amp; b == maxv &amp;&amp; c == maxv &amp;&amp; d == maxv)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"18446744073709551616\n"</span>); <span class="comment">// 4个2^62之和</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, a + b + c + d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>cpp模拟加法写法：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 0x3f3f3f3f;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Min 0xc0c0c0c0;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a) memset(a,0,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f(i,a,b) for(int i=a;i&lt;b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line">ll temp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">char</span>* a,<span class="keyword">char</span>* b,<span class="keyword">char</span>* c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,max,min,temp;</span><br><span class="line">    <span class="keyword">char</span> *s,*pmax,*pmin;</span><br><span class="line">    max=<span class="built_in">strlen</span>(a);</span><br><span class="line">    min=<span class="built_in">strlen</span>(b);</span><br><span class="line">    <span class="keyword">if</span> (max&lt;min)</span><br><span class="line">    &#123;</span><br><span class="line">        temp=max;</span><br><span class="line">        max=min;</span><br><span class="line">        min=temp;</span><br><span class="line">        pmax=b;</span><br><span class="line">        pmin=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pmax=a;</span><br><span class="line">        pmin=b;</span><br><span class="line">    &#125;</span><br><span class="line">    s=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(max+<span class="number">1</span>));</span><br><span class="line">    s[<span class="number">0</span>]=<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=min<span class="number">-1</span>,j=max<span class="number">-1</span>,k=max;i&gt;=<span class="number">0</span>;i--,j--,k--)</span><br><span class="line">        s[k]=pmin[i]-<span class="string">'0'</span>+pmax[j];</span><br><span class="line">       <span class="keyword">for</span> (;j&gt;=<span class="number">0</span>;j--,k--)</span><br><span class="line">           s[k]=pmax[j];</span><br><span class="line">    <span class="keyword">for</span> (i=max;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[i]-=<span class="number">10</span>;</span><br><span class="line">            s[i<span class="number">-1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=max;i++)</span><br><span class="line">            c[i<span class="number">-1</span>]=s[i];</span><br><span class="line">           c[i<span class="number">-1</span>]=<span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=max;i++)</span><br><span class="line">            c[i]=s[i];</span><br><span class="line">           c[i]=<span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            <span class="keyword">char</span> a[<span class="number">105</span>],b[<span class="number">105</span>],c[<span class="number">105</span>],d[<span class="number">105</span>],ans[<span class="number">105</span>];</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">            add(a,b,ans);</span><br><span class="line">            add(ans,c,ans);</span><br><span class="line">            add(ans,d,ans);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「html_11」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/qq1013459920/article/details/82634156</span></span><br></pre></td></tr></table></figure></p>
<p>cpp代码3：long double 就行了<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  ll long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line">ll a[maxn], b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    scan();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">0</span>) &lt;&lt; (a + b + c + d) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「布呗之路」的原创文章，遵循 CC <span class="number">4.0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:<span class="comment">//blog.csdn.net/hypHuangYanPing/article/details/99694803</span></span><br></pre></td></tr></table></figure></p>
<h2 id="F-打表找规律"><a href="#F-打表找规律" class="headerlink" title="F:打表找规律"></a>F:打表找规律</h2><p>我写这道题时候打表打的有点多，到后面很迷惑人，double出锅，如果只看前几项<del>容易得到</del> a[n] = 4*a[n-1] - a[n] - 2;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        BigInteger bigint[] = <span class="keyword">new</span> BigInteger [<span class="number">160</span>];</span><br><span class="line">        bigint[<span class="number">1</span>] = <span class="keyword">new</span> BigInteger(<span class="string">"4"</span>);</span><br><span class="line">        bigint[<span class="number">2</span>] = <span class="keyword">new</span> BigInteger(<span class="string">"14"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">155</span>; i++)&#123;</span><br><span class="line">            bigint[i] = bigint[i-<span class="number">1</span>].multiply(BigInteger.valueOf(<span class="number">4</span>)).subtract(bigint[i-<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        t = cin.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            t = t-<span class="number">1</span>;</span><br><span class="line">            BigInteger n;</span><br><span class="line">            n = cin.nextBigInteger();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * if(n.equals(BigInteger.valueOf(1)) || n.equals(BigInteger.valueOf(2)))&#123;</span></span><br><span class="line"><span class="comment">             * System.out.println(-1); continue;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">150</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bigint[i].compareTo(n) == <span class="number">1</span> || bigint[i].compareTo(n) == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(bigint[i].toString());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附c++大数模板</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,n) for(int i=a;i&lt;n;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,a,n) for(int i=n-1;i&gt;=a;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// base and base_digits must be consistent</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> base = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> base_digits = <span class="number">9</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bigint</span>&#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; z;</span><br><span class="line">    <span class="keyword">int</span> sign;</span><br><span class="line">    bigint() : sign(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">    bigint(<span class="keyword">long</span> <span class="keyword">long</span> v) &#123; *<span class="keyword">this</span> = v; &#125;</span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>=(<span class="keyword">long</span> <span class="keyword">long</span> v)</span><br><span class="line">    &#123;</span><br><span class="line">        sign = v &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        v*=sign;</span><br><span class="line">        z.clear();</span><br><span class="line">        <span class="keyword">for</span>(; v &gt; <span class="number">0</span>; v = v / base) z.push_back((<span class="keyword">int</span>)(v % base));</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s) &#123; read(s); &#125;</span><br><span class="line"></span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> bigint&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sign == other.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; other.z.size() || carry; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==z.size()) z.push_back(<span class="number">0</span>);</span><br><span class="line">                z[i] += carry + (i &lt; other.z.size() ? other.z[i] : <span class="number">0</span>);</span><br><span class="line">                carry = z[i] &gt;= base;</span><br><span class="line">                <span class="keyword">if</span>(carry) z[i] -= base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (other != <span class="number">0</span> <span class="comment">/* prevent infinite loop */</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *<span class="keyword">this</span> -= -other;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> bigint <span class="keyword">operator</span>+(bigint a, <span class="keyword">const</span> bigint&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a += b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> bigint&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sign == other.sign)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sign == <span class="number">1</span> &amp;&amp; *<span class="keyword">this</span> &gt;= other || sign == <span class="number">-1</span> &amp;&amp; *<span class="keyword">this</span> &lt;= other)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; other.z.size() || carry; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    z[i] -= carry + (i &lt; other.z.size() ? other.z[i] : <span class="number">0</span>);</span><br><span class="line">                    carry = z[i] &lt; <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(carry) z[i] += base;</span><br><span class="line">                &#125;</span><br><span class="line">                trim();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                *<span class="keyword">this</span> = other - *<span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">this</span>-&gt;sign = -<span class="keyword">this</span>-&gt;sign;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> *<span class="keyword">this</span> += -other;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> bigint <span class="keyword">operator</span> - (bigint a,<span class="keyword">const</span> bigint&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a -= b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>*=(<span class="keyword">int</span> v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v&lt;<span class="number">0</span>) sign=-sign,v=-v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,carry=<span class="number">0</span>;i&lt;z.size() || carry;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==z.size()) z.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> cur = (<span class="keyword">long</span> <span class="keyword">long</span>)z[i] * v + carry;</span><br><span class="line">            carry = (<span class="keyword">int</span>)(cur / base);</span><br><span class="line">            z[i] = (<span class="keyword">int</span>)(cur % base);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint <span class="keyword">operator</span>*(<span class="keyword">int</span> v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bigint(*<span class="keyword">this</span>) *= v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    friend pair&lt;bigint, bigint&gt; divmod(const bigint&amp; a1, const bigint&amp; b1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> norm = base / (b1.z.back() + <span class="number">1</span>);</span><br><span class="line">        bigint a = a1.<span class="built_in">abs</span>() * norm;</span><br><span class="line">        bigint b = b1.<span class="built_in">abs</span>() * norm;</span><br><span class="line">        bigint q, r;</span><br><span class="line">        q.z.resize(a.z.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)a.z.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            r*=base; r+=a.z[i];</span><br><span class="line">            <span class="keyword">int</span> s1 = b.z.size() &lt; r.z.size() ? r.z[b.z.size()] : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> s2 = b.z.size() - <span class="number">1</span> &lt; r.z.size() ? r.z[b.z.size() - <span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> d = (<span class="keyword">int</span>)(((<span class="keyword">long</span> <span class="keyword">long</span>)s1 * base + s2) / b.z.back());</span><br><span class="line">            r -= b * d;</span><br><span class="line">            <span class="keyword">while</span>(r &lt; <span class="number">0</span>) r+=b,--d;</span><br><span class="line">            q.z[i] = d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.sign = a1.sign * b1.sign;</span><br><span class="line">        r.sign = a1.sign;</span><br><span class="line">        q.trim();</span><br><span class="line">        r.trim();</span><br><span class="line">        <span class="keyword">return</span> &#123;q, r / norm&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bigint <span class="title">sqrt</span><span class="params">(<span class="keyword">const</span> bigint&amp; a1)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bigint a=a1;</span><br><span class="line">        <span class="keyword">while</span>(a.z.empty()||a.z.size()%<span class="number">2</span>==<span class="number">1</span>) a.z.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = a.z.size();</span><br><span class="line">        <span class="keyword">int</span> firstDigit = (<span class="keyword">int</span>)::<span class="built_in">sqrt</span>((<span class="keyword">double</span>)a.z[n - <span class="number">1</span>] * base + a.z[n - <span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">int</span> norm = base / (firstDigit + <span class="number">1</span>);</span><br><span class="line">        a *= norm;</span><br><span class="line">        a *= norm;</span><br><span class="line">        <span class="keyword">while</span>(a.z.empty()||a.z.size()%<span class="number">2</span>==<span class="number">1</span>) a.z.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        bigint r = (<span class="keyword">long</span> <span class="keyword">long</span>)a.z[n - <span class="number">1</span>] * base + a.z[n - <span class="number">2</span>];</span><br><span class="line">        firstDigit = (<span class="keyword">int</span>)::<span class="built_in">sqrt</span>((<span class="keyword">double</span>)a.z[n - <span class="number">1</span>] * base + a.z[n - <span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">int</span> q = firstDigit;</span><br><span class="line">        bigint res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n / <span class="number">2</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(;;--q)</span><br><span class="line">            &#123;</span><br><span class="line">                bigint r1=(r-(res*<span class="number">2</span>*base+q)*q)*base*base+(j&gt;<span class="number">0</span>?(<span class="keyword">long</span> <span class="keyword">long</span>)a.z[<span class="number">2</span>*j<span class="number">-1</span>]*base+a.z[<span class="number">2</span>*j<span class="number">-2</span>]:<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span>(r1&gt;=<span class="number">0</span>) &#123; r=r1; <span class="keyword">break</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res*=base;res+=q;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d1 = res.z.size() + <span class="number">2</span> &lt; r.z.size() ? r.z[res.z.size() + <span class="number">2</span>] : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> d2 = res.z.size() + <span class="number">1</span> &lt; r.z.size() ? r.z[res.z.size() + <span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> d3 = res.z.size() &lt; r.z.size() ? r.z[res.z.size()]:<span class="number">0</span>;</span><br><span class="line">                q = (<span class="keyword">int</span>)(((<span class="keyword">long</span> <span class="keyword">long</span>)d1*base*base+(<span class="keyword">long</span> <span class="keyword">long</span>)d2*base+d3)/(firstDigit*<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.trim();</span><br><span class="line">        <span class="keyword">return</span> res / norm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint <span class="keyword">operator</span>/(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> divmod(*<span class="keyword">this</span>, v).first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint <span class="keyword">operator</span>%(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> divmod(*<span class="keyword">this</span>, v).second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>/=(<span class="keyword">int</span> v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v&lt;<span class="number">0</span>) sign=-sign,v=-v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)z.size() - <span class="number">1</span>, rem = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> cur = z[i] + rem * (<span class="keyword">long</span> <span class="keyword">long</span>)base;</span><br><span class="line">            z[i] = (<span class="keyword">int</span>)(cur / v);</span><br><span class="line">            rem = (<span class="keyword">int</span>)(cur % v);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint <span class="keyword">operator</span>/(<span class="keyword">int</span> v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> bigint(*<span class="keyword">this</span>) /= v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>%(<span class="keyword">int</span> v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v&lt;<span class="number">0</span>) v=-v;</span><br><span class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)z.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) m=(<span class="keyword">int</span>)((z[i]+m*(<span class="keyword">long</span> <span class="keyword">long</span>)base)%v);</span><br><span class="line">        <span class="keyword">return</span> m * sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> bigint&amp; v)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> * v;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint&amp; <span class="keyword">operator</span>/=(<span class="keyword">const</span> bigint&amp; v)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span> = *<span class="keyword">this</span> / v;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sign!=v.sign) <span class="keyword">return</span> sign &lt; v.sign;</span><br><span class="line">        <span class="keyword">if</span>(z.size()!=v.z.size()) <span class="keyword">return</span> z.size()*sign&lt;v.z.size()*v.sign;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)z.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span>(z[i] != v.z[i])  <span class="keyword">return</span> z[i] * sign &lt; v.z[i] * sign;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(v &lt; *<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; v); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; v) &amp;&amp; !(v &lt; *<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> &lt; v || v &lt; *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">trim</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!z.empty() &amp;&amp; z.back() == <span class="number">0</span>) z.pop_back();</span><br><span class="line">        <span class="keyword">if</span>(z.empty()) sign = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isZero</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> z.empty(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> bigint <span class="keyword">operator</span>-(bigint v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v.z.empty()) v.sign = -v.sign;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">bigint <span class="title">abs</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sign == <span class="number">1</span> ? *<span class="keyword">this</span> : -*<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)z.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) res = res * base + z[i];</span><br><span class="line">        <span class="keyword">return</span> res * sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bigint <span class="title">gcd</span><span class="params">(<span class="keyword">const</span> bigint&amp; a, <span class="keyword">const</span> bigint&amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b.isZero() ? a : gcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> bigint <span class="title">lcm</span><span class="params">(<span class="keyword">const</span> bigint&amp; a, <span class="keyword">const</span> bigint&amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sign = <span class="number">1</span>;</span><br><span class="line">        z.clear();</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos &lt; s.size() &amp;&amp; (s[pos] == <span class="string">'-'</span> || s[pos] == <span class="string">'+'</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[pos] == <span class="string">'-'</span>) sign = -sign;</span><br><span class="line">            ++pos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)s.size()<span class="number">-1</span>;i&gt;=pos;i-=base_digits)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=max(pos,i-base_digits+<span class="number">1</span>);j&lt;=i;j++) x=x*<span class="number">10</span>+s[j]-<span class="string">'0'</span>;</span><br><span class="line">            z.push_back(x);</span><br><span class="line">        &#125;</span><br><span class="line">        trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; stream, bigint&amp; v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        stream &gt;&gt; s;</span><br><span class="line">        v.read(s);</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; stream, <span class="keyword">const</span> bigint&amp; v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v.sign == <span class="number">-1</span>) stream &lt;&lt; <span class="string">'-'</span>;</span><br><span class="line">        stream &lt;&lt; (v.z.empty() ? <span class="number">0</span> : v.z.back());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)v.z.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">            stream &lt;&lt; setw(base_digits) &lt;&lt; setfill(<span class="string">'0'</span>) &lt;&lt; v.z[i];</span><br><span class="line">        <span class="keyword">return</span> stream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">convert_base</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> old_digits, <span class="keyword">int</span> new_digits)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">p</span><span class="params">(max(old_digits, new_digits) + <span class="number">1</span>)</span></span>;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p.size();i++) p[i]=p[i<span class="number">-1</span>]*<span class="number">10</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur_digits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v : a)</span><br><span class="line">        &#123;</span><br><span class="line">            cur += v * p[cur_digits];</span><br><span class="line">            cur_digits += old_digits;</span><br><span class="line">            <span class="keyword">while</span> (cur_digits &gt;= new_digits)</span><br><span class="line">            &#123;</span><br><span class="line">                res.push_back(<span class="keyword">int</span>(cur % p[new_digits]));</span><br><span class="line">                cur /= p[new_digits];</span><br><span class="line">                cur_digits -= new_digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.push_back((<span class="keyword">int</span>)cur);</span><br><span class="line">        <span class="keyword">while</span>(!res.empty() &amp;&amp; res.back()==<span class="number">0</span>)</span><br><span class="line">            res.pop_back();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; vll;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> vll <span class="title">karatsubaMultiply</span><span class="params">(<span class="keyword">const</span> vll&amp; a, <span class="keyword">const</span> vll&amp; b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.size();</span><br><span class="line">        <span class="function">vll <span class="title">res</span><span class="params">(n + n)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">32</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    res[i + j] += a[i] * b[j];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> k = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="function">vll <span class="title">a1</span><span class="params">(a.begin(), a.begin() + k)</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">a2</span><span class="params">(a.begin() + k, a.end())</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">b1</span><span class="params">(b.begin(), b.begin() + k)</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">b2</span><span class="params">(b.begin() + k, b.end())</span></span>;</span><br><span class="line">        vll a1b1 = karatsubaMultiply(a1, b1);</span><br><span class="line">        vll a2b2 = karatsubaMultiply(a2, b2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) a2[i]+=a1[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++) b2[i]+=b1[i];</span><br><span class="line"></span><br><span class="line">        vll r = karatsubaMultiply(a2, b2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a1b1.size();i++) r[i]-=a1b1[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a2b2.size();i++) r[i]-=a2b2[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r.size();i++) res[i+k]+=r[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a1b1.size();i++) res[i]+=a1b1[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;a2b2.size();i++) res[i+n]+=a2b2[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bigint <span class="keyword">operator</span>*(<span class="keyword">const</span> bigint&amp; v) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a6=convert_base(<span class="keyword">this</span>-&gt;z,base_digits,<span class="number">6</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b6=convert_base(v.z,base_digits,<span class="number">6</span>);</span><br><span class="line">        <span class="function">vll <span class="title">a</span><span class="params">(a6.begin(),a6.end())</span></span>;</span><br><span class="line">        <span class="function">vll <span class="title">b</span><span class="params">(b6.begin(),b6.end())</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(a.size()&lt;b.size()) a.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(b.size()&lt;a.size()) b.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(a.size()&amp;(a.size()<span class="number">-1</span>)) a.push_back(<span class="number">0</span>),b.push_back(<span class="number">0</span>);</span><br><span class="line">        vll c=karatsubaMultiply(a, b);</span><br><span class="line">        bigint res;</span><br><span class="line">        res.sign = sign * v.sign;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, carry = <span class="number">0</span>; i &lt; c.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> cur = c[i] + carry;</span><br><span class="line">            res.z.push_back((<span class="keyword">int</span>)(cur % <span class="number">1000000</span>));</span><br><span class="line">            carry = (<span class="keyword">int</span>)(cur / <span class="number">1000000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.z = convert_base(res.z, <span class="number">6</span>, base_digits);</span><br><span class="line">        res.trim();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">bigint <span class="title">qpow</span><span class="params">(bigint a,bigint b)</span></span>&#123;</span><br><span class="line">    bigint ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">2</span>)&#123;</span><br><span class="line">            ans= ans*a;</span><br><span class="line">        &#125;</span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">        a= a*a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    bigint a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    Matrix()</span><br><span class="line">    &#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">2</span>)&#123;</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">2</span>)&#123;</span><br><span class="line">                a[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix y)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                    ans.a[i][j] = ans.a[i][j] + (a[i][k]*y.a[k][j]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> = (<span class="keyword">const</span> Matrix y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">                a[i][j]=y.a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span> *= (<span class="keyword">const</span> Matrix y)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">                    ans.a[i][j] = ans.a[i][j] + (a[i][k]*y.a[k][j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">                a[i][j]=ans.a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(bigint x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix ans;</span><br><span class="line">    ans.a[<span class="number">0</span>][<span class="number">0</span>]=ans.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>; <span class="comment">//单位矩阵</span></span><br><span class="line">    Matrix mul;</span><br><span class="line">    mul.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">4</span>;</span><br><span class="line">    mul.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    mul.a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    mul.a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">            ans = ans*mul;</span><br><span class="line">        mul = mul* mul;</span><br><span class="line">        x/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">bigint ans[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ans[<span class="number">0</span>]=(bigint)<span class="number">4</span>;</span><br><span class="line">    ans[<span class="number">1</span>]=(bigint)<span class="number">14</span>;</span><br><span class="line">    ans[<span class="number">2</span>]=(bigint)<span class="number">52</span>;</span><br><span class="line">    rep(i,<span class="number">2</span>,<span class="number">200</span>)&#123;</span><br><span class="line">        ans[i]=(bigint)<span class="number">4</span>*ans[i<span class="number">-1</span>]-ans[i<span class="number">-2</span>];</span><br><span class="line"><span class="comment">//        cout&lt;&lt;ans[i]&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        bigint n;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">200</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[i]&gt;=n)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="补题："><a href="#补题：" class="headerlink" title="补题："></a>补题：</h2><h3 id="L题："><a href="#L题：" class="headerlink" title="L题："></a>L题：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 201000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> n,m,sz[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getsize</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[x].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=g[x][i];</span><br><span class="line">        <span class="keyword">if</span> (y==fa) <span class="keyword">continue</span>;</span><br><span class="line">        getsize(y,x); sz[x]+=sz[y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T_T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T_T;</span><br><span class="line">    <span class="keyword">while</span>(T_T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            g[u].push_back(v);</span><br><span class="line">            g[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        getsize(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (sz[i]&gt;=m&amp;&amp;n-sz[i]&gt;=m) ans++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
        <tag>ICPC/CCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hdu6237分解质因数</title>
    <url>/2019/09/20/Hdu6237%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0/</url>
    <content><![CDATA[<p>我觉得这道题挺有意思的，很多人把这道题标签设置欧拉函数，不是很理解。。</p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6237" target="_blank" rel="noopener">2017ccpc哈尔滨数论题</a></p>
<h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>现在有n堆石子，且已知每堆石子的数量，每次操作你可以从任一堆中取一颗石子放到另一堆中，问最少操作几次使得每一堆石子的数量均是某一个数的倍数。即n个数都有一个公因子,a[i]%x==0 (x &gt; 1)</p>
<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>求出所有数之和sum，<del>显然</del>x一定要是sum的约数，并且最优解时x一定可以是质数</p>
<p>显然这样的x最多不超过30个，所以可以暴力枚举所有满足上述条件的x</p>
<p>处理的时候算出所有的b[i] = a[i]-a[i]/x*x</p>
<p>然后将b[]从大到小排序，遍历一遍就可以得出当前最小移动次数</p>
<p>所有移动次数中取最小就是答案</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-18 16:39:45</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,sum,cnt;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],prime[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(prime,<span class="number">0</span>,<span class="keyword">sizeof</span>(prime));</span><br><span class="line">	cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> maxx = <span class="built_in">sqrt</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxx; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x%i==<span class="number">0</span>)prime[cnt++] = i;</span><br><span class="line">		<span class="keyword">while</span>(x&amp;&amp;((x%i)==<span class="number">0</span>))&#123;</span><br><span class="line">			x /= i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x &gt; <span class="number">1</span>)prime[cnt++] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> t ;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">			sum += a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		get_prime(sum);</span><br><span class="line">		<span class="keyword">int</span> ans = linf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> min_ = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> zz = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n;k++)&#123;</span><br><span class="line">				b[k] = a[k] % prime[i];</span><br><span class="line">				zz += b[k];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(zz % prime[i] != <span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">			sort(b+<span class="number">1</span>, b+n+<span class="number">1</span>, greater&lt;<span class="keyword">int</span> &gt;());</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = zz / prime[i] +<span class="number">1</span>; k &lt;= n;k++)&#123;</span><br><span class="line">				min_ += b[k];</span><br><span class="line">				<span class="keyword">if</span>(b[k] == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			ans = min(ans, min_);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>hdu</tag>
        <tag>Number Theory</tag>
        <tag>分解质因数</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #2：2018CCPC吉林站</title>
    <url>/2019/09/20/TeamRound2/</url>
    <content><![CDATA[<p>Team Round(Training)系列：每周六12：15-17：15</p>
<p>这一场是在9月14日打的，是2018CCPC吉林站(搬题人：dqy_)<br><a href="http://acm.hdu.edu.cn/search.php?field=problem&amp;key=2018CCPC%BC%AA%C1%D6%C8%FC%C7%F8%A3%A8%D6%D8%CF%D6%C8%FC%A3%A9-+%B8%D0%D0%BB%B1%B1%BB%AA%B4%F3%D1%A7&amp;source=1&amp;searchmode=source" target="_blank" rel="noopener">传送门</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Name</th>
<th style="text-align:center">Origin</th>
<th style="text-align:center">Solved</th>
<th style="text-align:center">Upsolved</th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
<th style="text-align:center">F</th>
<th style="text-align:center">G</th>
<th style="text-align:center">H</th>
<th style="text-align:center">I</th>
<th style="text-align:center">J</th>
<th style="text-align:center">K</th>
<th style="text-align:center">L</th>
<th style="text-align:center">M</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">#2</td>
<td style="text-align:center">2018 CCPC吉林站</td>
<td style="text-align:center">4/12</td>
<td style="text-align:center">2/8</td>
<td style="text-align:center">O</td>
<td style="text-align:center">O</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">!Ø</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">O</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center">●</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>过了AFBI<br>总的来说有点可惜。应该多写几题的。</p>
<h3 id="A：打表找规律"><a href="#A：打表找规律" class="headerlink" title="A：打表找规律"></a>A：打表找规律</h3><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>打表看一下情况，签到题</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-14 12:16:59</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// odd  奇数</span></span><br><span class="line"><span class="comment">// even 偶数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dabiao</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x;i++)&#123;</span><br><span class="line">		sum += (x/i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sum &amp; <span class="number">1</span>)<span class="built_in">cout</span> &lt;&lt; x &lt;&lt;<span class="string">"step=====odd"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">"step=====even"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*for(int i = 1; i &lt;=100; i++)&#123;</span></span><br><span class="line"><span class="comment">		dabiao(i);</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= t;kase++)&#123;</span><br><span class="line">		<span class="keyword">int</span> n ;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">int</span> m = <span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">		<span class="keyword">if</span>(m &amp; <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"Case %d: odd\n"</span>, kase);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case %d: even\n"</span>, kase);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<h3 id="F-乱搞就过了"><a href="#F-乱搞就过了" class="headerlink" title="F:乱搞就过了"></a>F:乱搞就过了</h3><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>我们clone复现赛，然后我做完A之后不久发现F题很快被人过了，然后就看了，其实想不懂为什么，想了很久之后突然发现-2，然后和dqy说，他开始说再想想，到了40分钟之后真的忍不住了就交了，突然ac。</p>
<p>别人思路：<a href="https://blog.csdn.net/aiyouyou_/article/details/89790003" target="_blank" rel="noopener">csdn</a><br><img src="https://i.loli.net/2019/09/20/g69vuBU8zVw1l57.png" alt="转载自https://blog.csdn.net/aiyouyou_/article/details/89790003"></p>
<h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-14 12:28:20</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> t , n ;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= t;kase++)&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i] &gt; <span class="number">2</span>)ans ^= (a[i] - <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, kase,ans);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<h3 id="B题：模拟题"><a href="#B题：模拟题" class="headerlink" title="B题：模拟题"></a>B题：模拟题</h3><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p>有个坑点，好像是0点不一样</p>
<h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author : Wqr_</span></span><br><span class="line"><span class="comment">// Time : 19/09/14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="keyword">int</span> chour, cmin;</span><br><span class="line">    <span class="keyword">int</span> uhour;</span><br><span class="line">    <span class="keyword">int</span> thour;</span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d:%d"</span>, &amp;chour, &amp;cmin);</span><br><span class="line">        <span class="built_in">string</span> ap;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ap;</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="keyword">if</span>(chour == <span class="number">12</span> &amp;&amp; ap[<span class="number">0</span>] == <span class="string">'A'</span>)&#123;</span><br><span class="line">            chour = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ap[<span class="number">0</span>] == <span class="string">'P'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chour != <span class="number">12</span>)&#123;</span><br><span class="line">                chour += <span class="number">12</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'B'</span>)&#123;</span><br><span class="line">            uhour = chour - <span class="number">8</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'W'</span>)&#123;</span><br><span class="line">            uhour = chour + <span class="number">5</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'L'</span>)&#123;</span><br><span class="line">            uhour = chour;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>] == <span class="string">'M'</span>)&#123;</span><br><span class="line">            uhour = chour - <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="string">'B'</span>) &#123;</span><br><span class="line">            thour = uhour + <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="string">'W'</span>) &#123;</span><br><span class="line">            thour = uhour - <span class="number">5</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="string">'L'</span>) &#123;</span><br><span class="line">            thour = uhour;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b[<span class="number">0</span>] == <span class="string">'M'</span>) &#123;</span><br><span class="line">            thour = uhour + <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; "---" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; chour &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; uhour &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; thour &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; "---" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> tt = thour;</span><br><span class="line">        <span class="keyword">int</span> time;</span><br><span class="line">        <span class="keyword">int</span> pmam;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(tt &gt;= <span class="number">24</span>)&#123;</span><br><span class="line">            time = <span class="number">1</span>;</span><br><span class="line">            tt -= <span class="number">24</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tt &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            time = <span class="number">-1</span>;</span><br><span class="line">            tt += <span class="number">24</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            time = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tt &gt;= <span class="number">12</span>)&#123;</span><br><span class="line">            pmam = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(tt &gt; <span class="number">12</span>)&#123;</span><br><span class="line">                tt -= <span class="number">12</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pmam = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/******************/</span></span><br><span class="line">        <span class="comment">// yes</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; ++kase &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="keyword">if</span>(time == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yesterday "</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(time == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Today "</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(time == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tomorrow "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//hour</span></span><br><span class="line">        <span class="keyword">if</span>(tt == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tt == <span class="number">12</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; tt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">":"</span>;</span><br><span class="line">        <span class="comment">//min</span></span><br><span class="line">        <span class="keyword">if</span>(cmin &lt; <span class="number">10</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; cmin &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; cmin &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span>(pmam) <span class="built_in">cout</span> &lt;&lt; <span class="string">"PM"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"AM"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I题：贪心"><a href="#I题：贪心" class="headerlink" title="I题：贪心"></a>I题：贪心</h3><h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><p>看能不能过最高的， 用大的打小的。</p>
<p>Author：dqy_</p>
<h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], d[maxn];</span><br><span class="line">pii c[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; msk;</span><br><span class="line"></span><br><span class="line">VI vec1, vec2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//IOS;</span></span><br><span class="line">    <span class="comment">//IN;</span></span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">            d[i] = a[i];</span><br><span class="line">            msk[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(d, d+n);</span><br><span class="line">        sort(a, a+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)vec1.eb(b[i]);</span><br><span class="line">            <span class="keyword">else</span> vec2.eb(b[i]);</span><br><span class="line">            c[i] = &#123;b[i], x&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(c, c+m);</span><br><span class="line">        sort(all(vec2));</span><br><span class="line">        <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : vec2)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = it;</span><br><span class="line">            <span class="keyword">bool</span> kk = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> zz = lower_bound(a, a+n, tmp) - a;</span><br><span class="line">                <span class="keyword">if</span>(zz == n)&#123;</span><br><span class="line">                    f = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(msk[a[zz]])&#123;</span><br><span class="line">                        msk[a[zz]]--;</span><br><span class="line">                        kk = <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        tmp = a[zz]+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(kk)<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a, a+n, greater&lt;ll&gt;());</span><br><span class="line">        <span class="keyword">int</span> zz = <span class="number">0</span>;</span><br><span class="line">        ll ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i].se == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[zz]&lt;c[i].fi)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans1 += a[zz++]-c[i].fi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!f)&#123;</span><br><span class="line">            zz = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c[i].se == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = zz; j &lt; n; j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[j] &lt; c[i].fi)&#123;</span><br><span class="line">                            f = <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(msk[a[j]])&#123;</span><br><span class="line">                            msk[a[j]]--;</span><br><span class="line">                            ans2 += a[j]-c[i].fi;</span><br><span class="line">                            zz = j;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(f)<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == m)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                    ans2 += msk[a[i]]*a[i];</span><br><span class="line">                    msk[a[i]] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>, cnt++, max(ans1, ans2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>后面时间再想C和D，C题很接近正解了但是代码还是没实现，d题概率dp还没触及，有点可惜把。</p>
<p>八题金，六题银，四题铜  我们还需要努力啊，GKD！</p>
<p>赛后dqy_说：没有数据结构啊！(最近在搞数据结构，)然，，然而H题Lovers就是线段树😱…</p>
<p>就是要把题目都过一遍吧，听说赛中F题不是全场题，我们全靠歪的榜加上瞎猜过的。。要提升硬实力啊。</p>
<h3 id="补题："><a href="#补题：" class="headerlink" title="补题："></a>补题：</h3><h4 id="C题：码力不足啊小老弟"><a href="#C题：码力不足啊小老弟" class="headerlink" title="C题：码力不足啊小老弟"></a>C题：码力不足啊小老弟</h4><h5 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h5><p>给定一个序列k1,k2,k3…kn，每个代表1/(2^ki)要求把这n个数分成两堆，使得每一堆的值都大于1/2</p>
<h5 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h5><p>首先可以肯定，如果能凑成两个1，那么肯定有解，然后我们知道2个x，可以凑成一个(x-1)，</p>
<p>我们凑两个1</p>
<h5 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-17 20:00:35</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n , vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id , val;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t ;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= t;kase++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: "</span>, kase);</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; a[i].val;</span><br><span class="line">			a[i].id = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		sort(a+<span class="number">1</span> , a+<span class="number">1</span>+n , cmp);</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">1</span>,pre = <span class="number">1</span>,cnt2 = <span class="number">1</span>, cnt1= <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">			<span class="keyword">while</span>(cnt1+cnt2 &lt;= n+<span class="number">1</span>-i&amp;&amp;pre &lt; a[i].val)&#123;<span class="comment">//转化当前这个数字，更新需要的数量</span></span><br><span class="line">				cnt1 *= <span class="number">2</span>;</span><br><span class="line">				cnt2 *= <span class="number">2</span>;</span><br><span class="line">				pre++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(cnt1+cnt2 &gt; n-i+<span class="number">1</span>)&#123; <span class="comment">//剩下的数的数量无法满足</span></span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(cnt1)&#123;</span><br><span class="line">				cnt1--;</span><br><span class="line">				vis[a[i].id] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				cnt2--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!cnt1 &amp;&amp; !cnt2)<span class="keyword">break</span>;<span class="comment">//两个都满足了</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="number">0</span>||cnt1||cnt2)<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)<span class="built_in">cout</span>&lt;&lt;vis[i];</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<h4 id="D题：概率dp-GKD啊小xiongdei"><a href="#D题：概率dp-GKD啊小xiongdei" class="headerlink" title="D题：概率dp GKD啊小xiongdei"></a>D题：概率dp GKD啊小xiongdei</h4><h5 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h5><p>1.起初物品掉落率q=2%;</p>
<p>2.玩家进行一次游戏，有p的概率获胜。</p>
<p>3.如果获胜了，有q的概率掉落一个叫Beta Pack的物品。如果获胜，q+=2%;否则，q+=1.5%。</p>
<p>重复2和3。</p>
<p>求得到一个物品 进行游戏场次的期望。</p>
<h5 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h5><p>倒着推。1.5是小数，扩大两倍。没做过概率，，，好像是全场题。。。</p>
<h5 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//概率dp</span></span><br><span class="line"><span class="comment">//倒着推   </span></span><br><span class="line"><span class="comment">//因为q最高为100%，所以初始状态为dp[100]，但是因为如果游戏输了的话是p+1.5</span></span><br><span class="line"><span class="comment">//数组下标不能是小数， 整体扩大两倍，dp[200]  根据几何分布期望公式 dp[200]=1/p </span></span><br><span class="line"><span class="comment">//状态转移方程 ：dp[q] = p*(1-q)dp[min(q+4,400)]+(1-p)dp[min(q+3,200)]+1</span></span><br><span class="line"><span class="comment">//1是当前局，p*(1-q)dp[min(q+4,400)]为游戏获胜但是未中奖的期望，(1-p)dp[min(q+3,200)]为游戏失败时候的期望，</span></span><br><span class="line"><span class="comment">//三者之和为概率为q时候的期望</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//https://blog.csdn.net/qq_41746268/article/details/96170255</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>;kase &lt;= t;kase++)&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">		<span class="keyword">double</span> dp[<span class="number">300</span>] = &#123;<span class="number">0.0</span>&#125;;</span><br><span class="line">		p /= <span class="number">100</span>; </span><br><span class="line">		dp[<span class="number">200</span>] = <span class="number">1.0</span>/p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">199</span>; i &gt;= <span class="number">4</span>;i--)&#123;</span><br><span class="line">			dp[i] = <span class="number">1.0</span> + p*(<span class="number">1.0</span><span class="number">-1.0</span>*i/<span class="number">200</span>)*dp[min(i+<span class="number">4</span>,<span class="number">200</span>)] + (<span class="number">1.0</span>-p)*dp[min(i+<span class="number">3</span>,<span class="number">200</span>)]; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %.10f\n"</span>,kase, dp[<span class="number">4</span>] );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
        <tag>ICPC/CCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Team Round #1: 2019 USP-ICMC</title>
    <url>/2019/09/15/TeamRound1/</url>
    <content><![CDATA[<p>Team Round(Training)系列：每周六12：15-17：15<br>这一场是在9月7日打的，是我们队（Wqr<em>,dqy</em>, Orz btxdy）第一次gym的训练。正好周五凛冬将至训练了这套题，不想找题我就clone了一下。总的来讲难度不算太大。</p>
<p><img src="https://i.loli.net/2019/09/15/kXid4BASqUusaRl.png" alt="Status"><br><img src="https://i.loli.net/2019/09/15/POSkNdEJFhIACKi.png" alt="Status"><br>解了BDGAJF六题。</p>
<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a><a href="https://codeforces.com/gym/102302" target="_blank" rel="noopener">传送门</a></h2><h2 id="A题：单调栈"><a href="#A题：单调栈" class="headerlink" title="A题：单调栈"></a>A题：单调栈</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Author : Wqr_</span></span><br><span class="line"><span class="comment">// Time : 2019/9/7 12:29:41</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> iofuck std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> nmax = <span class="number">1e5</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> arr[nmax];</span><br><span class="line"><span class="keyword">int</span> dis[nmax];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    iofuck;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty() &amp;&amp; arr[i] &gt; arr[st.top()])&#123;</span><br><span class="line">                dis[st.top()] = i;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        st.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i = 0; i &lt; n; i++)&#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; dis[i] &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span>(dis[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; min(arr[i], n - i - <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i] &gt; arr[i] + i) &#123;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; arr[i] - i;</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; arr[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; dis[i] - i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="B题：因式分解"><a href="#B题：因式分解" class="headerlink" title="B题：因式分解"></a>B题：因式分解</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="comment">//IN;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i*i &lt;= a; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%b==<span class="number">0</span>)</span><br><span class="line">            vec.push_back(i);</span><br><span class="line">            <span class="keyword">if</span>(i*i!=a &amp;&amp; (a/i)%b==<span class="number">0</span>)vec.push_back(a/i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(vec.begin(), vec.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it : vec)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;it&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D题：找子序列"><a href="#D题：找子序列" class="headerlink" title="D题：找子序列"></a>D题：找子序列</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, len = <span class="built_in">strlen</span>(a), len2 = <span class="built_in">strlen</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == b[left])&#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left == len2)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(left == len2)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F题：冲冲冲！"><a href="#F题：冲冲冲！" class="headerlink" title="F题：冲冲冲！"></a>F题：冲冲冲！</h2><p>没看懂没想明白 交上去试试看突然ac的题目</p>
<ul>
<li>你会吗</li>
<li>不会 &ensp;那你会吗？</li>
<li>不会</li>
<li>那我感觉是这个答案，交一发把</li>
</ul>
<p>几十秒钟后………………<br>dqy🐮🍺<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-07 16:16:52</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">double</span> ans = <span class="number">1.0</span>*(<span class="number">1</span>+n)  / <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="G题：巧克力博弈"><a href="#G题：巧克力博弈" class="headerlink" title="G题：巧克力博弈"></a>G题：巧克力博弈</h2><p>严格说是sg博弈。<br>题意：有三堆石子，两个人轮流拿1~k个石子，谁先拿完谁就赢了。（如果这一堆石子左边堆里还有石子，那么你不能清空这个堆。）<br>找了几个小的数字之后感觉可以写。<br>往sg方向想，题意说左边堆会影响右边堆所以最左边堆不受影响，而2，3受影响。我们让第二堆，第三堆少一个石子，这样就没有了限制条件。<br>sg一下就行。wa了几发是因为写成if(p==0)。。。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-07 12:22:26</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Tomaz  </span></span><br><span class="line"><span class="comment">Danftito</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n , a, b , c;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a&gt;&gt; b&gt;&gt; c;</span><br><span class="line">	ll p = a % (n+<span class="number">1</span>);</span><br><span class="line">	ll q = (b<span class="number">-1</span>) % (n+<span class="number">1</span>);</span><br><span class="line">	ll r = (c<span class="number">-1</span>) % (n+<span class="number">1</span>);</span><br><span class="line">	ll ans = p^q^r;</span><br><span class="line">	<span class="keyword">if</span>(ans == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt;<span class="string">"Danftito"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">"Tomaz"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure></p>
<h2 id="J题：枚举中间的数的素数"><a href="#J题：枚举中间的数的素数" class="headerlink" title="J题：枚举中间的数的素数"></a>J题：枚举中间的数的素数</h2><p>这道题lct觉得他可以写，他枚举了第一个数和最后一个数字和中位数的左边右边的各一个素数  <del>感觉很对不可能wa</del></p>
<h3 id="lct-wa的写法"><a href="#lct-wa的写法" class="headerlink" title="lct wa的写法"></a>lct wa的写法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-07 12:16:43</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x &lt;= <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">//if(x == 0)return true;</span></span><br><span class="line">	<span class="keyword">for</span>(ll i = <span class="number">2</span>; i*i &lt;= x;i++ )&#123;</span><br><span class="line">		<span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n ;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(a, a+n);</span><br><span class="line">	ll ans = linf;</span><br><span class="line">	ll res = <span class="number">0</span>;</span><br><span class="line">	ll kk = a[<span class="number">0</span>]<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!isprime(kk))&#123;</span><br><span class="line">		kk--;</span><br><span class="line">		<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "1kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line"></span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[n<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!isprime(kk))&#123;</span><br><span class="line">		kk++;</span><br><span class="line">		<span class="comment">//if(kk &lt;= 2)break;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "2kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line"></span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!isprime(kk))&#123;</span><br><span class="line">		kk++;</span><br><span class="line">		<span class="comment">//if(kk &lt;= 2)break;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//if(kk &lt;= 2)kk=2;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "3kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line"></span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[n<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!isprime(kk))&#123;</span><br><span class="line">		kk--;</span><br><span class="line">		<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "4kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line"></span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[n/<span class="number">2</span>]<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!isprime(kk))&#123;</span><br><span class="line">		kk--;</span><br><span class="line">		<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "5kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line"></span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[n/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!isprime(kk))&#123;</span><br><span class="line">		kk++;</span><br><span class="line">		<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "6kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isprime(a[<span class="number">0</span>]))&#123;</span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "7kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isprime(a[n<span class="number">-1</span>]))&#123;</span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[n<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "8kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isprime(a[n/<span class="number">2</span>]))&#123;</span><br><span class="line">	res = <span class="number">0</span>;</span><br><span class="line">	kk = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">if</span>(kk &lt;= <span class="number">2</span>)kk=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		res += <span class="built_in">abs</span>(kk - a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "9kk ==="&lt;&lt;kk&lt;&lt;"    res ==="&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">	ans = min(res, ans);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<p>后来dqy提出可以多找几个最近的素数，复杂度也ok，lct表示赞同但是不想写。</p>
<p>然后dqy开始写，写了几发wa了。百思不得其<del>姐</del> 后来发现是中位数不会写。。<del>lj&ensp; dqy！！</del></p>
<h3 id="dqy-ac写法：枚举中间很多个素数-orz-dqy"><a href="#dqy-ac写法：枚举中间很多个素数-orz-dqy" class="headerlink" title="dqy ac写法：枚举中间很多个素数 orz dqy"></a>dqy ac写法：枚举中间很多个素数 orz dqy</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        res += <span class="built_in">abs</span>(a[i] - x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">2</span>; i*i &lt;= x;i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>, a+<span class="number">1</span>+n);</span><br><span class="line">    ll kk = a[(n+<span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line">    ll res = sum / n;</span><br><span class="line">    ll ans = INF;</span><br><span class="line">    ll sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = a[<span class="number">1</span>]; ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(solve(i), ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; INF)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = a[n]; i;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = res; ;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; INF)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = res; i;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a[<span class="number">1</span>]; i; i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a[n];  ; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; INF)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = kk;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; INF)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1==<span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = kk; ;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i))&#123;</span><br><span class="line">            sum1++;</span><br><span class="line">            ans = min(ans, solve(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt;= <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum1 == <span class="number">200</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="补题-：E-H"><a href="#补题-：E-H" class="headerlink" title="补题 ：E,H"></a>补题 ：E,H</h2><h3 id="E题-dp"><a href="#E题-dp" class="headerlink" title="E题:dp"></a>E题:dp</h3><p>这道题本来想最后半小时冲一下的，然后  后面就莫名放弃（提早下班）了…………</p>
<p>可以确定的是排序贪心搞一搞是不行的，dp写</p>
<h4 id="dqy写法"><a href="#dqy写法" class="headerlink" title="dqy写法"></a>dqy写法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false),cin.tie(0),cout.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN freopen(<span class="meta-string">"in.txt"</span>, <span class="meta-string">"r"</span>, stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowb lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(x) x.begin(),x.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)x.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem0(a) memset((a), 0, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; VL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">pii p[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">pii dp[maxn][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> dp2[maxn][<span class="number">6</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; msk;</span><br><span class="line">VI vec[maxn];</span><br><span class="line">VI v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        ans = max(ans, dp2[k<span class="number">-1</span>][i] + <span class="built_in">abs</span>(x-dp[k<span class="number">-1</span>][i].se));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query2</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        dp2[k][i] = query(dp[k][i].fi, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> cc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].fi&gt;&gt;p[i].se;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p, p+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        x = p[i].fi;</span><br><span class="line">        y = p[i].se;</span><br><span class="line">        <span class="keyword">if</span>(msk[x])&#123;</span><br><span class="line">            vec[msk[x]].eb(y);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cc++;</span><br><span class="line">            s.insert(cc);</span><br><span class="line">            msk[x] = cc;</span><br><span class="line">            vec[cc].eb(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it : s)&#123;</span><br><span class="line">        v.eb(it);</span><br><span class="line">        sort(all(vec[it]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it : v)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sz(vec[it]) == <span class="number">1</span>)&#123;</span><br><span class="line">            dp[cnt][<span class="number">0</span>].fi = dp[cnt][<span class="number">0</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            dp[cnt][<span class="number">1</span>].fi = dp[cnt][<span class="number">1</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            dp[cnt][<span class="number">2</span>].fi = dp[cnt][<span class="number">2</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            dp[cnt][<span class="number">3</span>].fi = dp[cnt][<span class="number">3</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            dp[cnt][<span class="number">4</span>].fi = dp[cnt][<span class="number">4</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            dp[cnt][<span class="number">5</span>].fi = dp[cnt][<span class="number">5</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp[cnt][<span class="number">0</span>].fi = vec[it][<span class="number">0</span>], dp[cnt][<span class="number">0</span>].se = vec[it][<span class="number">1</span>];</span><br><span class="line">            dp[cnt][<span class="number">1</span>].fi = vec[it][<span class="number">1</span>], dp[cnt][<span class="number">1</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            dp[cnt][<span class="number">2</span>].fi = vec[it][sz(vec[it])<span class="number">-1</span>], dp[cnt][<span class="number">2</span>].se = vec[it][sz(vec[it])<span class="number">-2</span>];</span><br><span class="line">            dp[cnt][<span class="number">3</span>].fi = vec[it][sz(vec[it])<span class="number">-2</span>], dp[cnt][<span class="number">3</span>].se = vec[it][sz(vec[it])<span class="number">-1</span>];</span><br><span class="line">            dp[cnt][<span class="number">4</span>].fi = vec[it][<span class="number">0</span>], dp[cnt][<span class="number">4</span>].se = vec[it][sz(vec[it])<span class="number">-1</span>];</span><br><span class="line">            dp[cnt][<span class="number">5</span>].fi = vec[it][sz(vec[it])<span class="number">-1</span>], dp[cnt][<span class="number">5</span>].se = vec[it][<span class="number">0</span>];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        query2(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        ans = max(ans, dp2[cnt<span class="number">-1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>lct由于对map不是很会用<del>对map操作总有种莫名恐惧</del>，所以对他操作不是很想看下去qwq  &ensp;他补题写出bug时候也不能为他排忧解难qwq。（ljlct快去训练！）</p>
<h4 id="参考了一下写了一份"><a href="#参考了一下写了一份" class="headerlink" title="参考了一下写了一份"></a>参考了一下写了一份</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-11 18:48:14</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> v, p;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line">ll dp[maxn][<span class="number">4</span>],val[maxn][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.v &lt; b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dqytxdy[maxn];</span><br><span class="line"><span class="keyword">int</span> dqyhaoshuai = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; GTMDDQY[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];  <span class="comment">//离散化之后的</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">discrete</span><span class="params">()</span></span>&#123;</span><br><span class="line">	sort(dqytxdy+<span class="number">1</span>, dqytxdy+<span class="number">1</span>+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i == <span class="number">1</span> || dqytxdy[i] != dqytxdy[i<span class="number">-1</span>])</span><br><span class="line">			b[++m] = dqytxdy[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;  <span class="comment">//查询x映射为1～m之间的整数</span></span><br><span class="line">	<span class="keyword">return</span> lower_bound(b+<span class="number">1</span>, b+<span class="number">1</span>+m, x) - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	close;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a[i].v &gt;&gt; a[i].p;</span><br><span class="line">		dqytxdy[++dqyhaoshuai] = a[i].v;</span><br><span class="line">	&#125;</span><br><span class="line">	discrete();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> dqynb = query(a[i].v);</span><br><span class="line">		GTMDDQY[dqynb].push_back(a[i].p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">		sort(GTMDDQY[i].begin(),GTMDDQY[i].end());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(GTMDDQY[i].size()==<span class="number">1</span>)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>;j++)val[i][j] = GTMDDQY[i][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(GTMDDQY[i].size()&lt;=<span class="number">4</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(; j &lt; GTMDDQY[i].size();j++)val[i][j] = GTMDDQY[i][j];</span><br><span class="line">			<span class="keyword">for</span>(; j &lt; <span class="number">4</span>;j++)val[i][j] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	    <span class="keyword">else</span> &#123;</span><br><span class="line">	    	val[i][<span class="number">0</span>] = GTMDDQY[i][<span class="number">0</span>];</span><br><span class="line">            val[i][<span class="number">1</span>] = GTMDDQY[i][<span class="number">1</span>];</span><br><span class="line">            val[i][<span class="number">2</span>] = GTMDDQY[i][GTMDDQY[i].size()<span class="number">-2</span>];</span><br><span class="line">            val[i][<span class="number">3</span>] = GTMDDQY[i][GTMDDQY[i].size()<span class="number">-1</span>];</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">4</span>;j++)</span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; <span class="number">4</span>;k++)</span><br><span class="line">		        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l &lt; <span class="number">4</span>;l++)&#123;</span><br><span class="line">		            <span class="keyword">if</span>( val[i<span class="number">-1</span>][k] == <span class="number">-1</span>||val[i][j]==<span class="number">-1</span> || l==k ) <span class="keyword">continue</span>;</span><br><span class="line">		            dp[i][j]=max(dp[i][j],dp[i<span class="number">-1</span>][l]+<span class="built_in">abs</span>(val[i][j]-val[i<span class="number">-1</span>][k]));</span><br><span class="line">		        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i) ans=max(ans,dp[m][i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<p>原谅我的变量名，由于这种丑陋变量名导致我调参调了好一会儿</p>
<h4 id="大神写法"><a href="#大神写法" class="headerlink" title="大神写法"></a>大神写法</h4><p>三维 滚动数组  orz  tttttttttrx!!<br><img src="https://i.loli.net/2019/09/15/BKjqRQZ3zisdYln.jpg" alt="orz cust之光"></p>
<h1 id="trx天下第一！！"><a href="#trx天下第一！！" class="headerlink" title="trx天下第一！！"></a><font color="black" size="8" face="黑体">trx天下第一！！</font></h1><h3 id="H题：矩阵快速幂优化dp方程"><a href="#H题：矩阵快速幂优化dp方程" class="headerlink" title="H题：矩阵快速幂优化dp方程"></a>H题：矩阵快速幂优化dp方程</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>要求这么一个序列：a<em>{i-1}*a</em>{i+1}&lt;=a_{i}^{2},且ai序列只能包括0、1、2.</p>
<p>设dp方程dp[i][j][k]为第i位时，后面两位分别是j、k的方案数。<br>j，k的取值方案共九种：00 01 02 10 11 12 20 21 22<br>构造矩阵快速幂的方程：<br><img src="https://i.loli.net/2019/09/15/9LtbCYimBx5syIa.png" alt="矩阵快速幂方程"><br>套路啊，套路就完事了。</p>
<h4 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a>ac代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-09-11 20:48:36</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵快速幂 优化dp 方程</span></span><br><span class="line"><span class="comment">//设dp方程dp[i][j][k]为第i位时，后面两位分别是j、k的方案数。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">00           [1 0 0 1 0 0 1 0 0 ] [0 0]</span></span><br><span class="line"><span class="comment">01           [1 0 0 0 0 0 0 0 0 ] [0 1]               </span></span><br><span class="line"><span class="comment">02           [1 0 0 0 0 0 0 0 0 ] [0 2]</span></span><br><span class="line"><span class="comment">10           [0 1 0 0 1 0 0 1 0 ] [1 0]</span></span><br><span class="line"><span class="comment">11     =     [0 1 0 0 1 0 0 0 0 ] [1 1]</span></span><br><span class="line"><span class="comment">12           [0 1 0 0 0 0 0 0 0 ] [1 2]</span></span><br><span class="line"><span class="comment">20           [0 0 1 0 0 1 0 0 1 ] [2 0]</span></span><br><span class="line"><span class="comment">21           [0 0 1 0 0 1 0 0 1 ] [2 1]</span></span><br><span class="line"><span class="comment">22           [0 0 1 0 0 1 0 0 1 ] [2 2]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000</span>*<span class="number">1000</span>*<span class="number">1000</span>+<span class="number">7</span>;</span><br><span class="line">ll m[<span class="number">9</span>][<span class="number">9</span>] =&#123;</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">	&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ll mat[MAXN][MAXN];</span><br><span class="line">	Matrix() &#123;&#125;</span><br><span class="line">	Matrix <span class="keyword">operator</span>*(Matrix <span class="keyword">const</span> &amp;b)<span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		Matrix res;</span><br><span class="line">		<span class="built_in">memset</span>(res.mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(res.mat));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAXN; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAXN; k++)</span><br><span class="line">			res.mat [i][j]  = (res.mat[i][j]+<span class="keyword">this</span>-&gt;mat[i][k] * b.mat[k][j])%mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix  <span class="title">pow_mod</span><span class="params">(Matrix base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Matrix res;</span><br><span class="line">	<span class="built_in">memset</span>(res.mat, <span class="number">0</span>, <span class="keyword">sizeof</span>(res.mat));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXN; i++)</span><br><span class="line">		res.mat[i][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) res = res*base;</span><br><span class="line">		base = base*base;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n ;</span><br><span class="line">	Matrix base ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>;j++)</span><br><span class="line">			base.mat[i][j] = m[i][j];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	Matrix ans = pow_mod(base , n<span class="number">-2</span>);</span><br><span class="line">	ll sum = <span class="number">0</span> ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">9</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>;j++)</span><br><span class="line">			sum =( sum + ans.mat[i][j] ) % mod;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>
<p>第一次gym还是挺快乐，希望以后可以一直坚持下去，然后有所收获。<del>（补题整整咕咕咕了一礼拜就很尴尬，这周的补题又什么时候呢qwq）</del></p>
<p>希望正如当初 突然想到的</p>
<p>博观而约取<br>厚积而薄发</p>
]]></content>
      <categories>
        <category>Team Round（2019）</category>
      </categories>
      <tags>
        <tag>GYM Training</tag>
        <tag>Team Round（2019）</tag>
      </tags>
  </entry>
  <entry>
    <title>今日最佳</title>
    <url>/2019/08/27/chickensoup827/</url>
    <content><![CDATA[<p>学弟你不要想太多。技能点去点去就行了。</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;—超哥语录</p>
]]></content>
      <categories>
        <category>Roast</category>
      </categories>
      <tags>
        <tag>Roast</tag>
      </tags>
  </entry>
  <entry>
    <title>Minimum Spanning tree MST最小生成树 &amp;#lt; template &amp;gt;</title>
    <url>/2019/08/20/templateofMST/</url>
    <content><![CDATA[<p>总结一下最小生成树，并且放一下模板。</p>
<p>假设 n 表示点数，m 表示边数。</p>
<h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><h4 id="适用条件："><a href="#适用条件：" class="headerlink" title="适用条件："></a>适用条件：</h4><p>适用于稠密图，时间复杂度 O(n^2)。</p>
<h4 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h4><p>每次挑一条与当前集合相连的最短边。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prim 算法  类似与dijkstra算法   总是维护最小生成树的一部分</span></span><br><span class="line"><span class="comment">//prim 算法适用于稠密图，  kruskal算法适用于 稀疏图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//假设现在已经求得的生成树的顶点的集合是x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cost [max_v][max_v];    <span class="comment">//cost[u][v]表示边e=(u,v)的权值(不存在的时候设为inf)</span></span><br><span class="line"><span class="keyword">int</span> mincost[max_v];         <span class="comment">//从集合x出发的边到每个顶点的最小权值</span></span><br><span class="line"><span class="keyword">bool</span> used[max_v];           <span class="comment">//顶点i是否包含在集合x中</span></span><br><span class="line"><span class="keyword">int</span> V;                      <span class="comment">//顶点数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++)&#123;</span><br><span class="line">		mincost[i] = INF;</span><br><span class="line">		used[i] = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	mincost[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = <span class="number">-1</span>;</span><br><span class="line">		<span class="comment">//从不属于x的顶点中选取从x到其权值最小的顶点</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; V; u++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!used[u] &amp;&amp; (v == <span class="number">-1</span>|| mincost[u] &lt; mincost[v]))v = u;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(v == <span class="number">-1</span> )<span class="keyword">break</span>;</span><br><span class="line">		used[v] = <span class="literal">true</span>; <span class="comment">//把顶点v加入x</span></span><br><span class="line">		res += mincost[v]; <span class="comment">//把边的长度加到结果里</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; V;u++)&#123;</span><br><span class="line">			mincost[u] = <span class="built_in">min</span>(mincost[u],cost[v][u]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="堆优化的prim"><a href="#堆优化的prim" class="headerlink" title="堆优化的prim"></a>堆优化的prim</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prim 堆优化</span></span><br><span class="line"><span class="comment">// 在不确定有多少条边的时候不好用，建议还是用原始的prim算法</span></span><br><span class="line"><span class="keyword">int</span> N,M;<span class="comment">//N个点，M个边</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V_MAX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1</span>&lt;&lt;<span class="number">31</span> - <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, cost;</span><br><span class="line">    edge(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">        to = a;</span><br><span class="line">        cost = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt; P;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;edge &gt; G[V_MAX];</span><br><span class="line"><span class="keyword">int</span> used[V_MAX];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; pque;</span><br><span class="line">    pque.push(P(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(!pque.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        P temp = pque.top();</span><br><span class="line">        pque.pop();</span><br><span class="line">        <span class="keyword">int</span> V = temp.second;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">cos</span> = temp.first;</span><br><span class="line">        <span class="keyword">if</span>(used[V])<span class="keyword">continue</span>;</span><br><span class="line">        sum += <span class="built_in">cos</span>;</span><br><span class="line">        used[V] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[V].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            edge e = G[V][i];</span><br><span class="line">            pque.push(P(e.cost, e.to));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fir,sec,thi;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;fir, &amp;sec, &amp;thi);</span><br><span class="line">        G[fir].push_back(edge(sec,thi));</span><br><span class="line">        G[sec].push_back(edge(fir,thi));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; prim() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><h4 id="适用条件：-1"><a href="#适用条件：-1" class="headerlink" title="适用条件："></a>适用条件：</h4><p>适用于稀疏图，时间复杂度  O(mlogm)。</p>
<h4 id="核心思想：-1"><a href="#核心思想：-1" class="headerlink" title="核心思想："></a>核心思想：</h4><p>从小到大挑不多余的边。</p>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,val;<span class="comment">//u-v之间边权为val</span></span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span><span class="comment">//按照边权小到大排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//并查集查找父节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[x]==x) <span class="keyword">return</span> father[x];</span><br><span class="line">    <span class="keyword">return</span> father[x]=Find(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//合并</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=Find(x);</span><br><span class="line">    <span class="keyword">int</span> fb=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(fa!=fb) father[fb]=fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(edge,edge+m,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) father[i]=i;<span class="comment">//初始化并查集</span></span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fa=Find(edge[i].u);</span><br><span class="line">        <span class="keyword">int</span> fb=Find(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(fa!=fb)<span class="comment">//如果u，v属于不同集合，进行合并，加入边权</span></span><br><span class="line">        &#123;</span><br><span class="line">            Union(edge[i].u,edge[i].v);</span><br><span class="line">            ans+=edge[i].val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当时直接套并查集写的，显得有点冗余</p>
<p>题目的话，以后有时间再放。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Template</tag>
        <tag>MST</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 982C Cut &#39;em all!</title>
    <url>/2019/08/18/CF-982C/</url>
    <content><![CDATA[<p>昨天做到一道有趣的题目</p>
<p><a href="https://codeforces.com/problemset/problem/982/C" target="_blank" rel="noopener"> Codeforces 982C Cut ‘em all! </a></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一棵树，让你删掉一些边之后使得所有连通块都是偶数个点。可以的话输出最多能删的边数，否则输出-1。</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先，如果节点数本身就是奇数个，输出-1。</p>
<p>选一个点当做根，dfs数一下当前点的数量（包括自己）。如果是偶数，说明当前点和当前的父节点之间的边是可以删除的，ans++。 </p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/************************************************</span></span><br><span class="line"><span class="comment"> # @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> # @DateTime:    2019-08-17 10:19:30</span></span><br><span class="line"><span class="comment"> # @Description: You build it.You run it</span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span> &gt; vec[maxn];</span><br><span class="line"><span class="keyword">int</span> ans , n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u , <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x : vec[u])<span class="keyword">if</span>(x != fa)</span><br><span class="line">		res += dfs(x , u);</span><br><span class="line">	<span class="keyword">if</span>(res % <span class="number">2</span> == <span class="number">0</span>)ans++;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">int</span> u,v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">		vec[u].pb(v);</span><br><span class="line">		vec[v].pb(u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;((n&amp;<span class="number">1</span>)?<span class="number">-1</span>:(ans - <span class="number">1</span>))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> stuff you should look for</span></span><br><span class="line"><span class="comment">  * int overflow, array bounds</span></span><br><span class="line"><span class="comment">  * special cases (n=1?), set tle</span></span><br><span class="line"><span class="comment">  * do smth instead of nothing and stay organized</span></span><br><span class="line"><span class="comment">*******************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>cf</tag>
        <tag>Tree</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>CF #577 div 2 解题报告</title>
    <url>/2019/08/05/CF-577-div-2-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h2 id="Codeforces-Round-577-Div-2"><a href="#Codeforces-Round-577-Div-2" class="headerlink" title="Codeforces Round #577 (Div. 2)"></a>Codeforces Round #577 (Div. 2)</h2><p>这场比赛在北京时间8月5号凌晨打，实在是吃不消，就没有打。只能补题：目前只补了ABC。</p>
<p>A题一发，B题wa了一次（wa &ensp; test9 ），C题wa了一次（wa&ensp; test4），对于C题，感觉还是思维僵硬，如果不是面向测试点编程，可能会想不到。</p>
<h3 id="A-Important-Exam"><a href="#A-Important-Exam" class="headerlink" title="A. Important Exam"></a>A. Important Exam</h3><p><kbd><a href="https://codeforces.com/contest/1201/problem/A" target="_blank" rel="noopener">传送门</a></kbd></p>
<h4 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h4><p>N个学生，M个题目，考试，每个题目有ABCDE选项，学生选对了会获得分数，求学生获得分数最大值。</p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>统计出题目答案出现次数最多的选项乘以分值，求和一下。</p>
<h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> * @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> * @DateTime:    2019-08-05 11:37:04</span></span><br><span class="line"><span class="comment"> * @Description: You build it, You run it.  </span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max__</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c,<span class="keyword">int</span> d ,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(a,<span class="built_in">max</span>(b,<span class="built_in">max</span>(c,<span class="built_in">max</span>(d,e))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span>  j = <span class="number">1</span>; j &lt;= m;j++)</span><br><span class="line">			dp[j][s[j<span class="number">-1</span>]-<span class="string">'A'</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> kk;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;kk;</span><br><span class="line">		ans += max__(dp[i][<span class="number">0</span>],dp[i][<span class="number">1</span>],dp[i][<span class="number">2</span>],dp[i][<span class="number">3</span>],dp[i][<span class="number">4</span>])*kk;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-Zero-Array"><a href="#B-Zero-Array" class="headerlink" title="B.Zero Array"></a>B.Zero Array</h3><p><kbd><a href="https://codeforces.com/contest/1201/problem/B" target="_blank" rel="noopener">传送门</a></kbd></p>
<h4 id="题意：-1"><a href="#题意：-1" class="headerlink" title="题意："></a>题意：</h4><p>给n个数，两个下标不同的数同时减去 数值较小的数，问这n个数经过一系列<del>不可描述</del>操作后，能否实现，这n个数都变成零。</p>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>容易看出，∑ ai  必须是偶数。</p>
<p>仅仅这个还不够，还有一个点就是，这n个数中的max必须小于等于(∑ai) /2，这样才能保证所有数都能为零。</p>
<h4 id="AC代码：-1"><a href="#AC代码：-1" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> * @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> * @DateTime:    2019-08-05 11:46:15</span></span><br><span class="line"><span class="comment"> * @Description: You build it, You run it.  </span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		sum +=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> kk = *max_element(a,a+n);</span><br><span class="line">	<span class="keyword">if</span>(sum&amp;<span class="number">1</span>||kk&gt;sum/<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-Maximum-Median"><a href="#C-Maximum-Median" class="headerlink" title="C. Maximum Median"></a>C. Maximum Median</h3><p><kbd><a href="https://codeforces.com/contest/1201/problem/C" target="_blank" rel="noopener">传送门</a></kbd></p>
<h4 id="题意：-2"><a href="#题意：-2" class="headerlink" title="题意："></a>题意：</h4><p>给定n,k,数组。数组中n个数字，你可以操作k次，每次操作使得数组中某个元素+1，求k次操作后这个（有序数组）的中位数的最大可能值。</p>
<h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p>首先可以肯定 操作要往大的数字操作，那么就是中位数位置往后操作，才能尽可能的大，用<code>数组b</code>来记录中位数往后的a[i+1] - a[i] 的值，每次都” 填平 “那种 感觉去让中位数尽可能大。</p>
<p>第一次写wa 了，想了好一会儿也不知道哪里出问题，看了测试样例之后发现是1 1 1 这种情况，当n = 1时，我的代码有问题，没有数组b，就不会执行。感觉个人局限性还是很大，不借助测试点我可能很难想到n==1这种情况。个人局限性还是很大，还得多练习，开阔思路。。</p>
<h4 id="AC代码：-2"><a href="#AC代码：-2" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************</span></span><br><span class="line"><span class="comment"> * @Author:      miniLCT</span></span><br><span class="line"><span class="comment"> * @DateTime:    2019-08-05 12:08:13</span></span><br><span class="line"><span class="comment"> * @Description: You build it, You run it.  </span></span><br><span class="line"><span class="comment"> ***********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>)&#123;<span class="built_in">cout</span>&lt;&lt;a[<span class="number">0</span>]+k&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;  <span class="comment">//wa 4 </span></span><br><span class="line">	sort(a,a+n);</span><br><span class="line">	<span class="comment">//中位数a[n/2];</span></span><br><span class="line">	<span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n/<span class="number">2</span>; i &lt;n<span class="number">-1</span> ;i++)&#123;</span><br><span class="line">		b[tmp++] = a[i+<span class="number">1</span>] - a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> tmpp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(k &gt; tmpp * b[tmpp] )&#123;</span><br><span class="line">		k -= tmpp * b[tmpp] ;</span><br><span class="line">		a[n/<span class="number">2</span>] += b[tmpp];</span><br><span class="line">		tmpp++;</span><br><span class="line">		<span class="keyword">if</span>(tmp == tmpp)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//if(tmp == tmpp) a[n/2] += (k - sum)/(tmpp-1);</span></span><br><span class="line">	a[n/<span class="number">2</span>] += k/tmpp;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a[n/<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>D题还没写，，等有空再补题把。</p>
]]></content>
      <categories>
        <category>CodeForces</category>
      </categories>
      <tags>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime 的一些简单配置</title>
    <url>/2019/08/03/sublime/</url>
    <content><![CDATA[ <font color="hotpink" size="7" face="source code pro">upd2：</font>

 <font color="RED" size="5" face="source code pro">VSC真香</font>


 <font color="hotpink" size="7" face="source code pro">upd：</font>

 <font color="#90EE90" size="5" face="source code pro">i love vim！！</font>

 <font color="green" size="5" face="Source code pro">i love vim！！</font>


 <font color="ForestGreen" size="5" face="Source code pro">i love vim！！</font>

<hr>
<p>世人都说vim天下第一….</p>
<p>emmm  这句话没毛病</p>
<h1 id="可是monokai颜值也太高了把！！？！"><a href="#可是monokai颜值也太高了把！！？！" class="headerlink" title="可是monokai颜值也太高了把！！？！"></a><font color="red" size="7" face="黑体">可是monokai颜值也太高了把！！？！</font></h1><p>本来和dqy说好一起暑假用vim，然后我在暑假前被sublime的monokai勾引，dqy被material配色+JB的CLion(他认为JB大厂颜值天下第一)所勾引….然后就emmmm….虽然vim可以配置monikai和material，但是我们后来都很少用vim把(至少我是很少用</p>
<p>这文章简单copy一下sublime 在win和ubuntu下我个人配置，主要写给我自己看…</p>
<h1 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h1><h2 id="g-环境下编译"><a href="#g-环境下编译" class="headerlink" title="g++环境下编译"></a>g++环境下编译</h2><p>1.安装g++</p>
<p>2.打开sublime软件，依次打开：Tools—&gt;Build System—&gt;New Build System<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  "encoding": "utf-<span class="number">8</span>",  </span><br><span class="line">  "working_dir": "$file_path",  </span><br><span class="line">  "shell_cmd": "g++ -std=c++<span class="number">11</span> \"$file_name\" -o \"$file_base_name\"",   </span><br><span class="line">  "file_regex": "^(..[^:]*):([<span class="number">0</span>-<span class="number">9</span>]+):?([<span class="number">0</span>-<span class="number">9</span>]+)?:? (.*)$",            </span><br><span class="line">  "selector": "source.c++",     </span><br><span class="line">  "variants":   </span><br><span class="line">  [     </span><br><span class="line">    &#123;           </span><br><span class="line">      "name": "Run",            </span><br><span class="line">      "shell_cmd": "g++ -std=c++<span class="number">11</span>  \"$file\" -o \"$file_base_name\" &amp;&amp; <span class="built_in">start</span> <span class="built_in">cmd</span> /c \"\"$&#123;file_path&#125;/$&#123;file_base_name&#125;\" &amp; <span class="built_in">pause</span>\""     </span><br><span class="line">    &#125;   </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.保存为g++.sublime-build &emsp; &emsp; ，该文件在sublime的 Packages/User 文件夹下</p>
<h2 id="自制快捷头文件（有时间作者信息）"><a href="#自制快捷头文件（有时间作者信息）" class="headerlink" title="自制快捷头文件（有时间作者信息）"></a>自制快捷头文件（有时间作者信息）</h2><p>1.插件放置地址，工程路径：Tools → Developer → New Plugin 保存名字为 addInfo.py   粘贴以下代码：contents中为你想写的内容<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sublime_plugin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddInfoCommand</span><span class="params">(sublime_plugin.TextCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, edit)</span>:</span></span><br><span class="line">        self.view.run_command(<span class="string">"insert_snippet"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"contents"</span>:<span class="string">"/***********************************************"</span><span class="string">"\n"</span></span><br><span class="line">                <span class="string">" * @Author:      miniLCT"</span><span class="string">"\n"</span></span><br><span class="line">                <span class="string">" * @DateTime:    "</span> <span class="string">"%s"</span> %datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)+<span class="string">"\n"</span></span><br><span class="line">                <span class="string">" * @Description: You build it, You run it.  "</span><span class="string">"\n"</span></span><br><span class="line">                <span class="string">" ***********************************************/\n"</span></span><br><span class="line">                <span class="string">"#include &lt;bits/stdc++.h&gt;\n"</span></span><br><span class="line">                <span class="string">"#define ll long long\n"</span></span><br><span class="line">                <span class="string">"const int maxn = 1e6+10;\n"</span></span><br><span class="line">                <span class="string">"#define eps 1e-8"</span></span><br><span class="line">                <span class="string">"\nusing namespace std;\n"</span></span><br><span class="line">                <span class="string">"int main()\n"</span></span><br><span class="line">                <span class="string">"&#123;\n \n&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure></p>
<p><img src="https://i.loli.net/2019/08/03/DLwpnk18vrxeYPh.png" alt="效果图"><br>2.Preference → Key Bindings 在User处添加如下代码<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "command":"add_info",</span><br><span class="line">        "keys":[</span><br><span class="line">            "ctrl+<span class="built_in">shift</span>+."</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>这样只要用ctrl+shift+.   &emsp; 就可以插入你预先设计的内容了。还是蛮方便的？？</p>
<p>emmmm &emsp; 突然想起cls那句话: 打acm用什么插件</p>
<p>trx那句 ：快弃了把，用vim</p>
<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><p>回校以后再更叭</p>
<h1 id="Snippet代码块"><a href="#Snippet代码块" class="headerlink" title="Snippet代码块"></a>Snippet代码块</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;snippet&gt;</span><br><span class="line">	&lt;content&gt;&lt;![CDATA[</span><br><span class="line"><span class="comment">/*************************************</span></span><br><span class="line"><span class="comment"> * Author : miniLCT</span></span><br><span class="line"><span class="comment"> * More : You build it. You run it</span></span><br><span class="line"><span class="comment"> ************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,f_start,f_end) for(int i=f_start;i&lt;=f_end;++i) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT(x,i) memset(x,i,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close std::ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000000009</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> E = <span class="built_in">exp</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $&#123;<span class="number">1</span>:&#125; </span><br><span class="line">&#125;</span><br><span class="line">]]&gt;&lt;/content&gt;</span><br><span class="line">	&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span><br><span class="line">	&lt;tabTrigger&gt;poj&lt;/tabTrigger&gt; </span><br><span class="line">	&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span><br><span class="line">	&lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span><br><span class="line">&lt;/snippet&gt;</span><br></pre></td></tr></table></figure>
<p>保存为poj.sublime-snippet</p>
]]></content>
      <categories>
        <category>摸鱼</category>
      </categories>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈</title>
    <url>/2019/07/31/boyi1/</url>
    <content><![CDATA[<p><strong>最近做一些数学题目，感觉挺有意思的整理了一下。</strong></p>
<h2 id="北京理工大学2018级3月月赛A题：Ervin-and-Joker"><a href="#北京理工大学2018级3月月赛A题：Ervin-and-Joker" class="headerlink" title="北京理工大学2018级3月月赛A题：Ervin and Joker"></a>北京理工大学2018级3月月赛A题：Ervin and Joker</h2><p> <a href="https://vjudge.net/problem/Gym-241030A#author=0" target="_blank" rel="noopener">传送门</a><br><a href="https://i.loli.net/2019/07/31/5d40fd01ddfff80860.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/31/5d40fd01ddfff80860.png" alt="Ervin and Joker題面"></a><br>简单博弈：不难看出，<strong>只要Ervin能把中间的一个或者两个拿走使之隔开，那么Ervin必胜。</strong><br>所以有以下两种情况Ervin可能会输：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n , k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"Joker"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">1</span>&amp;&amp;n%<span class="number">2</span>==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"Joker"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Ervin"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Codeforces-Round-573-Div-2-D题：Tokitsukaze-CSL-and-Stone-Game"><a href="#Codeforces-Round-573-Div-2-D题：Tokitsukaze-CSL-and-Stone-Game" class="headerlink" title="Codeforces Round #573 (Div. 2)D题：Tokitsukaze, CSL and Stone Game"></a>Codeforces Round #573 (Div. 2)D题：Tokitsukaze, CSL and Stone Game</h2><p><a href="http://codeforces.com/contest/1191/problem/D" target="_blank" rel="noopener">传送门</a><br><a href="https://i.loli.net/2019/07/31/5d40fd01ce2b416445.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/31/5d40fd01ce2b416445.png" alt="Tokitsukaze, CSL and Stone Game題面"></a><br>写的时候被hack了，后来面向测试点的编程过了……</p>
<p> AC代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,a[<span class="number">100086</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">set</span>&lt;ll &gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        s.insert(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;=n<span class="number">-2</span>)&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"cslnb"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">int</span> kkk=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">3</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>]&amp;&amp;a[i<span class="number">-1</span>]==a[i]<span class="number">-1</span>)&#123;kkk=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=sum-((<span class="number">1l</span>l*n*(n<span class="number">-1</span>))/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(kkk==<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"cslnb"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sum==<span class="number">0</span>||(a[<span class="number">0</span>]==<span class="number">0</span>&amp;&amp;a[<span class="number">1</span>]==<span class="number">0</span>))<span class="built_in">cout</span>&lt;&lt;<span class="string">"cslnb"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ans%<span class="number">2</span>==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"cslnb"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"sjfnb"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Codeforces-Round-573-Div-2-E题：Tokitsukaze-and-Duel"><a href="#Codeforces-Round-573-Div-2-E题：Tokitsukaze-and-Duel" class="headerlink" title="Codeforces Round #573 (Div. 2)E题：Tokitsukaze and Duel"></a>Codeforces Round #573 (Div. 2)E题：Tokitsukaze and Duel</h2><p><a href="http://codeforces.com/contest/1191/problem/E" target="_blank" rel="noopener">传送门</a><br><a href="https://i.loli.net/2019/07/31/5d40fd01c19ea67305.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/31/5d40fd01c19ea67305.png" alt="Tokitsukaze and Duel題面"></a></p>
<p><strong>题意：</strong></p>
<p>给你一个长度为n的01字符串，和一个整数k。二人进行做博弈游戏，每个人必须选择一个连续的k个字符，把这连续的k个字符全变为0或者1。如果某次操作之后整个字符串全为1或者0，那么这个胜利，如果有无限多步要走，那么算平局，假设二人都绝顶聪明。给你初始局面，问游戏结果是什么？</p>
<p><strong>思路：</strong></p>
<p>首先应该明确，如果先手要赢，他一定要在第一步就赢，否则就不能再赢了。后手要赢的话，他要在他走的第一步赢，不然也不能再赢了、因为另外一个人可以重复选择他刚刚选择的区间，使其不停的翻转，可以知道这样是一直循环下去而且无意义的。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n,k,i=<span class="number">1</span>,x=<span class="number">1</span>,y=<span class="number">1</span>,z;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="built_in">string</span> str;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;n &amp;&amp; str[i]==str[<span class="number">0</span>])</span><br><span class="line">		i++,x++;</span><br><span class="line">	i=n<span class="number">-2</span>,z=n-k<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; str[i]==str[n<span class="number">-1</span>])</span><br><span class="line">		i--,y++;</span><br><span class="line">	<span class="keyword">if</span>((x+k)&gt;=n || (y+k)&gt;=n || (str[<span class="number">0</span>]==str[n<span class="number">-1</span>] &amp;&amp; (x+y+k)&gt;=n))</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"tokitsukaze"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]!=str[n<span class="number">-1</span>] &amp;&amp; x&gt;=z &amp;&amp; y&gt;=z &amp;&amp; k&gt;=z)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"quailty"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"once again"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Educational-Codeforces-Round-68-Rated-for-Div-2-D-1-2-K-Game"><a href="#Educational-Codeforces-Round-68-Rated-for-Div-2-D-1-2-K-Game" class="headerlink" title="Educational Codeforces Round 68 (Rated for Div. 2)D. 1-2-K Game"></a>Educational Codeforces Round 68 (Rated for Div. 2)D. 1-2-K Game</h2><p><a href="http://codeforces.com/contest/1194/problem/D" target="_blank" rel="noopener">传送门</a><br><a href="https://i.loli.net/2019/07/31/5d40fd01b276c12994.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/07/31/5d40fd01b276c12994.png" alt="1-2-K Game題面"></a></p>
<p> 题意：</p>
<p>当前在n位置，每一次可以向左走1,2，或者k步，最左的位置是0，不能走到0的左边， 二人博弈问题，谁没法再走的时候就输掉，问先手必赢还是后手必赢。 </p>
<p> 思路：<br>首先确定的是 0位置是必输位置，因为 1 2 和k这三个位置可以一步就走到0位置，所以这3个位置是必赢位置，以此规律，我们可以递推出sg函数。</p>
<p> 由此我们可以打个表  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> sg[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">    n=<span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    sg[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    sg[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    sg[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i-k)&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sg[i<span class="number">-1</span>]==<span class="number">0</span>||sg[i<span class="number">-2</span>]==<span class="number">0</span>||sg[i-k]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sg[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sg[i<span class="number">-2</span>]==<span class="number">0</span>||sg[i<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sg[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;sg[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <del><em>不    难</em></del>  发现:</p>
<ul>
<li><strong>如果k是3的倍数，那么sg函数是k+1长度的循环节，对循环节取模后，判断n是否是k，如果是k，那么k位置必赢，否则判断是否是3的倍数。如果k不是3的倍数，那么判断n是否是3的倍数即可。</strong><br>AC代码:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Bob"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k%<span class="number">3</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"Bob"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Alice"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> ttt=n%(k+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(ttt==k||ttt%<span class="number">3</span>!=<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"Alice"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Bob"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">close</span>;</span><br><span class="line">	<span class="keyword">int</span> T;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n,k;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">		solve(n,k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="POJ1082Calendar-Game"><a href="#POJ1082Calendar-Game" class="headerlink" title="POJ1082Calendar Game"></a>POJ1082Calendar Game</h2><p><a href="http://poj.org/problem?id=1082" target="_blank" rel="noopener">传送门</a></p>
<p><strong>题意:</strong></p>
<p><strong>给你一个年月日，你可以移动月和日，如果下个月没有当前的天数的时候你就不能移动月，当你刚好移动到11月4日你就赢了，如果你超过了十一月四日你就输了。</strong></p>
<p>刚开始看这道题感觉可以用dfs,后来开始写代码时候感觉要判好几个条件,就没写下去,于是思考了一下,发现:<br><strong>最终我们应该到达的是奇数点，即每次我们都需要保证自己走完后另一位所面对的是奇数局势，然后他只能走到偶数点，也就是一开始我们保证自己是偶数点开局就能赢。于是我就交了几发听取WA声。后来，参考了网上的题解。。<br>才知道，存在（9，30）这个点，下一个点还是奇数点（10,1），或者你可以直接走到（10，30），这样就是偶数点（聪明人都会选择前一种做法，让下一个人面对的局势是必败局），同样对于（11，30），你可以直接走到（12，1），这两个点也是必胜的。总结一下:只开局为偶数开局或者为（9，30），（11，30） 两个特殊的日子，就是必胜局，其他的为必败局。</strong> </p>
<p>AC代码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> close ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> ll linf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">close</span>;</span><br><span class="line">    <span class="keyword">int</span> y,m,d;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;y&gt;&gt;m&gt;&gt;d;</span><br><span class="line">        <span class="keyword">if</span>((m+d)%<span class="number">2</span>==<span class="number">0</span>||(d==<span class="number">30</span>&amp;&amp;(m==<span class="number">9</span>||m==<span class="number">11</span>)))</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>博弈中诸如巴什博弈,威佐夫博奕,Fibonacci博弈,尼姆博弈,公平组合博弈（Impartial Combinatori Games),我觉得都挺有意思的,等过段时间我还想研究研究..</strong></p>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello blog</title>
    <url>/2019/07/28/hello/</url>
    <content><![CDATA[<p>此网站用hexo中的  next主题，三天打鱼两天晒网的我可能只是三分钟热度。</p>
<p>原本是想要以写博客带动我学习，我刚开始还觉得这个挺有趣，后来就觉得很枯燥乏味还挺浪费时间，（有这时间可以多看看书呀233）所以今天弄完之后可能不会老是弄下去，多些新的功能啥的可能就不会搞那么多，毕竟也没有人看。。原意就是督促自己。而事实上<strong>自觉的人完全不需要这个方式</strong></p>
<p><strong><kbd> lj <kbd>lct</kbd></kbd></strong></p>
<p>好，希望自己能多做题多做题多做题多做题把。</p>
]]></content>
      <categories>
        <category>Roast</category>
      </categories>
      <tags>
        <tag>Roast</tag>
      </tags>
  </entry>
</search>
